// Generated by the protocol buffer compiler.  DO NOT EDIT!

#import "IMServer.pb.h"
// @@protoc_insertion_point(imports)

@implementation ImserverRoot
static PBExtensionRegistry* extensionRegistry = nil;
+ (PBExtensionRegistry*) extensionRegistry {
  return extensionRegistry;
}

+ (void) initialize {
  if (self == [ImserverRoot class]) {
    PBMutableExtensionRegistry* registry = [PBMutableExtensionRegistry registry];
    [self registerAllExtensions:registry];
    [ImbaseDefineRoot registerAllExtensions:registry];
    extensionRegistry = registry;
  }
}
+ (void) registerAllExtensions:(PBMutableExtensionRegistry*) registry {
}
@end

@interface IMStopReceivePacket ()
@property UInt32 result;
@end

@implementation IMStopReceivePacket

- (BOOL) hasResult {
  return !!hasResult_;
}
- (void) setHasResult:(BOOL) _value_ {
  hasResult_ = !!_value_;
}
@synthesize result;
- (instancetype) init {
  if ((self = [super init])) {
    self.result = 0;
  }
  return self;
}
static IMStopReceivePacket* defaultIMStopReceivePacketInstance = nil;
+ (void) initialize {
  if (self == [IMStopReceivePacket class]) {
    defaultIMStopReceivePacketInstance = [[IMStopReceivePacket alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultIMStopReceivePacketInstance;
}
- (instancetype) defaultInstance {
  return defaultIMStopReceivePacketInstance;
}
- (BOOL) isInitialized {
  if (!self.hasResult) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasResult) {
    [output writeUInt32:1 value:self.result];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasResult) {
    size_ += computeUInt32Size(1, self.result);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (IMStopReceivePacket*) parseFromData:(NSData*) data {
  return (IMStopReceivePacket*)[[[IMStopReceivePacket builder] mergeFromData:data] build];
}
+ (IMStopReceivePacket*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMStopReceivePacket*)[[[IMStopReceivePacket builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (IMStopReceivePacket*) parseFromInputStream:(NSInputStream*) input {
  return (IMStopReceivePacket*)[[[IMStopReceivePacket builder] mergeFromInputStream:input] build];
}
+ (IMStopReceivePacket*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMStopReceivePacket*)[[[IMStopReceivePacket builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (IMStopReceivePacket*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (IMStopReceivePacket*)[[[IMStopReceivePacket builder] mergeFromCodedInputStream:input] build];
}
+ (IMStopReceivePacket*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMStopReceivePacket*)[[[IMStopReceivePacket builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (IMStopReceivePacketBuilder*) builder {
  return [[IMStopReceivePacketBuilder alloc] init];
}
+ (IMStopReceivePacketBuilder*) builderWithPrototype:(IMStopReceivePacket*) prototype {
  return [[IMStopReceivePacket builder] mergeFrom:prototype];
}
- (IMStopReceivePacketBuilder*) builder {
  return [IMStopReceivePacket builder];
}
- (IMStopReceivePacketBuilder*) toBuilder {
  return [IMStopReceivePacket builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasResult) {
    [output appendFormat:@"%@%@: %@\n", indent, @"result", [NSNumber numberWithInteger:self.result]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasResult) {
    [dictionary setObject: [NSNumber numberWithInteger:self.result] forKey: @"result"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[IMStopReceivePacket class]]) {
    return NO;
  }
  IMStopReceivePacket *otherMessage = other;
  return
      self.hasResult == otherMessage.hasResult &&
      (!self.hasResult || self.result == otherMessage.result) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasResult) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.result] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface IMStopReceivePacketBuilder()
@property (strong) IMStopReceivePacket* resultImstopReceivePacket;
@end

@implementation IMStopReceivePacketBuilder
@synthesize resultImstopReceivePacket;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultImstopReceivePacket = [[IMStopReceivePacket alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultImstopReceivePacket;
}
- (IMStopReceivePacketBuilder*) clear {
  self.resultImstopReceivePacket = [[IMStopReceivePacket alloc] init];
  return self;
}
- (IMStopReceivePacketBuilder*) clone {
  return [IMStopReceivePacket builderWithPrototype:resultImstopReceivePacket];
}
- (IMStopReceivePacket*) defaultInstance {
  return [IMStopReceivePacket defaultInstance];
}
- (IMStopReceivePacket*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (IMStopReceivePacket*) buildPartial {
  IMStopReceivePacket* returnMe = resultImstopReceivePacket;
  self.resultImstopReceivePacket = nil;
  return returnMe;
}
- (IMStopReceivePacketBuilder*) mergeFrom:(IMStopReceivePacket*) other {
  if (other == [IMStopReceivePacket defaultInstance]) {
    return self;
  }
  if (other.hasResult) {
    [self setResult:other.result];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (IMStopReceivePacketBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (IMStopReceivePacketBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setResult:[input readUInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasResult {
  return resultImstopReceivePacket.hasResult;
}
- (UInt32) result {
  return resultImstopReceivePacket.result;
}
- (IMStopReceivePacketBuilder*) setResult:(UInt32) value {
  resultImstopReceivePacket.hasResult = YES;
  resultImstopReceivePacket.result = value;
  return self;
}
- (IMStopReceivePacketBuilder*) clearResult {
  resultImstopReceivePacket.hasResult = NO;
  resultImstopReceivePacket.result = 0;
  return self;
}
@end

@interface IMValidateReq ()
@property (strong) NSString* userName;
@property (strong) NSString* password;
@property (strong) NSData* attachData;
@end

@implementation IMValidateReq

- (BOOL) hasUserName {
  return !!hasUserName_;
}
- (void) setHasUserName:(BOOL) _value_ {
  hasUserName_ = !!_value_;
}
@synthesize userName;
- (BOOL) hasPassword {
  return !!hasPassword_;
}
- (void) setHasPassword:(BOOL) _value_ {
  hasPassword_ = !!_value_;
}
@synthesize password;
- (BOOL) hasAttachData {
  return !!hasAttachData_;
}
- (void) setHasAttachData:(BOOL) _value_ {
  hasAttachData_ = !!_value_;
}
@synthesize attachData;
- (instancetype) init {
  if ((self = [super init])) {
    self.userName = @"";
    self.password = @"";
    self.attachData = [NSData data];
  }
  return self;
}
static IMValidateReq* defaultIMValidateReqInstance = nil;
+ (void) initialize {
  if (self == [IMValidateReq class]) {
    defaultIMValidateReqInstance = [[IMValidateReq alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultIMValidateReqInstance;
}
- (instancetype) defaultInstance {
  return defaultIMValidateReqInstance;
}
- (BOOL) isInitialized {
  if (!self.hasUserName) {
    return NO;
  }
  if (!self.hasPassword) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasUserName) {
    [output writeString:1 value:self.userName];
  }
  if (self.hasPassword) {
    [output writeString:2 value:self.password];
  }
  if (self.hasAttachData) {
    [output writeData:20 value:self.attachData];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasUserName) {
    size_ += computeStringSize(1, self.userName);
  }
  if (self.hasPassword) {
    size_ += computeStringSize(2, self.password);
  }
  if (self.hasAttachData) {
    size_ += computeDataSize(20, self.attachData);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (IMValidateReq*) parseFromData:(NSData*) data {
  return (IMValidateReq*)[[[IMValidateReq builder] mergeFromData:data] build];
}
+ (IMValidateReq*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMValidateReq*)[[[IMValidateReq builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (IMValidateReq*) parseFromInputStream:(NSInputStream*) input {
  return (IMValidateReq*)[[[IMValidateReq builder] mergeFromInputStream:input] build];
}
+ (IMValidateReq*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMValidateReq*)[[[IMValidateReq builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (IMValidateReq*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (IMValidateReq*)[[[IMValidateReq builder] mergeFromCodedInputStream:input] build];
}
+ (IMValidateReq*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMValidateReq*)[[[IMValidateReq builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (IMValidateReqBuilder*) builder {
  return [[IMValidateReqBuilder alloc] init];
}
+ (IMValidateReqBuilder*) builderWithPrototype:(IMValidateReq*) prototype {
  return [[IMValidateReq builder] mergeFrom:prototype];
}
- (IMValidateReqBuilder*) builder {
  return [IMValidateReq builder];
}
- (IMValidateReqBuilder*) toBuilder {
  return [IMValidateReq builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasUserName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"userName", self.userName];
  }
  if (self.hasPassword) {
    [output appendFormat:@"%@%@: %@\n", indent, @"password", self.password];
  }
  if (self.hasAttachData) {
    [output appendFormat:@"%@%@: %@\n", indent, @"attachData", self.attachData];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasUserName) {
    [dictionary setObject: self.userName forKey: @"userName"];
  }
  if (self.hasPassword) {
    [dictionary setObject: self.password forKey: @"password"];
  }
  if (self.hasAttachData) {
    [dictionary setObject: self.attachData forKey: @"attachData"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[IMValidateReq class]]) {
    return NO;
  }
  IMValidateReq *otherMessage = other;
  return
      self.hasUserName == otherMessage.hasUserName &&
      (!self.hasUserName || [self.userName isEqual:otherMessage.userName]) &&
      self.hasPassword == otherMessage.hasPassword &&
      (!self.hasPassword || [self.password isEqual:otherMessage.password]) &&
      self.hasAttachData == otherMessage.hasAttachData &&
      (!self.hasAttachData || [self.attachData isEqual:otherMessage.attachData]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasUserName) {
    hashCode = hashCode * 31 + [self.userName hash];
  }
  if (self.hasPassword) {
    hashCode = hashCode * 31 + [self.password hash];
  }
  if (self.hasAttachData) {
    hashCode = hashCode * 31 + [self.attachData hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface IMValidateReqBuilder()
@property (strong) IMValidateReq* resultImvalidateReq;
@end

@implementation IMValidateReqBuilder
@synthesize resultImvalidateReq;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultImvalidateReq = [[IMValidateReq alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultImvalidateReq;
}
- (IMValidateReqBuilder*) clear {
  self.resultImvalidateReq = [[IMValidateReq alloc] init];
  return self;
}
- (IMValidateReqBuilder*) clone {
  return [IMValidateReq builderWithPrototype:resultImvalidateReq];
}
- (IMValidateReq*) defaultInstance {
  return [IMValidateReq defaultInstance];
}
- (IMValidateReq*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (IMValidateReq*) buildPartial {
  IMValidateReq* returnMe = resultImvalidateReq;
  self.resultImvalidateReq = nil;
  return returnMe;
}
- (IMValidateReqBuilder*) mergeFrom:(IMValidateReq*) other {
  if (other == [IMValidateReq defaultInstance]) {
    return self;
  }
  if (other.hasUserName) {
    [self setUserName:other.userName];
  }
  if (other.hasPassword) {
    [self setPassword:other.password];
  }
  if (other.hasAttachData) {
    [self setAttachData:other.attachData];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (IMValidateReqBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (IMValidateReqBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setUserName:[input readString]];
        break;
      }
      case 18: {
        [self setPassword:[input readString]];
        break;
      }
      case 162: {
        [self setAttachData:[input readData]];
        break;
      }
    }
  }
}
- (BOOL) hasUserName {
  return resultImvalidateReq.hasUserName;
}
- (NSString*) userName {
  return resultImvalidateReq.userName;
}
- (IMValidateReqBuilder*) setUserName:(NSString*) value {
  resultImvalidateReq.hasUserName = YES;
  resultImvalidateReq.userName = value;
  return self;
}
- (IMValidateReqBuilder*) clearUserName {
  resultImvalidateReq.hasUserName = NO;
  resultImvalidateReq.userName = @"";
  return self;
}
- (BOOL) hasPassword {
  return resultImvalidateReq.hasPassword;
}
- (NSString*) password {
  return resultImvalidateReq.password;
}
- (IMValidateReqBuilder*) setPassword:(NSString*) value {
  resultImvalidateReq.hasPassword = YES;
  resultImvalidateReq.password = value;
  return self;
}
- (IMValidateReqBuilder*) clearPassword {
  resultImvalidateReq.hasPassword = NO;
  resultImvalidateReq.password = @"";
  return self;
}
- (BOOL) hasAttachData {
  return resultImvalidateReq.hasAttachData;
}
- (NSData*) attachData {
  return resultImvalidateReq.attachData;
}
- (IMValidateReqBuilder*) setAttachData:(NSData*) value {
  resultImvalidateReq.hasAttachData = YES;
  resultImvalidateReq.attachData = value;
  return self;
}
- (IMValidateReqBuilder*) clearAttachData {
  resultImvalidateReq.hasAttachData = NO;
  resultImvalidateReq.attachData = [NSData data];
  return self;
}
@end

@interface IMValidateRsp ()
@property (strong) NSString* userName;
@property UInt32 resultCode;
@property (strong) NSString* resultString;
@property (strong) UserInfo* userInfo;
@property (strong) NSData* attachData;
@end

@implementation IMValidateRsp

- (BOOL) hasUserName {
  return !!hasUserName_;
}
- (void) setHasUserName:(BOOL) _value_ {
  hasUserName_ = !!_value_;
}
@synthesize userName;
- (BOOL) hasResultCode {
  return !!hasResultCode_;
}
- (void) setHasResultCode:(BOOL) _value_ {
  hasResultCode_ = !!_value_;
}
@synthesize resultCode;
- (BOOL) hasResultString {
  return !!hasResultString_;
}
- (void) setHasResultString:(BOOL) _value_ {
  hasResultString_ = !!_value_;
}
@synthesize resultString;
- (BOOL) hasUserInfo {
  return !!hasUserInfo_;
}
- (void) setHasUserInfo:(BOOL) _value_ {
  hasUserInfo_ = !!_value_;
}
@synthesize userInfo;
- (BOOL) hasAttachData {
  return !!hasAttachData_;
}
- (void) setHasAttachData:(BOOL) _value_ {
  hasAttachData_ = !!_value_;
}
@synthesize attachData;
- (instancetype) init {
  if ((self = [super init])) {
    self.userName = @"";
    self.resultCode = 0;
    self.resultString = @"";
    self.userInfo = [UserInfo defaultInstance];
    self.attachData = [NSData data];
  }
  return self;
}
static IMValidateRsp* defaultIMValidateRspInstance = nil;
+ (void) initialize {
  if (self == [IMValidateRsp class]) {
    defaultIMValidateRspInstance = [[IMValidateRsp alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultIMValidateRspInstance;
}
- (instancetype) defaultInstance {
  return defaultIMValidateRspInstance;
}
- (BOOL) isInitialized {
  if (!self.hasUserName) {
    return NO;
  }
  if (!self.hasResultCode) {
    return NO;
  }
  if (self.hasUserInfo) {
    if (!self.userInfo.isInitialized) {
      return NO;
    }
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasUserName) {
    [output writeString:1 value:self.userName];
  }
  if (self.hasResultCode) {
    [output writeUInt32:2 value:self.resultCode];
  }
  if (self.hasResultString) {
    [output writeString:3 value:self.resultString];
  }
  if (self.hasUserInfo) {
    [output writeMessage:4 value:self.userInfo];
  }
  if (self.hasAttachData) {
    [output writeData:20 value:self.attachData];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasUserName) {
    size_ += computeStringSize(1, self.userName);
  }
  if (self.hasResultCode) {
    size_ += computeUInt32Size(2, self.resultCode);
  }
  if (self.hasResultString) {
    size_ += computeStringSize(3, self.resultString);
  }
  if (self.hasUserInfo) {
    size_ += computeMessageSize(4, self.userInfo);
  }
  if (self.hasAttachData) {
    size_ += computeDataSize(20, self.attachData);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (IMValidateRsp*) parseFromData:(NSData*) data {
  return (IMValidateRsp*)[[[IMValidateRsp builder] mergeFromData:data] build];
}
+ (IMValidateRsp*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMValidateRsp*)[[[IMValidateRsp builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (IMValidateRsp*) parseFromInputStream:(NSInputStream*) input {
  return (IMValidateRsp*)[[[IMValidateRsp builder] mergeFromInputStream:input] build];
}
+ (IMValidateRsp*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMValidateRsp*)[[[IMValidateRsp builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (IMValidateRsp*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (IMValidateRsp*)[[[IMValidateRsp builder] mergeFromCodedInputStream:input] build];
}
+ (IMValidateRsp*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMValidateRsp*)[[[IMValidateRsp builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (IMValidateRspBuilder*) builder {
  return [[IMValidateRspBuilder alloc] init];
}
+ (IMValidateRspBuilder*) builderWithPrototype:(IMValidateRsp*) prototype {
  return [[IMValidateRsp builder] mergeFrom:prototype];
}
- (IMValidateRspBuilder*) builder {
  return [IMValidateRsp builder];
}
- (IMValidateRspBuilder*) toBuilder {
  return [IMValidateRsp builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasUserName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"userName", self.userName];
  }
  if (self.hasResultCode) {
    [output appendFormat:@"%@%@: %@\n", indent, @"resultCode", [NSNumber numberWithInteger:self.resultCode]];
  }
  if (self.hasResultString) {
    [output appendFormat:@"%@%@: %@\n", indent, @"resultString", self.resultString];
  }
  if (self.hasUserInfo) {
    [output appendFormat:@"%@%@ {\n", indent, @"userInfo"];
    [self.userInfo writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasAttachData) {
    [output appendFormat:@"%@%@: %@\n", indent, @"attachData", self.attachData];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasUserName) {
    [dictionary setObject: self.userName forKey: @"userName"];
  }
  if (self.hasResultCode) {
    [dictionary setObject: [NSNumber numberWithInteger:self.resultCode] forKey: @"resultCode"];
  }
  if (self.hasResultString) {
    [dictionary setObject: self.resultString forKey: @"resultString"];
  }
  if (self.hasUserInfo) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.userInfo storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"userInfo"];
  }
  if (self.hasAttachData) {
    [dictionary setObject: self.attachData forKey: @"attachData"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[IMValidateRsp class]]) {
    return NO;
  }
  IMValidateRsp *otherMessage = other;
  return
      self.hasUserName == otherMessage.hasUserName &&
      (!self.hasUserName || [self.userName isEqual:otherMessage.userName]) &&
      self.hasResultCode == otherMessage.hasResultCode &&
      (!self.hasResultCode || self.resultCode == otherMessage.resultCode) &&
      self.hasResultString == otherMessage.hasResultString &&
      (!self.hasResultString || [self.resultString isEqual:otherMessage.resultString]) &&
      self.hasUserInfo == otherMessage.hasUserInfo &&
      (!self.hasUserInfo || [self.userInfo isEqual:otherMessage.userInfo]) &&
      self.hasAttachData == otherMessage.hasAttachData &&
      (!self.hasAttachData || [self.attachData isEqual:otherMessage.attachData]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasUserName) {
    hashCode = hashCode * 31 + [self.userName hash];
  }
  if (self.hasResultCode) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.resultCode] hash];
  }
  if (self.hasResultString) {
    hashCode = hashCode * 31 + [self.resultString hash];
  }
  if (self.hasUserInfo) {
    hashCode = hashCode * 31 + [self.userInfo hash];
  }
  if (self.hasAttachData) {
    hashCode = hashCode * 31 + [self.attachData hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface IMValidateRspBuilder()
@property (strong) IMValidateRsp* resultImvalidateRsp;
@end

@implementation IMValidateRspBuilder
@synthesize resultImvalidateRsp;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultImvalidateRsp = [[IMValidateRsp alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultImvalidateRsp;
}
- (IMValidateRspBuilder*) clear {
  self.resultImvalidateRsp = [[IMValidateRsp alloc] init];
  return self;
}
- (IMValidateRspBuilder*) clone {
  return [IMValidateRsp builderWithPrototype:resultImvalidateRsp];
}
- (IMValidateRsp*) defaultInstance {
  return [IMValidateRsp defaultInstance];
}
- (IMValidateRsp*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (IMValidateRsp*) buildPartial {
  IMValidateRsp* returnMe = resultImvalidateRsp;
  self.resultImvalidateRsp = nil;
  return returnMe;
}
- (IMValidateRspBuilder*) mergeFrom:(IMValidateRsp*) other {
  if (other == [IMValidateRsp defaultInstance]) {
    return self;
  }
  if (other.hasUserName) {
    [self setUserName:other.userName];
  }
  if (other.hasResultCode) {
    [self setResultCode:other.resultCode];
  }
  if (other.hasResultString) {
    [self setResultString:other.resultString];
  }
  if (other.hasUserInfo) {
    [self mergeUserInfo:other.userInfo];
  }
  if (other.hasAttachData) {
    [self setAttachData:other.attachData];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (IMValidateRspBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (IMValidateRspBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setUserName:[input readString]];
        break;
      }
      case 16: {
        [self setResultCode:[input readUInt32]];
        break;
      }
      case 26: {
        [self setResultString:[input readString]];
        break;
      }
      case 34: {
        UserInfoBuilder* subBuilder = [UserInfo builder];
        if (self.hasUserInfo) {
          [subBuilder mergeFrom:self.userInfo];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setUserInfo:[subBuilder buildPartial]];
        break;
      }
      case 162: {
        [self setAttachData:[input readData]];
        break;
      }
    }
  }
}
- (BOOL) hasUserName {
  return resultImvalidateRsp.hasUserName;
}
- (NSString*) userName {
  return resultImvalidateRsp.userName;
}
- (IMValidateRspBuilder*) setUserName:(NSString*) value {
  resultImvalidateRsp.hasUserName = YES;
  resultImvalidateRsp.userName = value;
  return self;
}
- (IMValidateRspBuilder*) clearUserName {
  resultImvalidateRsp.hasUserName = NO;
  resultImvalidateRsp.userName = @"";
  return self;
}
- (BOOL) hasResultCode {
  return resultImvalidateRsp.hasResultCode;
}
- (UInt32) resultCode {
  return resultImvalidateRsp.resultCode;
}
- (IMValidateRspBuilder*) setResultCode:(UInt32) value {
  resultImvalidateRsp.hasResultCode = YES;
  resultImvalidateRsp.resultCode = value;
  return self;
}
- (IMValidateRspBuilder*) clearResultCode {
  resultImvalidateRsp.hasResultCode = NO;
  resultImvalidateRsp.resultCode = 0;
  return self;
}
- (BOOL) hasResultString {
  return resultImvalidateRsp.hasResultString;
}
- (NSString*) resultString {
  return resultImvalidateRsp.resultString;
}
- (IMValidateRspBuilder*) setResultString:(NSString*) value {
  resultImvalidateRsp.hasResultString = YES;
  resultImvalidateRsp.resultString = value;
  return self;
}
- (IMValidateRspBuilder*) clearResultString {
  resultImvalidateRsp.hasResultString = NO;
  resultImvalidateRsp.resultString = @"";
  return self;
}
- (BOOL) hasUserInfo {
  return resultImvalidateRsp.hasUserInfo;
}
- (UserInfo*) userInfo {
  return resultImvalidateRsp.userInfo;
}
- (IMValidateRspBuilder*) setUserInfo:(UserInfo*) value {
  resultImvalidateRsp.hasUserInfo = YES;
  resultImvalidateRsp.userInfo = value;
  return self;
}
- (IMValidateRspBuilder*) setUserInfoBuilder:(UserInfoBuilder*) builderForValue {
  return [self setUserInfo:[builderForValue build]];
}
- (IMValidateRspBuilder*) mergeUserInfo:(UserInfo*) value {
  if (resultImvalidateRsp.hasUserInfo &&
      resultImvalidateRsp.userInfo != [UserInfo defaultInstance]) {
    resultImvalidateRsp.userInfo =
      [[[UserInfo builderWithPrototype:resultImvalidateRsp.userInfo] mergeFrom:value] buildPartial];
  } else {
    resultImvalidateRsp.userInfo = value;
  }
  resultImvalidateRsp.hasUserInfo = YES;
  return self;
}
- (IMValidateRspBuilder*) clearUserInfo {
  resultImvalidateRsp.hasUserInfo = NO;
  resultImvalidateRsp.userInfo = [UserInfo defaultInstance];
  return self;
}
- (BOOL) hasAttachData {
  return resultImvalidateRsp.hasAttachData;
}
- (NSData*) attachData {
  return resultImvalidateRsp.attachData;
}
- (IMValidateRspBuilder*) setAttachData:(NSData*) value {
  resultImvalidateRsp.hasAttachData = YES;
  resultImvalidateRsp.attachData = value;
  return self;
}
- (IMValidateRspBuilder*) clearAttachData {
  resultImvalidateRsp.hasAttachData = NO;
  resultImvalidateRsp.attachData = [NSData data];
  return self;
}
@end

@interface IMGetDeviceTokenReq ()
@property (strong) PBAppendableArray * userIdArray;
@property (strong) NSData* attachData;
@end

@implementation IMGetDeviceTokenReq

@synthesize userIdArray;
@dynamic userId;
- (BOOL) hasAttachData {
  return !!hasAttachData_;
}
- (void) setHasAttachData:(BOOL) _value_ {
  hasAttachData_ = !!_value_;
}
@synthesize attachData;
- (instancetype) init {
  if ((self = [super init])) {
    self.attachData = [NSData data];
  }
  return self;
}
static IMGetDeviceTokenReq* defaultIMGetDeviceTokenReqInstance = nil;
+ (void) initialize {
  if (self == [IMGetDeviceTokenReq class]) {
    defaultIMGetDeviceTokenReqInstance = [[IMGetDeviceTokenReq alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultIMGetDeviceTokenReqInstance;
}
- (instancetype) defaultInstance {
  return defaultIMGetDeviceTokenReqInstance;
}
- (PBArray *)userId {
  return userIdArray;
}
- (UInt32)userIdAtIndex:(NSUInteger)index {
  return [userIdArray uint32AtIndex:index];
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  const NSUInteger userIdArrayCount = self.userIdArray.count;
  if (userIdArrayCount > 0) {
    const UInt32 *values = (const UInt32 *)self.userIdArray.data;
    for (NSUInteger i = 0; i < userIdArrayCount; ++i) {
      [output writeUInt32:1 value:values[i]];
    }
  }
  if (self.hasAttachData) {
    [output writeData:20 value:self.attachData];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  {
    __block SInt32 dataSize = 0;
    const NSUInteger count = self.userIdArray.count;
    const UInt32 *values = (const UInt32 *)self.userIdArray.data;
    for (NSUInteger i = 0; i < count; ++i) {
      dataSize += computeUInt32SizeNoTag(values[i]);
    }
    size_ += dataSize;
    size_ += (SInt32)(1 * count);
  }
  if (self.hasAttachData) {
    size_ += computeDataSize(20, self.attachData);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (IMGetDeviceTokenReq*) parseFromData:(NSData*) data {
  return (IMGetDeviceTokenReq*)[[[IMGetDeviceTokenReq builder] mergeFromData:data] build];
}
+ (IMGetDeviceTokenReq*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMGetDeviceTokenReq*)[[[IMGetDeviceTokenReq builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (IMGetDeviceTokenReq*) parseFromInputStream:(NSInputStream*) input {
  return (IMGetDeviceTokenReq*)[[[IMGetDeviceTokenReq builder] mergeFromInputStream:input] build];
}
+ (IMGetDeviceTokenReq*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMGetDeviceTokenReq*)[[[IMGetDeviceTokenReq builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (IMGetDeviceTokenReq*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (IMGetDeviceTokenReq*)[[[IMGetDeviceTokenReq builder] mergeFromCodedInputStream:input] build];
}
+ (IMGetDeviceTokenReq*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMGetDeviceTokenReq*)[[[IMGetDeviceTokenReq builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (IMGetDeviceTokenReqBuilder*) builder {
  return [[IMGetDeviceTokenReqBuilder alloc] init];
}
+ (IMGetDeviceTokenReqBuilder*) builderWithPrototype:(IMGetDeviceTokenReq*) prototype {
  return [[IMGetDeviceTokenReq builder] mergeFrom:prototype];
}
- (IMGetDeviceTokenReqBuilder*) builder {
  return [IMGetDeviceTokenReq builder];
}
- (IMGetDeviceTokenReqBuilder*) toBuilder {
  return [IMGetDeviceTokenReq builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  [self.userIdArray enumerateObjectsUsingBlock:^(id obj, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@: %@\n", indent, @"userId", obj];
  }];
  if (self.hasAttachData) {
    [output appendFormat:@"%@%@: %@\n", indent, @"attachData", self.attachData];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  NSMutableArray * userIdArrayArray = [NSMutableArray new];
  NSUInteger userIdArrayCount=self.userIdArray.count;
  for(int i=0;i<userIdArrayCount;i++){
    [userIdArrayArray addObject: @([self.userIdArray uint32AtIndex:i])];
  }
  [dictionary setObject: userIdArrayArray forKey: @"userId"];
  if (self.hasAttachData) {
    [dictionary setObject: self.attachData forKey: @"attachData"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[IMGetDeviceTokenReq class]]) {
    return NO;
  }
  IMGetDeviceTokenReq *otherMessage = other;
  return
      [self.userIdArray isEqualToArray:otherMessage.userIdArray] &&
      self.hasAttachData == otherMessage.hasAttachData &&
      (!self.hasAttachData || [self.attachData isEqual:otherMessage.attachData]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  [self.userIdArray enumerateObjectsUsingBlock:^(NSNumber *obj, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [obj longValue];
  }];
  if (self.hasAttachData) {
    hashCode = hashCode * 31 + [self.attachData hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface IMGetDeviceTokenReqBuilder()
@property (strong) IMGetDeviceTokenReq* resultImgetDeviceTokenReq;
@end

@implementation IMGetDeviceTokenReqBuilder
@synthesize resultImgetDeviceTokenReq;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultImgetDeviceTokenReq = [[IMGetDeviceTokenReq alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultImgetDeviceTokenReq;
}
- (IMGetDeviceTokenReqBuilder*) clear {
  self.resultImgetDeviceTokenReq = [[IMGetDeviceTokenReq alloc] init];
  return self;
}
- (IMGetDeviceTokenReqBuilder*) clone {
  return [IMGetDeviceTokenReq builderWithPrototype:resultImgetDeviceTokenReq];
}
- (IMGetDeviceTokenReq*) defaultInstance {
  return [IMGetDeviceTokenReq defaultInstance];
}
- (IMGetDeviceTokenReq*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (IMGetDeviceTokenReq*) buildPartial {
  IMGetDeviceTokenReq* returnMe = resultImgetDeviceTokenReq;
  self.resultImgetDeviceTokenReq = nil;
  return returnMe;
}
- (IMGetDeviceTokenReqBuilder*) mergeFrom:(IMGetDeviceTokenReq*) other {
  if (other == [IMGetDeviceTokenReq defaultInstance]) {
    return self;
  }
  if (other.userIdArray.count > 0) {
    if (resultImgetDeviceTokenReq.userIdArray == nil) {
      resultImgetDeviceTokenReq.userIdArray = [other.userIdArray copy];
    } else {
      [resultImgetDeviceTokenReq.userIdArray appendArray:other.userIdArray];
    }
  }
  if (other.hasAttachData) {
    [self setAttachData:other.attachData];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (IMGetDeviceTokenReqBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (IMGetDeviceTokenReqBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self addUserId:[input readUInt32]];
        break;
      }
      case 162: {
        [self setAttachData:[input readData]];
        break;
      }
    }
  }
}
- (PBAppendableArray *)userId {
  return resultImgetDeviceTokenReq.userIdArray;
}
- (UInt32)userIdAtIndex:(NSUInteger)index {
  return [resultImgetDeviceTokenReq userIdAtIndex:index];
}
- (IMGetDeviceTokenReqBuilder *)addUserId:(UInt32)value {
  if (resultImgetDeviceTokenReq.userIdArray == nil) {
    resultImgetDeviceTokenReq.userIdArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeUInt32];
  }
  [resultImgetDeviceTokenReq.userIdArray addUint32:value];
  return self;
}
- (IMGetDeviceTokenReqBuilder *)setUserIdArray:(NSArray *)array {
  resultImgetDeviceTokenReq.userIdArray = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeUInt32];
  return self;
}
- (IMGetDeviceTokenReqBuilder *)setUserIdValues:(const UInt32 *)values count:(NSUInteger)count {
  resultImgetDeviceTokenReq.userIdArray = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeUInt32];
  return self;
}
- (IMGetDeviceTokenReqBuilder *)clearUserId {
  resultImgetDeviceTokenReq.userIdArray = nil;
  return self;
}
- (BOOL) hasAttachData {
  return resultImgetDeviceTokenReq.hasAttachData;
}
- (NSData*) attachData {
  return resultImgetDeviceTokenReq.attachData;
}
- (IMGetDeviceTokenReqBuilder*) setAttachData:(NSData*) value {
  resultImgetDeviceTokenReq.hasAttachData = YES;
  resultImgetDeviceTokenReq.attachData = value;
  return self;
}
- (IMGetDeviceTokenReqBuilder*) clearAttachData {
  resultImgetDeviceTokenReq.hasAttachData = NO;
  resultImgetDeviceTokenReq.attachData = [NSData data];
  return self;
}
@end

@interface IMGetDeviceTokenRsp ()
@property (strong) NSMutableArray * userTokenInfoArray;
@property (strong) NSData* attachData;
@end

@implementation IMGetDeviceTokenRsp

@synthesize userTokenInfoArray;
@dynamic userTokenInfo;
- (BOOL) hasAttachData {
  return !!hasAttachData_;
}
- (void) setHasAttachData:(BOOL) _value_ {
  hasAttachData_ = !!_value_;
}
@synthesize attachData;
- (instancetype) init {
  if ((self = [super init])) {
    self.attachData = [NSData data];
  }
  return self;
}
static IMGetDeviceTokenRsp* defaultIMGetDeviceTokenRspInstance = nil;
+ (void) initialize {
  if (self == [IMGetDeviceTokenRsp class]) {
    defaultIMGetDeviceTokenRspInstance = [[IMGetDeviceTokenRsp alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultIMGetDeviceTokenRspInstance;
}
- (instancetype) defaultInstance {
  return defaultIMGetDeviceTokenRspInstance;
}
- (NSArray *)userTokenInfo {
  return userTokenInfoArray;
}
- (UserTokenInfo*)userTokenInfoAtIndex:(NSUInteger)index {
  return [userTokenInfoArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  __block BOOL isInituserTokenInfo = YES;
   [self.userTokenInfo enumerateObjectsUsingBlock:^(UserTokenInfo *element, NSUInteger idx, BOOL *stop) {
    if (!element.isInitialized) {
      isInituserTokenInfo = NO;
      *stop = YES;
    }
  }];
  if (!isInituserTokenInfo) return isInituserTokenInfo;
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  [self.userTokenInfoArray enumerateObjectsUsingBlock:^(UserTokenInfo *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:1 value:element];
  }];
  if (self.hasAttachData) {
    [output writeData:20 value:self.attachData];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  [self.userTokenInfoArray enumerateObjectsUsingBlock:^(UserTokenInfo *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(1, element);
  }];
  if (self.hasAttachData) {
    size_ += computeDataSize(20, self.attachData);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (IMGetDeviceTokenRsp*) parseFromData:(NSData*) data {
  return (IMGetDeviceTokenRsp*)[[[IMGetDeviceTokenRsp builder] mergeFromData:data] build];
}
+ (IMGetDeviceTokenRsp*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMGetDeviceTokenRsp*)[[[IMGetDeviceTokenRsp builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (IMGetDeviceTokenRsp*) parseFromInputStream:(NSInputStream*) input {
  return (IMGetDeviceTokenRsp*)[[[IMGetDeviceTokenRsp builder] mergeFromInputStream:input] build];
}
+ (IMGetDeviceTokenRsp*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMGetDeviceTokenRsp*)[[[IMGetDeviceTokenRsp builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (IMGetDeviceTokenRsp*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (IMGetDeviceTokenRsp*)[[[IMGetDeviceTokenRsp builder] mergeFromCodedInputStream:input] build];
}
+ (IMGetDeviceTokenRsp*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMGetDeviceTokenRsp*)[[[IMGetDeviceTokenRsp builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (IMGetDeviceTokenRspBuilder*) builder {
  return [[IMGetDeviceTokenRspBuilder alloc] init];
}
+ (IMGetDeviceTokenRspBuilder*) builderWithPrototype:(IMGetDeviceTokenRsp*) prototype {
  return [[IMGetDeviceTokenRsp builder] mergeFrom:prototype];
}
- (IMGetDeviceTokenRspBuilder*) builder {
  return [IMGetDeviceTokenRsp builder];
}
- (IMGetDeviceTokenRspBuilder*) toBuilder {
  return [IMGetDeviceTokenRsp builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  [self.userTokenInfoArray enumerateObjectsUsingBlock:^(UserTokenInfo *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"userTokenInfo"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  if (self.hasAttachData) {
    [output appendFormat:@"%@%@: %@\n", indent, @"attachData", self.attachData];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  for (UserTokenInfo* element in self.userTokenInfoArray) {
    NSMutableDictionary *elementDictionary = [NSMutableDictionary dictionary];
    [element storeInDictionary:elementDictionary];
    [dictionary setObject:[NSDictionary dictionaryWithDictionary:elementDictionary] forKey:@"userTokenInfo"];
  }
  if (self.hasAttachData) {
    [dictionary setObject: self.attachData forKey: @"attachData"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[IMGetDeviceTokenRsp class]]) {
    return NO;
  }
  IMGetDeviceTokenRsp *otherMessage = other;
  return
      [self.userTokenInfoArray isEqualToArray:otherMessage.userTokenInfoArray] &&
      self.hasAttachData == otherMessage.hasAttachData &&
      (!self.hasAttachData || [self.attachData isEqual:otherMessage.attachData]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  [self.userTokenInfoArray enumerateObjectsUsingBlock:^(UserTokenInfo *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  if (self.hasAttachData) {
    hashCode = hashCode * 31 + [self.attachData hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface IMGetDeviceTokenRspBuilder()
@property (strong) IMGetDeviceTokenRsp* resultImgetDeviceTokenRsp;
@end

@implementation IMGetDeviceTokenRspBuilder
@synthesize resultImgetDeviceTokenRsp;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultImgetDeviceTokenRsp = [[IMGetDeviceTokenRsp alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultImgetDeviceTokenRsp;
}
- (IMGetDeviceTokenRspBuilder*) clear {
  self.resultImgetDeviceTokenRsp = [[IMGetDeviceTokenRsp alloc] init];
  return self;
}
- (IMGetDeviceTokenRspBuilder*) clone {
  return [IMGetDeviceTokenRsp builderWithPrototype:resultImgetDeviceTokenRsp];
}
- (IMGetDeviceTokenRsp*) defaultInstance {
  return [IMGetDeviceTokenRsp defaultInstance];
}
- (IMGetDeviceTokenRsp*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (IMGetDeviceTokenRsp*) buildPartial {
  IMGetDeviceTokenRsp* returnMe = resultImgetDeviceTokenRsp;
  self.resultImgetDeviceTokenRsp = nil;
  return returnMe;
}
- (IMGetDeviceTokenRspBuilder*) mergeFrom:(IMGetDeviceTokenRsp*) other {
  if (other == [IMGetDeviceTokenRsp defaultInstance]) {
    return self;
  }
  if (other.userTokenInfoArray.count > 0) {
    if (resultImgetDeviceTokenRsp.userTokenInfoArray == nil) {
      resultImgetDeviceTokenRsp.userTokenInfoArray = [[NSMutableArray alloc] initWithArray:other.userTokenInfoArray];
    } else {
      [resultImgetDeviceTokenRsp.userTokenInfoArray addObjectsFromArray:other.userTokenInfoArray];
    }
  }
  if (other.hasAttachData) {
    [self setAttachData:other.attachData];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (IMGetDeviceTokenRspBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (IMGetDeviceTokenRspBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        UserTokenInfoBuilder* subBuilder = [UserTokenInfo builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addUserTokenInfo:[subBuilder buildPartial]];
        break;
      }
      case 162: {
        [self setAttachData:[input readData]];
        break;
      }
    }
  }
}
- (NSMutableArray *)userTokenInfo {
  return resultImgetDeviceTokenRsp.userTokenInfoArray;
}
- (UserTokenInfo*)userTokenInfoAtIndex:(NSUInteger)index {
  return [resultImgetDeviceTokenRsp userTokenInfoAtIndex:index];
}
- (IMGetDeviceTokenRspBuilder *)addUserTokenInfo:(UserTokenInfo*)value {
  if (resultImgetDeviceTokenRsp.userTokenInfoArray == nil) {
    resultImgetDeviceTokenRsp.userTokenInfoArray = [[NSMutableArray alloc]init];
  }
  [resultImgetDeviceTokenRsp.userTokenInfoArray addObject:value];
  return self;
}
- (IMGetDeviceTokenRspBuilder *)setUserTokenInfoArray:(NSArray *)array {
  resultImgetDeviceTokenRsp.userTokenInfoArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (IMGetDeviceTokenRspBuilder *)clearUserTokenInfo {
  resultImgetDeviceTokenRsp.userTokenInfoArray = nil;
  return self;
}
- (BOOL) hasAttachData {
  return resultImgetDeviceTokenRsp.hasAttachData;
}
- (NSData*) attachData {
  return resultImgetDeviceTokenRsp.attachData;
}
- (IMGetDeviceTokenRspBuilder*) setAttachData:(NSData*) value {
  resultImgetDeviceTokenRsp.hasAttachData = YES;
  resultImgetDeviceTokenRsp.attachData = value;
  return self;
}
- (IMGetDeviceTokenRspBuilder*) clearAttachData {
  resultImgetDeviceTokenRsp.hasAttachData = NO;
  resultImgetDeviceTokenRsp.attachData = [NSData data];
  return self;
}
@end

@interface IMRoleSet ()
@property UInt32 master;
@end

@implementation IMRoleSet

- (BOOL) hasMaster {
  return !!hasMaster_;
}
- (void) setHasMaster:(BOOL) _value_ {
  hasMaster_ = !!_value_;
}
@synthesize master;
- (instancetype) init {
  if ((self = [super init])) {
    self.master = 0;
  }
  return self;
}
static IMRoleSet* defaultIMRoleSetInstance = nil;
+ (void) initialize {
  if (self == [IMRoleSet class]) {
    defaultIMRoleSetInstance = [[IMRoleSet alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultIMRoleSetInstance;
}
- (instancetype) defaultInstance {
  return defaultIMRoleSetInstance;
}
- (BOOL) isInitialized {
  if (!self.hasMaster) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasMaster) {
    [output writeUInt32:1 value:self.master];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasMaster) {
    size_ += computeUInt32Size(1, self.master);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (IMRoleSet*) parseFromData:(NSData*) data {
  return (IMRoleSet*)[[[IMRoleSet builder] mergeFromData:data] build];
}
+ (IMRoleSet*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMRoleSet*)[[[IMRoleSet builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (IMRoleSet*) parseFromInputStream:(NSInputStream*) input {
  return (IMRoleSet*)[[[IMRoleSet builder] mergeFromInputStream:input] build];
}
+ (IMRoleSet*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMRoleSet*)[[[IMRoleSet builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (IMRoleSet*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (IMRoleSet*)[[[IMRoleSet builder] mergeFromCodedInputStream:input] build];
}
+ (IMRoleSet*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMRoleSet*)[[[IMRoleSet builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (IMRoleSetBuilder*) builder {
  return [[IMRoleSetBuilder alloc] init];
}
+ (IMRoleSetBuilder*) builderWithPrototype:(IMRoleSet*) prototype {
  return [[IMRoleSet builder] mergeFrom:prototype];
}
- (IMRoleSetBuilder*) builder {
  return [IMRoleSet builder];
}
- (IMRoleSetBuilder*) toBuilder {
  return [IMRoleSet builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasMaster) {
    [output appendFormat:@"%@%@: %@\n", indent, @"master", [NSNumber numberWithInteger:self.master]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasMaster) {
    [dictionary setObject: [NSNumber numberWithInteger:self.master] forKey: @"master"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[IMRoleSet class]]) {
    return NO;
  }
  IMRoleSet *otherMessage = other;
  return
      self.hasMaster == otherMessage.hasMaster &&
      (!self.hasMaster || self.master == otherMessage.master) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasMaster) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.master] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface IMRoleSetBuilder()
@property (strong) IMRoleSet* resultImroleSet;
@end

@implementation IMRoleSetBuilder
@synthesize resultImroleSet;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultImroleSet = [[IMRoleSet alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultImroleSet;
}
- (IMRoleSetBuilder*) clear {
  self.resultImroleSet = [[IMRoleSet alloc] init];
  return self;
}
- (IMRoleSetBuilder*) clone {
  return [IMRoleSet builderWithPrototype:resultImroleSet];
}
- (IMRoleSet*) defaultInstance {
  return [IMRoleSet defaultInstance];
}
- (IMRoleSet*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (IMRoleSet*) buildPartial {
  IMRoleSet* returnMe = resultImroleSet;
  self.resultImroleSet = nil;
  return returnMe;
}
- (IMRoleSetBuilder*) mergeFrom:(IMRoleSet*) other {
  if (other == [IMRoleSet defaultInstance]) {
    return self;
  }
  if (other.hasMaster) {
    [self setMaster:other.master];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (IMRoleSetBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (IMRoleSetBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setMaster:[input readUInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasMaster {
  return resultImroleSet.hasMaster;
}
- (UInt32) master {
  return resultImroleSet.master;
}
- (IMRoleSetBuilder*) setMaster:(UInt32) value {
  resultImroleSet.hasMaster = YES;
  resultImroleSet.master = value;
  return self;
}
- (IMRoleSetBuilder*) clearMaster {
  resultImroleSet.hasMaster = NO;
  resultImroleSet.master = 0;
  return self;
}
@end

@interface IMOnlineUserInfo ()
@property (strong) NSMutableArray * userStatListArray;
@end

@implementation IMOnlineUserInfo

@synthesize userStatListArray;
@dynamic userStatList;
- (instancetype) init {
  if ((self = [super init])) {
  }
  return self;
}
static IMOnlineUserInfo* defaultIMOnlineUserInfoInstance = nil;
+ (void) initialize {
  if (self == [IMOnlineUserInfo class]) {
    defaultIMOnlineUserInfoInstance = [[IMOnlineUserInfo alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultIMOnlineUserInfoInstance;
}
- (instancetype) defaultInstance {
  return defaultIMOnlineUserInfoInstance;
}
- (NSArray *)userStatList {
  return userStatListArray;
}
- (ServerUserStat*)userStatListAtIndex:(NSUInteger)index {
  return [userStatListArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  __block BOOL isInituserStatList = YES;
   [self.userStatList enumerateObjectsUsingBlock:^(ServerUserStat *element, NSUInteger idx, BOOL *stop) {
    if (!element.isInitialized) {
      isInituserStatList = NO;
      *stop = YES;
    }
  }];
  if (!isInituserStatList) return isInituserStatList;
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  [self.userStatListArray enumerateObjectsUsingBlock:^(ServerUserStat *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:1 value:element];
  }];
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  [self.userStatListArray enumerateObjectsUsingBlock:^(ServerUserStat *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(1, element);
  }];
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (IMOnlineUserInfo*) parseFromData:(NSData*) data {
  return (IMOnlineUserInfo*)[[[IMOnlineUserInfo builder] mergeFromData:data] build];
}
+ (IMOnlineUserInfo*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMOnlineUserInfo*)[[[IMOnlineUserInfo builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (IMOnlineUserInfo*) parseFromInputStream:(NSInputStream*) input {
  return (IMOnlineUserInfo*)[[[IMOnlineUserInfo builder] mergeFromInputStream:input] build];
}
+ (IMOnlineUserInfo*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMOnlineUserInfo*)[[[IMOnlineUserInfo builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (IMOnlineUserInfo*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (IMOnlineUserInfo*)[[[IMOnlineUserInfo builder] mergeFromCodedInputStream:input] build];
}
+ (IMOnlineUserInfo*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMOnlineUserInfo*)[[[IMOnlineUserInfo builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (IMOnlineUserInfoBuilder*) builder {
  return [[IMOnlineUserInfoBuilder alloc] init];
}
+ (IMOnlineUserInfoBuilder*) builderWithPrototype:(IMOnlineUserInfo*) prototype {
  return [[IMOnlineUserInfo builder] mergeFrom:prototype];
}
- (IMOnlineUserInfoBuilder*) builder {
  return [IMOnlineUserInfo builder];
}
- (IMOnlineUserInfoBuilder*) toBuilder {
  return [IMOnlineUserInfo builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  [self.userStatListArray enumerateObjectsUsingBlock:^(ServerUserStat *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"userStatList"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  for (ServerUserStat* element in self.userStatListArray) {
    NSMutableDictionary *elementDictionary = [NSMutableDictionary dictionary];
    [element storeInDictionary:elementDictionary];
    [dictionary setObject:[NSDictionary dictionaryWithDictionary:elementDictionary] forKey:@"userStatList"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[IMOnlineUserInfo class]]) {
    return NO;
  }
  IMOnlineUserInfo *otherMessage = other;
  return
      [self.userStatListArray isEqualToArray:otherMessage.userStatListArray] &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  [self.userStatListArray enumerateObjectsUsingBlock:^(ServerUserStat *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface IMOnlineUserInfoBuilder()
@property (strong) IMOnlineUserInfo* resultImonlineUserInfo;
@end

@implementation IMOnlineUserInfoBuilder
@synthesize resultImonlineUserInfo;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultImonlineUserInfo = [[IMOnlineUserInfo alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultImonlineUserInfo;
}
- (IMOnlineUserInfoBuilder*) clear {
  self.resultImonlineUserInfo = [[IMOnlineUserInfo alloc] init];
  return self;
}
- (IMOnlineUserInfoBuilder*) clone {
  return [IMOnlineUserInfo builderWithPrototype:resultImonlineUserInfo];
}
- (IMOnlineUserInfo*) defaultInstance {
  return [IMOnlineUserInfo defaultInstance];
}
- (IMOnlineUserInfo*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (IMOnlineUserInfo*) buildPartial {
  IMOnlineUserInfo* returnMe = resultImonlineUserInfo;
  self.resultImonlineUserInfo = nil;
  return returnMe;
}
- (IMOnlineUserInfoBuilder*) mergeFrom:(IMOnlineUserInfo*) other {
  if (other == [IMOnlineUserInfo defaultInstance]) {
    return self;
  }
  if (other.userStatListArray.count > 0) {
    if (resultImonlineUserInfo.userStatListArray == nil) {
      resultImonlineUserInfo.userStatListArray = [[NSMutableArray alloc] initWithArray:other.userStatListArray];
    } else {
      [resultImonlineUserInfo.userStatListArray addObjectsFromArray:other.userStatListArray];
    }
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (IMOnlineUserInfoBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (IMOnlineUserInfoBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        ServerUserStatBuilder* subBuilder = [ServerUserStat builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addUserStatList:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (NSMutableArray *)userStatList {
  return resultImonlineUserInfo.userStatListArray;
}
- (ServerUserStat*)userStatListAtIndex:(NSUInteger)index {
  return [resultImonlineUserInfo userStatListAtIndex:index];
}
- (IMOnlineUserInfoBuilder *)addUserStatList:(ServerUserStat*)value {
  if (resultImonlineUserInfo.userStatListArray == nil) {
    resultImonlineUserInfo.userStatListArray = [[NSMutableArray alloc]init];
  }
  [resultImonlineUserInfo.userStatListArray addObject:value];
  return self;
}
- (IMOnlineUserInfoBuilder *)setUserStatListArray:(NSArray *)array {
  resultImonlineUserInfo.userStatListArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (IMOnlineUserInfoBuilder *)clearUserStatList {
  resultImonlineUserInfo.userStatListArray = nil;
  return self;
}
@end

@interface IMMsgServInfo ()
@property (strong) NSString* ip1;
@property (strong) NSString* ip2;
@property UInt32 port;
@property UInt32 maxConnCnt;
@property UInt32 curConnCnt;
@property (strong) NSString* hostName;
@end

@implementation IMMsgServInfo

- (BOOL) hasIp1 {
  return !!hasIp1_;
}
- (void) setHasIp1:(BOOL) _value_ {
  hasIp1_ = !!_value_;
}
@synthesize ip1;
- (BOOL) hasIp2 {
  return !!hasIp2_;
}
- (void) setHasIp2:(BOOL) _value_ {
  hasIp2_ = !!_value_;
}
@synthesize ip2;
- (BOOL) hasPort {
  return !!hasPort_;
}
- (void) setHasPort:(BOOL) _value_ {
  hasPort_ = !!_value_;
}
@synthesize port;
- (BOOL) hasMaxConnCnt {
  return !!hasMaxConnCnt_;
}
- (void) setHasMaxConnCnt:(BOOL) _value_ {
  hasMaxConnCnt_ = !!_value_;
}
@synthesize maxConnCnt;
- (BOOL) hasCurConnCnt {
  return !!hasCurConnCnt_;
}
- (void) setHasCurConnCnt:(BOOL) _value_ {
  hasCurConnCnt_ = !!_value_;
}
@synthesize curConnCnt;
- (BOOL) hasHostName {
  return !!hasHostName_;
}
- (void) setHasHostName:(BOOL) _value_ {
  hasHostName_ = !!_value_;
}
@synthesize hostName;
- (instancetype) init {
  if ((self = [super init])) {
    self.ip1 = @"";
    self.ip2 = @"";
    self.port = 0;
    self.maxConnCnt = 0;
    self.curConnCnt = 0;
    self.hostName = @"";
  }
  return self;
}
static IMMsgServInfo* defaultIMMsgServInfoInstance = nil;
+ (void) initialize {
  if (self == [IMMsgServInfo class]) {
    defaultIMMsgServInfoInstance = [[IMMsgServInfo alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultIMMsgServInfoInstance;
}
- (instancetype) defaultInstance {
  return defaultIMMsgServInfoInstance;
}
- (BOOL) isInitialized {
  if (!self.hasIp1) {
    return NO;
  }
  if (!self.hasIp2) {
    return NO;
  }
  if (!self.hasPort) {
    return NO;
  }
  if (!self.hasMaxConnCnt) {
    return NO;
  }
  if (!self.hasCurConnCnt) {
    return NO;
  }
  if (!self.hasHostName) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasIp1) {
    [output writeString:1 value:self.ip1];
  }
  if (self.hasIp2) {
    [output writeString:2 value:self.ip2];
  }
  if (self.hasPort) {
    [output writeUInt32:3 value:self.port];
  }
  if (self.hasMaxConnCnt) {
    [output writeUInt32:4 value:self.maxConnCnt];
  }
  if (self.hasCurConnCnt) {
    [output writeUInt32:5 value:self.curConnCnt];
  }
  if (self.hasHostName) {
    [output writeString:6 value:self.hostName];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasIp1) {
    size_ += computeStringSize(1, self.ip1);
  }
  if (self.hasIp2) {
    size_ += computeStringSize(2, self.ip2);
  }
  if (self.hasPort) {
    size_ += computeUInt32Size(3, self.port);
  }
  if (self.hasMaxConnCnt) {
    size_ += computeUInt32Size(4, self.maxConnCnt);
  }
  if (self.hasCurConnCnt) {
    size_ += computeUInt32Size(5, self.curConnCnt);
  }
  if (self.hasHostName) {
    size_ += computeStringSize(6, self.hostName);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (IMMsgServInfo*) parseFromData:(NSData*) data {
  return (IMMsgServInfo*)[[[IMMsgServInfo builder] mergeFromData:data] build];
}
+ (IMMsgServInfo*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMMsgServInfo*)[[[IMMsgServInfo builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (IMMsgServInfo*) parseFromInputStream:(NSInputStream*) input {
  return (IMMsgServInfo*)[[[IMMsgServInfo builder] mergeFromInputStream:input] build];
}
+ (IMMsgServInfo*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMMsgServInfo*)[[[IMMsgServInfo builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (IMMsgServInfo*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (IMMsgServInfo*)[[[IMMsgServInfo builder] mergeFromCodedInputStream:input] build];
}
+ (IMMsgServInfo*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMMsgServInfo*)[[[IMMsgServInfo builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (IMMsgServInfoBuilder*) builder {
  return [[IMMsgServInfoBuilder alloc] init];
}
+ (IMMsgServInfoBuilder*) builderWithPrototype:(IMMsgServInfo*) prototype {
  return [[IMMsgServInfo builder] mergeFrom:prototype];
}
- (IMMsgServInfoBuilder*) builder {
  return [IMMsgServInfo builder];
}
- (IMMsgServInfoBuilder*) toBuilder {
  return [IMMsgServInfo builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasIp1) {
    [output appendFormat:@"%@%@: %@\n", indent, @"ip1", self.ip1];
  }
  if (self.hasIp2) {
    [output appendFormat:@"%@%@: %@\n", indent, @"ip2", self.ip2];
  }
  if (self.hasPort) {
    [output appendFormat:@"%@%@: %@\n", indent, @"port", [NSNumber numberWithInteger:self.port]];
  }
  if (self.hasMaxConnCnt) {
    [output appendFormat:@"%@%@: %@\n", indent, @"maxConnCnt", [NSNumber numberWithInteger:self.maxConnCnt]];
  }
  if (self.hasCurConnCnt) {
    [output appendFormat:@"%@%@: %@\n", indent, @"curConnCnt", [NSNumber numberWithInteger:self.curConnCnt]];
  }
  if (self.hasHostName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"hostName", self.hostName];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasIp1) {
    [dictionary setObject: self.ip1 forKey: @"ip1"];
  }
  if (self.hasIp2) {
    [dictionary setObject: self.ip2 forKey: @"ip2"];
  }
  if (self.hasPort) {
    [dictionary setObject: [NSNumber numberWithInteger:self.port] forKey: @"port"];
  }
  if (self.hasMaxConnCnt) {
    [dictionary setObject: [NSNumber numberWithInteger:self.maxConnCnt] forKey: @"maxConnCnt"];
  }
  if (self.hasCurConnCnt) {
    [dictionary setObject: [NSNumber numberWithInteger:self.curConnCnt] forKey: @"curConnCnt"];
  }
  if (self.hasHostName) {
    [dictionary setObject: self.hostName forKey: @"hostName"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[IMMsgServInfo class]]) {
    return NO;
  }
  IMMsgServInfo *otherMessage = other;
  return
      self.hasIp1 == otherMessage.hasIp1 &&
      (!self.hasIp1 || [self.ip1 isEqual:otherMessage.ip1]) &&
      self.hasIp2 == otherMessage.hasIp2 &&
      (!self.hasIp2 || [self.ip2 isEqual:otherMessage.ip2]) &&
      self.hasPort == otherMessage.hasPort &&
      (!self.hasPort || self.port == otherMessage.port) &&
      self.hasMaxConnCnt == otherMessage.hasMaxConnCnt &&
      (!self.hasMaxConnCnt || self.maxConnCnt == otherMessage.maxConnCnt) &&
      self.hasCurConnCnt == otherMessage.hasCurConnCnt &&
      (!self.hasCurConnCnt || self.curConnCnt == otherMessage.curConnCnt) &&
      self.hasHostName == otherMessage.hasHostName &&
      (!self.hasHostName || [self.hostName isEqual:otherMessage.hostName]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasIp1) {
    hashCode = hashCode * 31 + [self.ip1 hash];
  }
  if (self.hasIp2) {
    hashCode = hashCode * 31 + [self.ip2 hash];
  }
  if (self.hasPort) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.port] hash];
  }
  if (self.hasMaxConnCnt) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.maxConnCnt] hash];
  }
  if (self.hasCurConnCnt) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.curConnCnt] hash];
  }
  if (self.hasHostName) {
    hashCode = hashCode * 31 + [self.hostName hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface IMMsgServInfoBuilder()
@property (strong) IMMsgServInfo* resultImmsgServInfo;
@end

@implementation IMMsgServInfoBuilder
@synthesize resultImmsgServInfo;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultImmsgServInfo = [[IMMsgServInfo alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultImmsgServInfo;
}
- (IMMsgServInfoBuilder*) clear {
  self.resultImmsgServInfo = [[IMMsgServInfo alloc] init];
  return self;
}
- (IMMsgServInfoBuilder*) clone {
  return [IMMsgServInfo builderWithPrototype:resultImmsgServInfo];
}
- (IMMsgServInfo*) defaultInstance {
  return [IMMsgServInfo defaultInstance];
}
- (IMMsgServInfo*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (IMMsgServInfo*) buildPartial {
  IMMsgServInfo* returnMe = resultImmsgServInfo;
  self.resultImmsgServInfo = nil;
  return returnMe;
}
- (IMMsgServInfoBuilder*) mergeFrom:(IMMsgServInfo*) other {
  if (other == [IMMsgServInfo defaultInstance]) {
    return self;
  }
  if (other.hasIp1) {
    [self setIp1:other.ip1];
  }
  if (other.hasIp2) {
    [self setIp2:other.ip2];
  }
  if (other.hasPort) {
    [self setPort:other.port];
  }
  if (other.hasMaxConnCnt) {
    [self setMaxConnCnt:other.maxConnCnt];
  }
  if (other.hasCurConnCnt) {
    [self setCurConnCnt:other.curConnCnt];
  }
  if (other.hasHostName) {
    [self setHostName:other.hostName];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (IMMsgServInfoBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (IMMsgServInfoBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setIp1:[input readString]];
        break;
      }
      case 18: {
        [self setIp2:[input readString]];
        break;
      }
      case 24: {
        [self setPort:[input readUInt32]];
        break;
      }
      case 32: {
        [self setMaxConnCnt:[input readUInt32]];
        break;
      }
      case 40: {
        [self setCurConnCnt:[input readUInt32]];
        break;
      }
      case 50: {
        [self setHostName:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasIp1 {
  return resultImmsgServInfo.hasIp1;
}
- (NSString*) ip1 {
  return resultImmsgServInfo.ip1;
}
- (IMMsgServInfoBuilder*) setIp1:(NSString*) value {
  resultImmsgServInfo.hasIp1 = YES;
  resultImmsgServInfo.ip1 = value;
  return self;
}
- (IMMsgServInfoBuilder*) clearIp1 {
  resultImmsgServInfo.hasIp1 = NO;
  resultImmsgServInfo.ip1 = @"";
  return self;
}
- (BOOL) hasIp2 {
  return resultImmsgServInfo.hasIp2;
}
- (NSString*) ip2 {
  return resultImmsgServInfo.ip2;
}
- (IMMsgServInfoBuilder*) setIp2:(NSString*) value {
  resultImmsgServInfo.hasIp2 = YES;
  resultImmsgServInfo.ip2 = value;
  return self;
}
- (IMMsgServInfoBuilder*) clearIp2 {
  resultImmsgServInfo.hasIp2 = NO;
  resultImmsgServInfo.ip2 = @"";
  return self;
}
- (BOOL) hasPort {
  return resultImmsgServInfo.hasPort;
}
- (UInt32) port {
  return resultImmsgServInfo.port;
}
- (IMMsgServInfoBuilder*) setPort:(UInt32) value {
  resultImmsgServInfo.hasPort = YES;
  resultImmsgServInfo.port = value;
  return self;
}
- (IMMsgServInfoBuilder*) clearPort {
  resultImmsgServInfo.hasPort = NO;
  resultImmsgServInfo.port = 0;
  return self;
}
- (BOOL) hasMaxConnCnt {
  return resultImmsgServInfo.hasMaxConnCnt;
}
- (UInt32) maxConnCnt {
  return resultImmsgServInfo.maxConnCnt;
}
- (IMMsgServInfoBuilder*) setMaxConnCnt:(UInt32) value {
  resultImmsgServInfo.hasMaxConnCnt = YES;
  resultImmsgServInfo.maxConnCnt = value;
  return self;
}
- (IMMsgServInfoBuilder*) clearMaxConnCnt {
  resultImmsgServInfo.hasMaxConnCnt = NO;
  resultImmsgServInfo.maxConnCnt = 0;
  return self;
}
- (BOOL) hasCurConnCnt {
  return resultImmsgServInfo.hasCurConnCnt;
}
- (UInt32) curConnCnt {
  return resultImmsgServInfo.curConnCnt;
}
- (IMMsgServInfoBuilder*) setCurConnCnt:(UInt32) value {
  resultImmsgServInfo.hasCurConnCnt = YES;
  resultImmsgServInfo.curConnCnt = value;
  return self;
}
- (IMMsgServInfoBuilder*) clearCurConnCnt {
  resultImmsgServInfo.hasCurConnCnt = NO;
  resultImmsgServInfo.curConnCnt = 0;
  return self;
}
- (BOOL) hasHostName {
  return resultImmsgServInfo.hasHostName;
}
- (NSString*) hostName {
  return resultImmsgServInfo.hostName;
}
- (IMMsgServInfoBuilder*) setHostName:(NSString*) value {
  resultImmsgServInfo.hasHostName = YES;
  resultImmsgServInfo.hostName = value;
  return self;
}
- (IMMsgServInfoBuilder*) clearHostName {
  resultImmsgServInfo.hasHostName = NO;
  resultImmsgServInfo.hostName = @"";
  return self;
}
@end

@interface IMUserStatusUpdate ()
@property UInt32 userStatus;
@property UInt32 userId;
@property ClientType clientType;
@end

@implementation IMUserStatusUpdate

- (BOOL) hasUserStatus {
  return !!hasUserStatus_;
}
- (void) setHasUserStatus:(BOOL) _value_ {
  hasUserStatus_ = !!_value_;
}
@synthesize userStatus;
- (BOOL) hasUserId {
  return !!hasUserId_;
}
- (void) setHasUserId:(BOOL) _value_ {
  hasUserId_ = !!_value_;
}
@synthesize userId;
- (BOOL) hasClientType {
  return !!hasClientType_;
}
- (void) setHasClientType:(BOOL) _value_ {
  hasClientType_ = !!_value_;
}
@synthesize clientType;
- (instancetype) init {
  if ((self = [super init])) {
    self.userStatus = 0;
    self.userId = 0;
    self.clientType = ClientTypeClientTypeWindows;
  }
  return self;
}
static IMUserStatusUpdate* defaultIMUserStatusUpdateInstance = nil;
+ (void) initialize {
  if (self == [IMUserStatusUpdate class]) {
    defaultIMUserStatusUpdateInstance = [[IMUserStatusUpdate alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultIMUserStatusUpdateInstance;
}
- (instancetype) defaultInstance {
  return defaultIMUserStatusUpdateInstance;
}
- (BOOL) isInitialized {
  if (!self.hasUserStatus) {
    return NO;
  }
  if (!self.hasUserId) {
    return NO;
  }
  if (!self.hasClientType) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasUserStatus) {
    [output writeUInt32:1 value:self.userStatus];
  }
  if (self.hasUserId) {
    [output writeUInt32:2 value:self.userId];
  }
  if (self.hasClientType) {
    [output writeEnum:3 value:self.clientType];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasUserStatus) {
    size_ += computeUInt32Size(1, self.userStatus);
  }
  if (self.hasUserId) {
    size_ += computeUInt32Size(2, self.userId);
  }
  if (self.hasClientType) {
    size_ += computeEnumSize(3, self.clientType);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (IMUserStatusUpdate*) parseFromData:(NSData*) data {
  return (IMUserStatusUpdate*)[[[IMUserStatusUpdate builder] mergeFromData:data] build];
}
+ (IMUserStatusUpdate*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMUserStatusUpdate*)[[[IMUserStatusUpdate builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (IMUserStatusUpdate*) parseFromInputStream:(NSInputStream*) input {
  return (IMUserStatusUpdate*)[[[IMUserStatusUpdate builder] mergeFromInputStream:input] build];
}
+ (IMUserStatusUpdate*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMUserStatusUpdate*)[[[IMUserStatusUpdate builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (IMUserStatusUpdate*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (IMUserStatusUpdate*)[[[IMUserStatusUpdate builder] mergeFromCodedInputStream:input] build];
}
+ (IMUserStatusUpdate*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMUserStatusUpdate*)[[[IMUserStatusUpdate builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (IMUserStatusUpdateBuilder*) builder {
  return [[IMUserStatusUpdateBuilder alloc] init];
}
+ (IMUserStatusUpdateBuilder*) builderWithPrototype:(IMUserStatusUpdate*) prototype {
  return [[IMUserStatusUpdate builder] mergeFrom:prototype];
}
- (IMUserStatusUpdateBuilder*) builder {
  return [IMUserStatusUpdate builder];
}
- (IMUserStatusUpdateBuilder*) toBuilder {
  return [IMUserStatusUpdate builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasUserStatus) {
    [output appendFormat:@"%@%@: %@\n", indent, @"userStatus", [NSNumber numberWithInteger:self.userStatus]];
  }
  if (self.hasUserId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"userId", [NSNumber numberWithInteger:self.userId]];
  }
  if (self.hasClientType) {
    [output appendFormat:@"%@%@: %@\n", indent, @"clientType", NSStringFromClientType(self.clientType)];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasUserStatus) {
    [dictionary setObject: [NSNumber numberWithInteger:self.userStatus] forKey: @"userStatus"];
  }
  if (self.hasUserId) {
    [dictionary setObject: [NSNumber numberWithInteger:self.userId] forKey: @"userId"];
  }
  if (self.hasClientType) {
    [dictionary setObject: @(self.clientType) forKey: @"clientType"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[IMUserStatusUpdate class]]) {
    return NO;
  }
  IMUserStatusUpdate *otherMessage = other;
  return
      self.hasUserStatus == otherMessage.hasUserStatus &&
      (!self.hasUserStatus || self.userStatus == otherMessage.userStatus) &&
      self.hasUserId == otherMessage.hasUserId &&
      (!self.hasUserId || self.userId == otherMessage.userId) &&
      self.hasClientType == otherMessage.hasClientType &&
      (!self.hasClientType || self.clientType == otherMessage.clientType) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasUserStatus) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.userStatus] hash];
  }
  if (self.hasUserId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.userId] hash];
  }
  if (self.hasClientType) {
    hashCode = hashCode * 31 + self.clientType;
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface IMUserStatusUpdateBuilder()
@property (strong) IMUserStatusUpdate* resultImuserStatusUpdate;
@end

@implementation IMUserStatusUpdateBuilder
@synthesize resultImuserStatusUpdate;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultImuserStatusUpdate = [[IMUserStatusUpdate alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultImuserStatusUpdate;
}
- (IMUserStatusUpdateBuilder*) clear {
  self.resultImuserStatusUpdate = [[IMUserStatusUpdate alloc] init];
  return self;
}
- (IMUserStatusUpdateBuilder*) clone {
  return [IMUserStatusUpdate builderWithPrototype:resultImuserStatusUpdate];
}
- (IMUserStatusUpdate*) defaultInstance {
  return [IMUserStatusUpdate defaultInstance];
}
- (IMUserStatusUpdate*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (IMUserStatusUpdate*) buildPartial {
  IMUserStatusUpdate* returnMe = resultImuserStatusUpdate;
  self.resultImuserStatusUpdate = nil;
  return returnMe;
}
- (IMUserStatusUpdateBuilder*) mergeFrom:(IMUserStatusUpdate*) other {
  if (other == [IMUserStatusUpdate defaultInstance]) {
    return self;
  }
  if (other.hasUserStatus) {
    [self setUserStatus:other.userStatus];
  }
  if (other.hasUserId) {
    [self setUserId:other.userId];
  }
  if (other.hasClientType) {
    [self setClientType:other.clientType];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (IMUserStatusUpdateBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (IMUserStatusUpdateBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setUserStatus:[input readUInt32]];
        break;
      }
      case 16: {
        [self setUserId:[input readUInt32]];
        break;
      }
      case 24: {
        ClientType value = (ClientType)[input readEnum];
        if (ClientTypeIsValidValue(value)) {
          [self setClientType:value];
        } else {
          [unknownFields mergeVarintField:3 value:value];
        }
        break;
      }
    }
  }
}
- (BOOL) hasUserStatus {
  return resultImuserStatusUpdate.hasUserStatus;
}
- (UInt32) userStatus {
  return resultImuserStatusUpdate.userStatus;
}
- (IMUserStatusUpdateBuilder*) setUserStatus:(UInt32) value {
  resultImuserStatusUpdate.hasUserStatus = YES;
  resultImuserStatusUpdate.userStatus = value;
  return self;
}
- (IMUserStatusUpdateBuilder*) clearUserStatus {
  resultImuserStatusUpdate.hasUserStatus = NO;
  resultImuserStatusUpdate.userStatus = 0;
  return self;
}
- (BOOL) hasUserId {
  return resultImuserStatusUpdate.hasUserId;
}
- (UInt32) userId {
  return resultImuserStatusUpdate.userId;
}
- (IMUserStatusUpdateBuilder*) setUserId:(UInt32) value {
  resultImuserStatusUpdate.hasUserId = YES;
  resultImuserStatusUpdate.userId = value;
  return self;
}
- (IMUserStatusUpdateBuilder*) clearUserId {
  resultImuserStatusUpdate.hasUserId = NO;
  resultImuserStatusUpdate.userId = 0;
  return self;
}
- (BOOL) hasClientType {
  return resultImuserStatusUpdate.hasClientType;
}
- (ClientType) clientType {
  return resultImuserStatusUpdate.clientType;
}
- (IMUserStatusUpdateBuilder*) setClientType:(ClientType) value {
  resultImuserStatusUpdate.hasClientType = YES;
  resultImuserStatusUpdate.clientType = value;
  return self;
}
- (IMUserStatusUpdateBuilder*) clearClientType {
  resultImuserStatusUpdate.hasClientType = NO;
  resultImuserStatusUpdate.clientType = ClientTypeClientTypeWindows;
  return self;
}
@end

@interface IMUserCntUpdate ()
@property UInt32 userAction;
@property UInt32 userId;
@end

@implementation IMUserCntUpdate

- (BOOL) hasUserAction {
  return !!hasUserAction_;
}
- (void) setHasUserAction:(BOOL) _value_ {
  hasUserAction_ = !!_value_;
}
@synthesize userAction;
- (BOOL) hasUserId {
  return !!hasUserId_;
}
- (void) setHasUserId:(BOOL) _value_ {
  hasUserId_ = !!_value_;
}
@synthesize userId;
- (instancetype) init {
  if ((self = [super init])) {
    self.userAction = 0;
    self.userId = 0;
  }
  return self;
}
static IMUserCntUpdate* defaultIMUserCntUpdateInstance = nil;
+ (void) initialize {
  if (self == [IMUserCntUpdate class]) {
    defaultIMUserCntUpdateInstance = [[IMUserCntUpdate alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultIMUserCntUpdateInstance;
}
- (instancetype) defaultInstance {
  return defaultIMUserCntUpdateInstance;
}
- (BOOL) isInitialized {
  if (!self.hasUserAction) {
    return NO;
  }
  if (!self.hasUserId) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasUserAction) {
    [output writeUInt32:1 value:self.userAction];
  }
  if (self.hasUserId) {
    [output writeUInt32:2 value:self.userId];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasUserAction) {
    size_ += computeUInt32Size(1, self.userAction);
  }
  if (self.hasUserId) {
    size_ += computeUInt32Size(2, self.userId);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (IMUserCntUpdate*) parseFromData:(NSData*) data {
  return (IMUserCntUpdate*)[[[IMUserCntUpdate builder] mergeFromData:data] build];
}
+ (IMUserCntUpdate*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMUserCntUpdate*)[[[IMUserCntUpdate builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (IMUserCntUpdate*) parseFromInputStream:(NSInputStream*) input {
  return (IMUserCntUpdate*)[[[IMUserCntUpdate builder] mergeFromInputStream:input] build];
}
+ (IMUserCntUpdate*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMUserCntUpdate*)[[[IMUserCntUpdate builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (IMUserCntUpdate*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (IMUserCntUpdate*)[[[IMUserCntUpdate builder] mergeFromCodedInputStream:input] build];
}
+ (IMUserCntUpdate*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMUserCntUpdate*)[[[IMUserCntUpdate builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (IMUserCntUpdateBuilder*) builder {
  return [[IMUserCntUpdateBuilder alloc] init];
}
+ (IMUserCntUpdateBuilder*) builderWithPrototype:(IMUserCntUpdate*) prototype {
  return [[IMUserCntUpdate builder] mergeFrom:prototype];
}
- (IMUserCntUpdateBuilder*) builder {
  return [IMUserCntUpdate builder];
}
- (IMUserCntUpdateBuilder*) toBuilder {
  return [IMUserCntUpdate builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasUserAction) {
    [output appendFormat:@"%@%@: %@\n", indent, @"userAction", [NSNumber numberWithInteger:self.userAction]];
  }
  if (self.hasUserId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"userId", [NSNumber numberWithInteger:self.userId]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasUserAction) {
    [dictionary setObject: [NSNumber numberWithInteger:self.userAction] forKey: @"userAction"];
  }
  if (self.hasUserId) {
    [dictionary setObject: [NSNumber numberWithInteger:self.userId] forKey: @"userId"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[IMUserCntUpdate class]]) {
    return NO;
  }
  IMUserCntUpdate *otherMessage = other;
  return
      self.hasUserAction == otherMessage.hasUserAction &&
      (!self.hasUserAction || self.userAction == otherMessage.userAction) &&
      self.hasUserId == otherMessage.hasUserId &&
      (!self.hasUserId || self.userId == otherMessage.userId) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasUserAction) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.userAction] hash];
  }
  if (self.hasUserId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.userId] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface IMUserCntUpdateBuilder()
@property (strong) IMUserCntUpdate* resultImuserCntUpdate;
@end

@implementation IMUserCntUpdateBuilder
@synthesize resultImuserCntUpdate;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultImuserCntUpdate = [[IMUserCntUpdate alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultImuserCntUpdate;
}
- (IMUserCntUpdateBuilder*) clear {
  self.resultImuserCntUpdate = [[IMUserCntUpdate alloc] init];
  return self;
}
- (IMUserCntUpdateBuilder*) clone {
  return [IMUserCntUpdate builderWithPrototype:resultImuserCntUpdate];
}
- (IMUserCntUpdate*) defaultInstance {
  return [IMUserCntUpdate defaultInstance];
}
- (IMUserCntUpdate*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (IMUserCntUpdate*) buildPartial {
  IMUserCntUpdate* returnMe = resultImuserCntUpdate;
  self.resultImuserCntUpdate = nil;
  return returnMe;
}
- (IMUserCntUpdateBuilder*) mergeFrom:(IMUserCntUpdate*) other {
  if (other == [IMUserCntUpdate defaultInstance]) {
    return self;
  }
  if (other.hasUserAction) {
    [self setUserAction:other.userAction];
  }
  if (other.hasUserId) {
    [self setUserId:other.userId];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (IMUserCntUpdateBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (IMUserCntUpdateBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setUserAction:[input readUInt32]];
        break;
      }
      case 16: {
        [self setUserId:[input readUInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasUserAction {
  return resultImuserCntUpdate.hasUserAction;
}
- (UInt32) userAction {
  return resultImuserCntUpdate.userAction;
}
- (IMUserCntUpdateBuilder*) setUserAction:(UInt32) value {
  resultImuserCntUpdate.hasUserAction = YES;
  resultImuserCntUpdate.userAction = value;
  return self;
}
- (IMUserCntUpdateBuilder*) clearUserAction {
  resultImuserCntUpdate.hasUserAction = NO;
  resultImuserCntUpdate.userAction = 0;
  return self;
}
- (BOOL) hasUserId {
  return resultImuserCntUpdate.hasUserId;
}
- (UInt32) userId {
  return resultImuserCntUpdate.userId;
}
- (IMUserCntUpdateBuilder*) setUserId:(UInt32) value {
  resultImuserCntUpdate.hasUserId = YES;
  resultImuserCntUpdate.userId = value;
  return self;
}
- (IMUserCntUpdateBuilder*) clearUserId {
  resultImuserCntUpdate.hasUserId = NO;
  resultImuserCntUpdate.userId = 0;
  return self;
}
@end

@interface IMServerKickUser ()
@property UInt32 userId;
@property ClientType clientType;
@property UInt32 reason;
@end

@implementation IMServerKickUser

- (BOOL) hasUserId {
  return !!hasUserId_;
}
- (void) setHasUserId:(BOOL) _value_ {
  hasUserId_ = !!_value_;
}
@synthesize userId;
- (BOOL) hasClientType {
  return !!hasClientType_;
}
- (void) setHasClientType:(BOOL) _value_ {
  hasClientType_ = !!_value_;
}
@synthesize clientType;
- (BOOL) hasReason {
  return !!hasReason_;
}
- (void) setHasReason:(BOOL) _value_ {
  hasReason_ = !!_value_;
}
@synthesize reason;
- (instancetype) init {
  if ((self = [super init])) {
    self.userId = 0;
    self.clientType = ClientTypeClientTypeWindows;
    self.reason = 0;
  }
  return self;
}
static IMServerKickUser* defaultIMServerKickUserInstance = nil;
+ (void) initialize {
  if (self == [IMServerKickUser class]) {
    defaultIMServerKickUserInstance = [[IMServerKickUser alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultIMServerKickUserInstance;
}
- (instancetype) defaultInstance {
  return defaultIMServerKickUserInstance;
}
- (BOOL) isInitialized {
  if (!self.hasUserId) {
    return NO;
  }
  if (!self.hasClientType) {
    return NO;
  }
  if (!self.hasReason) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasUserId) {
    [output writeUInt32:1 value:self.userId];
  }
  if (self.hasClientType) {
    [output writeEnum:2 value:self.clientType];
  }
  if (self.hasReason) {
    [output writeUInt32:3 value:self.reason];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasUserId) {
    size_ += computeUInt32Size(1, self.userId);
  }
  if (self.hasClientType) {
    size_ += computeEnumSize(2, self.clientType);
  }
  if (self.hasReason) {
    size_ += computeUInt32Size(3, self.reason);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (IMServerKickUser*) parseFromData:(NSData*) data {
  return (IMServerKickUser*)[[[IMServerKickUser builder] mergeFromData:data] build];
}
+ (IMServerKickUser*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMServerKickUser*)[[[IMServerKickUser builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (IMServerKickUser*) parseFromInputStream:(NSInputStream*) input {
  return (IMServerKickUser*)[[[IMServerKickUser builder] mergeFromInputStream:input] build];
}
+ (IMServerKickUser*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMServerKickUser*)[[[IMServerKickUser builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (IMServerKickUser*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (IMServerKickUser*)[[[IMServerKickUser builder] mergeFromCodedInputStream:input] build];
}
+ (IMServerKickUser*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMServerKickUser*)[[[IMServerKickUser builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (IMServerKickUserBuilder*) builder {
  return [[IMServerKickUserBuilder alloc] init];
}
+ (IMServerKickUserBuilder*) builderWithPrototype:(IMServerKickUser*) prototype {
  return [[IMServerKickUser builder] mergeFrom:prototype];
}
- (IMServerKickUserBuilder*) builder {
  return [IMServerKickUser builder];
}
- (IMServerKickUserBuilder*) toBuilder {
  return [IMServerKickUser builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasUserId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"userId", [NSNumber numberWithInteger:self.userId]];
  }
  if (self.hasClientType) {
    [output appendFormat:@"%@%@: %@\n", indent, @"clientType", NSStringFromClientType(self.clientType)];
  }
  if (self.hasReason) {
    [output appendFormat:@"%@%@: %@\n", indent, @"reason", [NSNumber numberWithInteger:self.reason]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasUserId) {
    [dictionary setObject: [NSNumber numberWithInteger:self.userId] forKey: @"userId"];
  }
  if (self.hasClientType) {
    [dictionary setObject: @(self.clientType) forKey: @"clientType"];
  }
  if (self.hasReason) {
    [dictionary setObject: [NSNumber numberWithInteger:self.reason] forKey: @"reason"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[IMServerKickUser class]]) {
    return NO;
  }
  IMServerKickUser *otherMessage = other;
  return
      self.hasUserId == otherMessage.hasUserId &&
      (!self.hasUserId || self.userId == otherMessage.userId) &&
      self.hasClientType == otherMessage.hasClientType &&
      (!self.hasClientType || self.clientType == otherMessage.clientType) &&
      self.hasReason == otherMessage.hasReason &&
      (!self.hasReason || self.reason == otherMessage.reason) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasUserId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.userId] hash];
  }
  if (self.hasClientType) {
    hashCode = hashCode * 31 + self.clientType;
  }
  if (self.hasReason) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.reason] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface IMServerKickUserBuilder()
@property (strong) IMServerKickUser* resultImserverKickUser;
@end

@implementation IMServerKickUserBuilder
@synthesize resultImserverKickUser;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultImserverKickUser = [[IMServerKickUser alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultImserverKickUser;
}
- (IMServerKickUserBuilder*) clear {
  self.resultImserverKickUser = [[IMServerKickUser alloc] init];
  return self;
}
- (IMServerKickUserBuilder*) clone {
  return [IMServerKickUser builderWithPrototype:resultImserverKickUser];
}
- (IMServerKickUser*) defaultInstance {
  return [IMServerKickUser defaultInstance];
}
- (IMServerKickUser*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (IMServerKickUser*) buildPartial {
  IMServerKickUser* returnMe = resultImserverKickUser;
  self.resultImserverKickUser = nil;
  return returnMe;
}
- (IMServerKickUserBuilder*) mergeFrom:(IMServerKickUser*) other {
  if (other == [IMServerKickUser defaultInstance]) {
    return self;
  }
  if (other.hasUserId) {
    [self setUserId:other.userId];
  }
  if (other.hasClientType) {
    [self setClientType:other.clientType];
  }
  if (other.hasReason) {
    [self setReason:other.reason];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (IMServerKickUserBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (IMServerKickUserBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setUserId:[input readUInt32]];
        break;
      }
      case 16: {
        ClientType value = (ClientType)[input readEnum];
        if (ClientTypeIsValidValue(value)) {
          [self setClientType:value];
        } else {
          [unknownFields mergeVarintField:2 value:value];
        }
        break;
      }
      case 24: {
        [self setReason:[input readUInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasUserId {
  return resultImserverKickUser.hasUserId;
}
- (UInt32) userId {
  return resultImserverKickUser.userId;
}
- (IMServerKickUserBuilder*) setUserId:(UInt32) value {
  resultImserverKickUser.hasUserId = YES;
  resultImserverKickUser.userId = value;
  return self;
}
- (IMServerKickUserBuilder*) clearUserId {
  resultImserverKickUser.hasUserId = NO;
  resultImserverKickUser.userId = 0;
  return self;
}
- (BOOL) hasClientType {
  return resultImserverKickUser.hasClientType;
}
- (ClientType) clientType {
  return resultImserverKickUser.clientType;
}
- (IMServerKickUserBuilder*) setClientType:(ClientType) value {
  resultImserverKickUser.hasClientType = YES;
  resultImserverKickUser.clientType = value;
  return self;
}
- (IMServerKickUserBuilder*) clearClientType {
  resultImserverKickUser.hasClientType = NO;
  resultImserverKickUser.clientType = ClientTypeClientTypeWindows;
  return self;
}
- (BOOL) hasReason {
  return resultImserverKickUser.hasReason;
}
- (UInt32) reason {
  return resultImserverKickUser.reason;
}
- (IMServerKickUserBuilder*) setReason:(UInt32) value {
  resultImserverKickUser.hasReason = YES;
  resultImserverKickUser.reason = value;
  return self;
}
- (IMServerKickUserBuilder*) clearReason {
  resultImserverKickUser.hasReason = NO;
  resultImserverKickUser.reason = 0;
  return self;
}
@end

@interface IMServerPCLoginStatusNotify ()
@property UInt32 userId;
@property UInt32 loginStatus;
@end

@implementation IMServerPCLoginStatusNotify

- (BOOL) hasUserId {
  return !!hasUserId_;
}
- (void) setHasUserId:(BOOL) _value_ {
  hasUserId_ = !!_value_;
}
@synthesize userId;
- (BOOL) hasLoginStatus {
  return !!hasLoginStatus_;
}
- (void) setHasLoginStatus:(BOOL) _value_ {
  hasLoginStatus_ = !!_value_;
}
@synthesize loginStatus;
- (instancetype) init {
  if ((self = [super init])) {
    self.userId = 0;
    self.loginStatus = 0;
  }
  return self;
}
static IMServerPCLoginStatusNotify* defaultIMServerPCLoginStatusNotifyInstance = nil;
+ (void) initialize {
  if (self == [IMServerPCLoginStatusNotify class]) {
    defaultIMServerPCLoginStatusNotifyInstance = [[IMServerPCLoginStatusNotify alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultIMServerPCLoginStatusNotifyInstance;
}
- (instancetype) defaultInstance {
  return defaultIMServerPCLoginStatusNotifyInstance;
}
- (BOOL) isInitialized {
  if (!self.hasUserId) {
    return NO;
  }
  if (!self.hasLoginStatus) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasUserId) {
    [output writeUInt32:1 value:self.userId];
  }
  if (self.hasLoginStatus) {
    [output writeUInt32:2 value:self.loginStatus];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasUserId) {
    size_ += computeUInt32Size(1, self.userId);
  }
  if (self.hasLoginStatus) {
    size_ += computeUInt32Size(2, self.loginStatus);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (IMServerPCLoginStatusNotify*) parseFromData:(NSData*) data {
  return (IMServerPCLoginStatusNotify*)[[[IMServerPCLoginStatusNotify builder] mergeFromData:data] build];
}
+ (IMServerPCLoginStatusNotify*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMServerPCLoginStatusNotify*)[[[IMServerPCLoginStatusNotify builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (IMServerPCLoginStatusNotify*) parseFromInputStream:(NSInputStream*) input {
  return (IMServerPCLoginStatusNotify*)[[[IMServerPCLoginStatusNotify builder] mergeFromInputStream:input] build];
}
+ (IMServerPCLoginStatusNotify*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMServerPCLoginStatusNotify*)[[[IMServerPCLoginStatusNotify builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (IMServerPCLoginStatusNotify*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (IMServerPCLoginStatusNotify*)[[[IMServerPCLoginStatusNotify builder] mergeFromCodedInputStream:input] build];
}
+ (IMServerPCLoginStatusNotify*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMServerPCLoginStatusNotify*)[[[IMServerPCLoginStatusNotify builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (IMServerPCLoginStatusNotifyBuilder*) builder {
  return [[IMServerPCLoginStatusNotifyBuilder alloc] init];
}
+ (IMServerPCLoginStatusNotifyBuilder*) builderWithPrototype:(IMServerPCLoginStatusNotify*) prototype {
  return [[IMServerPCLoginStatusNotify builder] mergeFrom:prototype];
}
- (IMServerPCLoginStatusNotifyBuilder*) builder {
  return [IMServerPCLoginStatusNotify builder];
}
- (IMServerPCLoginStatusNotifyBuilder*) toBuilder {
  return [IMServerPCLoginStatusNotify builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasUserId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"userId", [NSNumber numberWithInteger:self.userId]];
  }
  if (self.hasLoginStatus) {
    [output appendFormat:@"%@%@: %@\n", indent, @"loginStatus", [NSNumber numberWithInteger:self.loginStatus]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasUserId) {
    [dictionary setObject: [NSNumber numberWithInteger:self.userId] forKey: @"userId"];
  }
  if (self.hasLoginStatus) {
    [dictionary setObject: [NSNumber numberWithInteger:self.loginStatus] forKey: @"loginStatus"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[IMServerPCLoginStatusNotify class]]) {
    return NO;
  }
  IMServerPCLoginStatusNotify *otherMessage = other;
  return
      self.hasUserId == otherMessage.hasUserId &&
      (!self.hasUserId || self.userId == otherMessage.userId) &&
      self.hasLoginStatus == otherMessage.hasLoginStatus &&
      (!self.hasLoginStatus || self.loginStatus == otherMessage.loginStatus) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasUserId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.userId] hash];
  }
  if (self.hasLoginStatus) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.loginStatus] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface IMServerPCLoginStatusNotifyBuilder()
@property (strong) IMServerPCLoginStatusNotify* resultImserverPcloginStatusNotify;
@end

@implementation IMServerPCLoginStatusNotifyBuilder
@synthesize resultImserverPcloginStatusNotify;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultImserverPcloginStatusNotify = [[IMServerPCLoginStatusNotify alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultImserverPcloginStatusNotify;
}
- (IMServerPCLoginStatusNotifyBuilder*) clear {
  self.resultImserverPcloginStatusNotify = [[IMServerPCLoginStatusNotify alloc] init];
  return self;
}
- (IMServerPCLoginStatusNotifyBuilder*) clone {
  return [IMServerPCLoginStatusNotify builderWithPrototype:resultImserverPcloginStatusNotify];
}
- (IMServerPCLoginStatusNotify*) defaultInstance {
  return [IMServerPCLoginStatusNotify defaultInstance];
}
- (IMServerPCLoginStatusNotify*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (IMServerPCLoginStatusNotify*) buildPartial {
  IMServerPCLoginStatusNotify* returnMe = resultImserverPcloginStatusNotify;
  self.resultImserverPcloginStatusNotify = nil;
  return returnMe;
}
- (IMServerPCLoginStatusNotifyBuilder*) mergeFrom:(IMServerPCLoginStatusNotify*) other {
  if (other == [IMServerPCLoginStatusNotify defaultInstance]) {
    return self;
  }
  if (other.hasUserId) {
    [self setUserId:other.userId];
  }
  if (other.hasLoginStatus) {
    [self setLoginStatus:other.loginStatus];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (IMServerPCLoginStatusNotifyBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (IMServerPCLoginStatusNotifyBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setUserId:[input readUInt32]];
        break;
      }
      case 16: {
        [self setLoginStatus:[input readUInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasUserId {
  return resultImserverPcloginStatusNotify.hasUserId;
}
- (UInt32) userId {
  return resultImserverPcloginStatusNotify.userId;
}
- (IMServerPCLoginStatusNotifyBuilder*) setUserId:(UInt32) value {
  resultImserverPcloginStatusNotify.hasUserId = YES;
  resultImserverPcloginStatusNotify.userId = value;
  return self;
}
- (IMServerPCLoginStatusNotifyBuilder*) clearUserId {
  resultImserverPcloginStatusNotify.hasUserId = NO;
  resultImserverPcloginStatusNotify.userId = 0;
  return self;
}
- (BOOL) hasLoginStatus {
  return resultImserverPcloginStatusNotify.hasLoginStatus;
}
- (UInt32) loginStatus {
  return resultImserverPcloginStatusNotify.loginStatus;
}
- (IMServerPCLoginStatusNotifyBuilder*) setLoginStatus:(UInt32) value {
  resultImserverPcloginStatusNotify.hasLoginStatus = YES;
  resultImserverPcloginStatusNotify.loginStatus = value;
  return self;
}
- (IMServerPCLoginStatusNotifyBuilder*) clearLoginStatus {
  resultImserverPcloginStatusNotify.hasLoginStatus = NO;
  resultImserverPcloginStatusNotify.loginStatus = 0;
  return self;
}
@end

@interface IMPushToUserReq ()
@property (strong) NSString* flash;
@property (strong) NSString* data;
@property (strong) NSMutableArray * userTokenListArray;
@end

@implementation IMPushToUserReq

- (BOOL) hasFlash {
  return !!hasFlash_;
}
- (void) setHasFlash:(BOOL) _value_ {
  hasFlash_ = !!_value_;
}
@synthesize flash;
- (BOOL) hasData {
  return !!hasData_;
}
- (void) setHasData:(BOOL) _value_ {
  hasData_ = !!_value_;
}
@synthesize data;
@synthesize userTokenListArray;
@dynamic userTokenList;
- (instancetype) init {
  if ((self = [super init])) {
    self.flash = @"";
    self.data = @"";
  }
  return self;
}
static IMPushToUserReq* defaultIMPushToUserReqInstance = nil;
+ (void) initialize {
  if (self == [IMPushToUserReq class]) {
    defaultIMPushToUserReqInstance = [[IMPushToUserReq alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultIMPushToUserReqInstance;
}
- (instancetype) defaultInstance {
  return defaultIMPushToUserReqInstance;
}
- (NSArray *)userTokenList {
  return userTokenListArray;
}
- (UserTokenInfo*)userTokenListAtIndex:(NSUInteger)index {
  return [userTokenListArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  if (!self.hasFlash) {
    return NO;
  }
  if (!self.hasData) {
    return NO;
  }
  __block BOOL isInituserTokenList = YES;
   [self.userTokenList enumerateObjectsUsingBlock:^(UserTokenInfo *element, NSUInteger idx, BOOL *stop) {
    if (!element.isInitialized) {
      isInituserTokenList = NO;
      *stop = YES;
    }
  }];
  if (!isInituserTokenList) return isInituserTokenList;
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasFlash) {
    [output writeString:1 value:self.flash];
  }
  if (self.hasData) {
    [output writeString:2 value:self.data];
  }
  [self.userTokenListArray enumerateObjectsUsingBlock:^(UserTokenInfo *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:3 value:element];
  }];
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasFlash) {
    size_ += computeStringSize(1, self.flash);
  }
  if (self.hasData) {
    size_ += computeStringSize(2, self.data);
  }
  [self.userTokenListArray enumerateObjectsUsingBlock:^(UserTokenInfo *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(3, element);
  }];
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (IMPushToUserReq*) parseFromData:(NSData*) data {
  return (IMPushToUserReq*)[[[IMPushToUserReq builder] mergeFromData:data] build];
}
+ (IMPushToUserReq*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMPushToUserReq*)[[[IMPushToUserReq builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (IMPushToUserReq*) parseFromInputStream:(NSInputStream*) input {
  return (IMPushToUserReq*)[[[IMPushToUserReq builder] mergeFromInputStream:input] build];
}
+ (IMPushToUserReq*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMPushToUserReq*)[[[IMPushToUserReq builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (IMPushToUserReq*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (IMPushToUserReq*)[[[IMPushToUserReq builder] mergeFromCodedInputStream:input] build];
}
+ (IMPushToUserReq*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMPushToUserReq*)[[[IMPushToUserReq builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (IMPushToUserReqBuilder*) builder {
  return [[IMPushToUserReqBuilder alloc] init];
}
+ (IMPushToUserReqBuilder*) builderWithPrototype:(IMPushToUserReq*) prototype {
  return [[IMPushToUserReq builder] mergeFrom:prototype];
}
- (IMPushToUserReqBuilder*) builder {
  return [IMPushToUserReq builder];
}
- (IMPushToUserReqBuilder*) toBuilder {
  return [IMPushToUserReq builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasFlash) {
    [output appendFormat:@"%@%@: %@\n", indent, @"flash", self.flash];
  }
  if (self.hasData) {
    [output appendFormat:@"%@%@: %@\n", indent, @"data", self.data];
  }
  [self.userTokenListArray enumerateObjectsUsingBlock:^(UserTokenInfo *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"userTokenList"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasFlash) {
    [dictionary setObject: self.flash forKey: @"flash"];
  }
  if (self.hasData) {
    [dictionary setObject: self.data forKey: @"data"];
  }
  for (UserTokenInfo* element in self.userTokenListArray) {
    NSMutableDictionary *elementDictionary = [NSMutableDictionary dictionary];
    [element storeInDictionary:elementDictionary];
    [dictionary setObject:[NSDictionary dictionaryWithDictionary:elementDictionary] forKey:@"userTokenList"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[IMPushToUserReq class]]) {
    return NO;
  }
  IMPushToUserReq *otherMessage = other;
  return
      self.hasFlash == otherMessage.hasFlash &&
      (!self.hasFlash || [self.flash isEqual:otherMessage.flash]) &&
      self.hasData == otherMessage.hasData &&
      (!self.hasData || [self.data isEqual:otherMessage.data]) &&
      [self.userTokenListArray isEqualToArray:otherMessage.userTokenListArray] &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasFlash) {
    hashCode = hashCode * 31 + [self.flash hash];
  }
  if (self.hasData) {
    hashCode = hashCode * 31 + [self.data hash];
  }
  [self.userTokenListArray enumerateObjectsUsingBlock:^(UserTokenInfo *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface IMPushToUserReqBuilder()
@property (strong) IMPushToUserReq* resultImpushToUserReq;
@end

@implementation IMPushToUserReqBuilder
@synthesize resultImpushToUserReq;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultImpushToUserReq = [[IMPushToUserReq alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultImpushToUserReq;
}
- (IMPushToUserReqBuilder*) clear {
  self.resultImpushToUserReq = [[IMPushToUserReq alloc] init];
  return self;
}
- (IMPushToUserReqBuilder*) clone {
  return [IMPushToUserReq builderWithPrototype:resultImpushToUserReq];
}
- (IMPushToUserReq*) defaultInstance {
  return [IMPushToUserReq defaultInstance];
}
- (IMPushToUserReq*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (IMPushToUserReq*) buildPartial {
  IMPushToUserReq* returnMe = resultImpushToUserReq;
  self.resultImpushToUserReq = nil;
  return returnMe;
}
- (IMPushToUserReqBuilder*) mergeFrom:(IMPushToUserReq*) other {
  if (other == [IMPushToUserReq defaultInstance]) {
    return self;
  }
  if (other.hasFlash) {
    [self setFlash:other.flash];
  }
  if (other.hasData) {
    [self setData:other.data];
  }
  if (other.userTokenListArray.count > 0) {
    if (resultImpushToUserReq.userTokenListArray == nil) {
      resultImpushToUserReq.userTokenListArray = [[NSMutableArray alloc] initWithArray:other.userTokenListArray];
    } else {
      [resultImpushToUserReq.userTokenListArray addObjectsFromArray:other.userTokenListArray];
    }
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (IMPushToUserReqBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (IMPushToUserReqBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setFlash:[input readString]];
        break;
      }
      case 18: {
        [self setData:[input readString]];
        break;
      }
      case 26: {
        UserTokenInfoBuilder* subBuilder = [UserTokenInfo builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addUserTokenList:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (BOOL) hasFlash {
  return resultImpushToUserReq.hasFlash;
}
- (NSString*) flash {
  return resultImpushToUserReq.flash;
}
- (IMPushToUserReqBuilder*) setFlash:(NSString*) value {
  resultImpushToUserReq.hasFlash = YES;
  resultImpushToUserReq.flash = value;
  return self;
}
- (IMPushToUserReqBuilder*) clearFlash {
  resultImpushToUserReq.hasFlash = NO;
  resultImpushToUserReq.flash = @"";
  return self;
}
- (BOOL) hasData {
  return resultImpushToUserReq.hasData;
}
- (NSString*) data {
  return resultImpushToUserReq.data;
}
- (IMPushToUserReqBuilder*) setData:(NSString*) value {
  resultImpushToUserReq.hasData = YES;
  resultImpushToUserReq.data = value;
  return self;
}
- (IMPushToUserReqBuilder*) clearData {
  resultImpushToUserReq.hasData = NO;
  resultImpushToUserReq.data = @"";
  return self;
}
- (NSMutableArray *)userTokenList {
  return resultImpushToUserReq.userTokenListArray;
}
- (UserTokenInfo*)userTokenListAtIndex:(NSUInteger)index {
  return [resultImpushToUserReq userTokenListAtIndex:index];
}
- (IMPushToUserReqBuilder *)addUserTokenList:(UserTokenInfo*)value {
  if (resultImpushToUserReq.userTokenListArray == nil) {
    resultImpushToUserReq.userTokenListArray = [[NSMutableArray alloc]init];
  }
  [resultImpushToUserReq.userTokenListArray addObject:value];
  return self;
}
- (IMPushToUserReqBuilder *)setUserTokenListArray:(NSArray *)array {
  resultImpushToUserReq.userTokenListArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (IMPushToUserReqBuilder *)clearUserTokenList {
  resultImpushToUserReq.userTokenListArray = nil;
  return self;
}
@end

@interface IMPushToUserRsp ()
@property (strong) NSMutableArray * pushResultListArray;
@end

@implementation IMPushToUserRsp

@synthesize pushResultListArray;
@dynamic pushResultList;
- (instancetype) init {
  if ((self = [super init])) {
  }
  return self;
}
static IMPushToUserRsp* defaultIMPushToUserRspInstance = nil;
+ (void) initialize {
  if (self == [IMPushToUserRsp class]) {
    defaultIMPushToUserRspInstance = [[IMPushToUserRsp alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultIMPushToUserRspInstance;
}
- (instancetype) defaultInstance {
  return defaultIMPushToUserRspInstance;
}
- (NSArray *)pushResultList {
  return pushResultListArray;
}
- (PushResult*)pushResultListAtIndex:(NSUInteger)index {
  return [pushResultListArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  __block BOOL isInitpushResultList = YES;
   [self.pushResultList enumerateObjectsUsingBlock:^(PushResult *element, NSUInteger idx, BOOL *stop) {
    if (!element.isInitialized) {
      isInitpushResultList = NO;
      *stop = YES;
    }
  }];
  if (!isInitpushResultList) return isInitpushResultList;
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  [self.pushResultListArray enumerateObjectsUsingBlock:^(PushResult *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:1 value:element];
  }];
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  [self.pushResultListArray enumerateObjectsUsingBlock:^(PushResult *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(1, element);
  }];
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (IMPushToUserRsp*) parseFromData:(NSData*) data {
  return (IMPushToUserRsp*)[[[IMPushToUserRsp builder] mergeFromData:data] build];
}
+ (IMPushToUserRsp*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMPushToUserRsp*)[[[IMPushToUserRsp builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (IMPushToUserRsp*) parseFromInputStream:(NSInputStream*) input {
  return (IMPushToUserRsp*)[[[IMPushToUserRsp builder] mergeFromInputStream:input] build];
}
+ (IMPushToUserRsp*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMPushToUserRsp*)[[[IMPushToUserRsp builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (IMPushToUserRsp*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (IMPushToUserRsp*)[[[IMPushToUserRsp builder] mergeFromCodedInputStream:input] build];
}
+ (IMPushToUserRsp*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMPushToUserRsp*)[[[IMPushToUserRsp builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (IMPushToUserRspBuilder*) builder {
  return [[IMPushToUserRspBuilder alloc] init];
}
+ (IMPushToUserRspBuilder*) builderWithPrototype:(IMPushToUserRsp*) prototype {
  return [[IMPushToUserRsp builder] mergeFrom:prototype];
}
- (IMPushToUserRspBuilder*) builder {
  return [IMPushToUserRsp builder];
}
- (IMPushToUserRspBuilder*) toBuilder {
  return [IMPushToUserRsp builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  [self.pushResultListArray enumerateObjectsUsingBlock:^(PushResult *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"pushResultList"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  for (PushResult* element in self.pushResultListArray) {
    NSMutableDictionary *elementDictionary = [NSMutableDictionary dictionary];
    [element storeInDictionary:elementDictionary];
    [dictionary setObject:[NSDictionary dictionaryWithDictionary:elementDictionary] forKey:@"pushResultList"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[IMPushToUserRsp class]]) {
    return NO;
  }
  IMPushToUserRsp *otherMessage = other;
  return
      [self.pushResultListArray isEqualToArray:otherMessage.pushResultListArray] &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  [self.pushResultListArray enumerateObjectsUsingBlock:^(PushResult *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface IMPushToUserRspBuilder()
@property (strong) IMPushToUserRsp* resultImpushToUserRsp;
@end

@implementation IMPushToUserRspBuilder
@synthesize resultImpushToUserRsp;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultImpushToUserRsp = [[IMPushToUserRsp alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultImpushToUserRsp;
}
- (IMPushToUserRspBuilder*) clear {
  self.resultImpushToUserRsp = [[IMPushToUserRsp alloc] init];
  return self;
}
- (IMPushToUserRspBuilder*) clone {
  return [IMPushToUserRsp builderWithPrototype:resultImpushToUserRsp];
}
- (IMPushToUserRsp*) defaultInstance {
  return [IMPushToUserRsp defaultInstance];
}
- (IMPushToUserRsp*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (IMPushToUserRsp*) buildPartial {
  IMPushToUserRsp* returnMe = resultImpushToUserRsp;
  self.resultImpushToUserRsp = nil;
  return returnMe;
}
- (IMPushToUserRspBuilder*) mergeFrom:(IMPushToUserRsp*) other {
  if (other == [IMPushToUserRsp defaultInstance]) {
    return self;
  }
  if (other.pushResultListArray.count > 0) {
    if (resultImpushToUserRsp.pushResultListArray == nil) {
      resultImpushToUserRsp.pushResultListArray = [[NSMutableArray alloc] initWithArray:other.pushResultListArray];
    } else {
      [resultImpushToUserRsp.pushResultListArray addObjectsFromArray:other.pushResultListArray];
    }
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (IMPushToUserRspBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (IMPushToUserRspBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        PushResultBuilder* subBuilder = [PushResult builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addPushResultList:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (NSMutableArray *)pushResultList {
  return resultImpushToUserRsp.pushResultListArray;
}
- (PushResult*)pushResultListAtIndex:(NSUInteger)index {
  return [resultImpushToUserRsp pushResultListAtIndex:index];
}
- (IMPushToUserRspBuilder *)addPushResultList:(PushResult*)value {
  if (resultImpushToUserRsp.pushResultListArray == nil) {
    resultImpushToUserRsp.pushResultListArray = [[NSMutableArray alloc]init];
  }
  [resultImpushToUserRsp.pushResultListArray addObject:value];
  return self;
}
- (IMPushToUserRspBuilder *)setPushResultListArray:(NSArray *)array {
  resultImpushToUserRsp.pushResultListArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (IMPushToUserRspBuilder *)clearPushResultList {
  resultImpushToUserRsp.pushResultListArray = nil;
  return self;
}
@end

@interface IMGroupGetShieldReq ()
@property UInt32 groupId;
@property (strong) PBAppendableArray * userIdArray;
@property (strong) NSData* attachData;
@end

@implementation IMGroupGetShieldReq

- (BOOL) hasGroupId {
  return !!hasGroupId_;
}
- (void) setHasGroupId:(BOOL) _value_ {
  hasGroupId_ = !!_value_;
}
@synthesize groupId;
@synthesize userIdArray;
@dynamic userId;
- (BOOL) hasAttachData {
  return !!hasAttachData_;
}
- (void) setHasAttachData:(BOOL) _value_ {
  hasAttachData_ = !!_value_;
}
@synthesize attachData;
- (instancetype) init {
  if ((self = [super init])) {
    self.groupId = 0;
    self.attachData = [NSData data];
  }
  return self;
}
static IMGroupGetShieldReq* defaultIMGroupGetShieldReqInstance = nil;
+ (void) initialize {
  if (self == [IMGroupGetShieldReq class]) {
    defaultIMGroupGetShieldReqInstance = [[IMGroupGetShieldReq alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultIMGroupGetShieldReqInstance;
}
- (instancetype) defaultInstance {
  return defaultIMGroupGetShieldReqInstance;
}
- (PBArray *)userId {
  return userIdArray;
}
- (UInt32)userIdAtIndex:(NSUInteger)index {
  return [userIdArray uint32AtIndex:index];
}
- (BOOL) isInitialized {
  if (!self.hasGroupId) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasGroupId) {
    [output writeUInt32:1 value:self.groupId];
  }
  const NSUInteger userIdArrayCount = self.userIdArray.count;
  if (userIdArrayCount > 0) {
    const UInt32 *values = (const UInt32 *)self.userIdArray.data;
    for (NSUInteger i = 0; i < userIdArrayCount; ++i) {
      [output writeUInt32:2 value:values[i]];
    }
  }
  if (self.hasAttachData) {
    [output writeData:20 value:self.attachData];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasGroupId) {
    size_ += computeUInt32Size(1, self.groupId);
  }
  {
    __block SInt32 dataSize = 0;
    const NSUInteger count = self.userIdArray.count;
    const UInt32 *values = (const UInt32 *)self.userIdArray.data;
    for (NSUInteger i = 0; i < count; ++i) {
      dataSize += computeUInt32SizeNoTag(values[i]);
    }
    size_ += dataSize;
    size_ += (SInt32)(1 * count);
  }
  if (self.hasAttachData) {
    size_ += computeDataSize(20, self.attachData);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (IMGroupGetShieldReq*) parseFromData:(NSData*) data {
  return (IMGroupGetShieldReq*)[[[IMGroupGetShieldReq builder] mergeFromData:data] build];
}
+ (IMGroupGetShieldReq*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMGroupGetShieldReq*)[[[IMGroupGetShieldReq builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (IMGroupGetShieldReq*) parseFromInputStream:(NSInputStream*) input {
  return (IMGroupGetShieldReq*)[[[IMGroupGetShieldReq builder] mergeFromInputStream:input] build];
}
+ (IMGroupGetShieldReq*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMGroupGetShieldReq*)[[[IMGroupGetShieldReq builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (IMGroupGetShieldReq*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (IMGroupGetShieldReq*)[[[IMGroupGetShieldReq builder] mergeFromCodedInputStream:input] build];
}
+ (IMGroupGetShieldReq*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMGroupGetShieldReq*)[[[IMGroupGetShieldReq builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (IMGroupGetShieldReqBuilder*) builder {
  return [[IMGroupGetShieldReqBuilder alloc] init];
}
+ (IMGroupGetShieldReqBuilder*) builderWithPrototype:(IMGroupGetShieldReq*) prototype {
  return [[IMGroupGetShieldReq builder] mergeFrom:prototype];
}
- (IMGroupGetShieldReqBuilder*) builder {
  return [IMGroupGetShieldReq builder];
}
- (IMGroupGetShieldReqBuilder*) toBuilder {
  return [IMGroupGetShieldReq builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasGroupId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"groupId", [NSNumber numberWithInteger:self.groupId]];
  }
  [self.userIdArray enumerateObjectsUsingBlock:^(id obj, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@: %@\n", indent, @"userId", obj];
  }];
  if (self.hasAttachData) {
    [output appendFormat:@"%@%@: %@\n", indent, @"attachData", self.attachData];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasGroupId) {
    [dictionary setObject: [NSNumber numberWithInteger:self.groupId] forKey: @"groupId"];
  }
  NSMutableArray * userIdArrayArray = [NSMutableArray new];
  NSUInteger userIdArrayCount=self.userIdArray.count;
  for(int i=0;i<userIdArrayCount;i++){
    [userIdArrayArray addObject: @([self.userIdArray uint32AtIndex:i])];
  }
  [dictionary setObject: userIdArrayArray forKey: @"userId"];
  if (self.hasAttachData) {
    [dictionary setObject: self.attachData forKey: @"attachData"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[IMGroupGetShieldReq class]]) {
    return NO;
  }
  IMGroupGetShieldReq *otherMessage = other;
  return
      self.hasGroupId == otherMessage.hasGroupId &&
      (!self.hasGroupId || self.groupId == otherMessage.groupId) &&
      [self.userIdArray isEqualToArray:otherMessage.userIdArray] &&
      self.hasAttachData == otherMessage.hasAttachData &&
      (!self.hasAttachData || [self.attachData isEqual:otherMessage.attachData]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasGroupId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.groupId] hash];
  }
  [self.userIdArray enumerateObjectsUsingBlock:^(NSNumber *obj, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [obj longValue];
  }];
  if (self.hasAttachData) {
    hashCode = hashCode * 31 + [self.attachData hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface IMGroupGetShieldReqBuilder()
@property (strong) IMGroupGetShieldReq* resultImgroupGetShieldReq;
@end

@implementation IMGroupGetShieldReqBuilder
@synthesize resultImgroupGetShieldReq;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultImgroupGetShieldReq = [[IMGroupGetShieldReq alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultImgroupGetShieldReq;
}
- (IMGroupGetShieldReqBuilder*) clear {
  self.resultImgroupGetShieldReq = [[IMGroupGetShieldReq alloc] init];
  return self;
}
- (IMGroupGetShieldReqBuilder*) clone {
  return [IMGroupGetShieldReq builderWithPrototype:resultImgroupGetShieldReq];
}
- (IMGroupGetShieldReq*) defaultInstance {
  return [IMGroupGetShieldReq defaultInstance];
}
- (IMGroupGetShieldReq*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (IMGroupGetShieldReq*) buildPartial {
  IMGroupGetShieldReq* returnMe = resultImgroupGetShieldReq;
  self.resultImgroupGetShieldReq = nil;
  return returnMe;
}
- (IMGroupGetShieldReqBuilder*) mergeFrom:(IMGroupGetShieldReq*) other {
  if (other == [IMGroupGetShieldReq defaultInstance]) {
    return self;
  }
  if (other.hasGroupId) {
    [self setGroupId:other.groupId];
  }
  if (other.userIdArray.count > 0) {
    if (resultImgroupGetShieldReq.userIdArray == nil) {
      resultImgroupGetShieldReq.userIdArray = [other.userIdArray copy];
    } else {
      [resultImgroupGetShieldReq.userIdArray appendArray:other.userIdArray];
    }
  }
  if (other.hasAttachData) {
    [self setAttachData:other.attachData];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (IMGroupGetShieldReqBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (IMGroupGetShieldReqBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setGroupId:[input readUInt32]];
        break;
      }
      case 16: {
        [self addUserId:[input readUInt32]];
        break;
      }
      case 162: {
        [self setAttachData:[input readData]];
        break;
      }
    }
  }
}
- (BOOL) hasGroupId {
  return resultImgroupGetShieldReq.hasGroupId;
}
- (UInt32) groupId {
  return resultImgroupGetShieldReq.groupId;
}
- (IMGroupGetShieldReqBuilder*) setGroupId:(UInt32) value {
  resultImgroupGetShieldReq.hasGroupId = YES;
  resultImgroupGetShieldReq.groupId = value;
  return self;
}
- (IMGroupGetShieldReqBuilder*) clearGroupId {
  resultImgroupGetShieldReq.hasGroupId = NO;
  resultImgroupGetShieldReq.groupId = 0;
  return self;
}
- (PBAppendableArray *)userId {
  return resultImgroupGetShieldReq.userIdArray;
}
- (UInt32)userIdAtIndex:(NSUInteger)index {
  return [resultImgroupGetShieldReq userIdAtIndex:index];
}
- (IMGroupGetShieldReqBuilder *)addUserId:(UInt32)value {
  if (resultImgroupGetShieldReq.userIdArray == nil) {
    resultImgroupGetShieldReq.userIdArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeUInt32];
  }
  [resultImgroupGetShieldReq.userIdArray addUint32:value];
  return self;
}
- (IMGroupGetShieldReqBuilder *)setUserIdArray:(NSArray *)array {
  resultImgroupGetShieldReq.userIdArray = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeUInt32];
  return self;
}
- (IMGroupGetShieldReqBuilder *)setUserIdValues:(const UInt32 *)values count:(NSUInteger)count {
  resultImgroupGetShieldReq.userIdArray = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeUInt32];
  return self;
}
- (IMGroupGetShieldReqBuilder *)clearUserId {
  resultImgroupGetShieldReq.userIdArray = nil;
  return self;
}
- (BOOL) hasAttachData {
  return resultImgroupGetShieldReq.hasAttachData;
}
- (NSData*) attachData {
  return resultImgroupGetShieldReq.attachData;
}
- (IMGroupGetShieldReqBuilder*) setAttachData:(NSData*) value {
  resultImgroupGetShieldReq.hasAttachData = YES;
  resultImgroupGetShieldReq.attachData = value;
  return self;
}
- (IMGroupGetShieldReqBuilder*) clearAttachData {
  resultImgroupGetShieldReq.hasAttachData = NO;
  resultImgroupGetShieldReq.attachData = [NSData data];
  return self;
}
@end

@interface IMGroupGetShieldRsp ()
@property UInt32 groupId;
@property (strong) NSMutableArray * shieldStatusListArray;
@property (strong) NSData* attachData;
@end

@implementation IMGroupGetShieldRsp

- (BOOL) hasGroupId {
  return !!hasGroupId_;
}
- (void) setHasGroupId:(BOOL) _value_ {
  hasGroupId_ = !!_value_;
}
@synthesize groupId;
@synthesize shieldStatusListArray;
@dynamic shieldStatusList;
- (BOOL) hasAttachData {
  return !!hasAttachData_;
}
- (void) setHasAttachData:(BOOL) _value_ {
  hasAttachData_ = !!_value_;
}
@synthesize attachData;
- (instancetype) init {
  if ((self = [super init])) {
    self.groupId = 0;
    self.attachData = [NSData data];
  }
  return self;
}
static IMGroupGetShieldRsp* defaultIMGroupGetShieldRspInstance = nil;
+ (void) initialize {
  if (self == [IMGroupGetShieldRsp class]) {
    defaultIMGroupGetShieldRspInstance = [[IMGroupGetShieldRsp alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultIMGroupGetShieldRspInstance;
}
- (instancetype) defaultInstance {
  return defaultIMGroupGetShieldRspInstance;
}
- (NSArray *)shieldStatusList {
  return shieldStatusListArray;
}
- (ShieldStatus*)shieldStatusListAtIndex:(NSUInteger)index {
  return [shieldStatusListArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  if (!self.hasGroupId) {
    return NO;
  }
  __block BOOL isInitshieldStatusList = YES;
   [self.shieldStatusList enumerateObjectsUsingBlock:^(ShieldStatus *element, NSUInteger idx, BOOL *stop) {
    if (!element.isInitialized) {
      isInitshieldStatusList = NO;
      *stop = YES;
    }
  }];
  if (!isInitshieldStatusList) return isInitshieldStatusList;
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasGroupId) {
    [output writeUInt32:1 value:self.groupId];
  }
  [self.shieldStatusListArray enumerateObjectsUsingBlock:^(ShieldStatus *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:2 value:element];
  }];
  if (self.hasAttachData) {
    [output writeData:20 value:self.attachData];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasGroupId) {
    size_ += computeUInt32Size(1, self.groupId);
  }
  [self.shieldStatusListArray enumerateObjectsUsingBlock:^(ShieldStatus *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(2, element);
  }];
  if (self.hasAttachData) {
    size_ += computeDataSize(20, self.attachData);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (IMGroupGetShieldRsp*) parseFromData:(NSData*) data {
  return (IMGroupGetShieldRsp*)[[[IMGroupGetShieldRsp builder] mergeFromData:data] build];
}
+ (IMGroupGetShieldRsp*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMGroupGetShieldRsp*)[[[IMGroupGetShieldRsp builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (IMGroupGetShieldRsp*) parseFromInputStream:(NSInputStream*) input {
  return (IMGroupGetShieldRsp*)[[[IMGroupGetShieldRsp builder] mergeFromInputStream:input] build];
}
+ (IMGroupGetShieldRsp*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMGroupGetShieldRsp*)[[[IMGroupGetShieldRsp builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (IMGroupGetShieldRsp*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (IMGroupGetShieldRsp*)[[[IMGroupGetShieldRsp builder] mergeFromCodedInputStream:input] build];
}
+ (IMGroupGetShieldRsp*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMGroupGetShieldRsp*)[[[IMGroupGetShieldRsp builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (IMGroupGetShieldRspBuilder*) builder {
  return [[IMGroupGetShieldRspBuilder alloc] init];
}
+ (IMGroupGetShieldRspBuilder*) builderWithPrototype:(IMGroupGetShieldRsp*) prototype {
  return [[IMGroupGetShieldRsp builder] mergeFrom:prototype];
}
- (IMGroupGetShieldRspBuilder*) builder {
  return [IMGroupGetShieldRsp builder];
}
- (IMGroupGetShieldRspBuilder*) toBuilder {
  return [IMGroupGetShieldRsp builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasGroupId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"groupId", [NSNumber numberWithInteger:self.groupId]];
  }
  [self.shieldStatusListArray enumerateObjectsUsingBlock:^(ShieldStatus *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"shieldStatusList"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  if (self.hasAttachData) {
    [output appendFormat:@"%@%@: %@\n", indent, @"attachData", self.attachData];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasGroupId) {
    [dictionary setObject: [NSNumber numberWithInteger:self.groupId] forKey: @"groupId"];
  }
  for (ShieldStatus* element in self.shieldStatusListArray) {
    NSMutableDictionary *elementDictionary = [NSMutableDictionary dictionary];
    [element storeInDictionary:elementDictionary];
    [dictionary setObject:[NSDictionary dictionaryWithDictionary:elementDictionary] forKey:@"shieldStatusList"];
  }
  if (self.hasAttachData) {
    [dictionary setObject: self.attachData forKey: @"attachData"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[IMGroupGetShieldRsp class]]) {
    return NO;
  }
  IMGroupGetShieldRsp *otherMessage = other;
  return
      self.hasGroupId == otherMessage.hasGroupId &&
      (!self.hasGroupId || self.groupId == otherMessage.groupId) &&
      [self.shieldStatusListArray isEqualToArray:otherMessage.shieldStatusListArray] &&
      self.hasAttachData == otherMessage.hasAttachData &&
      (!self.hasAttachData || [self.attachData isEqual:otherMessage.attachData]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasGroupId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.groupId] hash];
  }
  [self.shieldStatusListArray enumerateObjectsUsingBlock:^(ShieldStatus *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  if (self.hasAttachData) {
    hashCode = hashCode * 31 + [self.attachData hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface IMGroupGetShieldRspBuilder()
@property (strong) IMGroupGetShieldRsp* resultImgroupGetShieldRsp;
@end

@implementation IMGroupGetShieldRspBuilder
@synthesize resultImgroupGetShieldRsp;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultImgroupGetShieldRsp = [[IMGroupGetShieldRsp alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultImgroupGetShieldRsp;
}
- (IMGroupGetShieldRspBuilder*) clear {
  self.resultImgroupGetShieldRsp = [[IMGroupGetShieldRsp alloc] init];
  return self;
}
- (IMGroupGetShieldRspBuilder*) clone {
  return [IMGroupGetShieldRsp builderWithPrototype:resultImgroupGetShieldRsp];
}
- (IMGroupGetShieldRsp*) defaultInstance {
  return [IMGroupGetShieldRsp defaultInstance];
}
- (IMGroupGetShieldRsp*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (IMGroupGetShieldRsp*) buildPartial {
  IMGroupGetShieldRsp* returnMe = resultImgroupGetShieldRsp;
  self.resultImgroupGetShieldRsp = nil;
  return returnMe;
}
- (IMGroupGetShieldRspBuilder*) mergeFrom:(IMGroupGetShieldRsp*) other {
  if (other == [IMGroupGetShieldRsp defaultInstance]) {
    return self;
  }
  if (other.hasGroupId) {
    [self setGroupId:other.groupId];
  }
  if (other.shieldStatusListArray.count > 0) {
    if (resultImgroupGetShieldRsp.shieldStatusListArray == nil) {
      resultImgroupGetShieldRsp.shieldStatusListArray = [[NSMutableArray alloc] initWithArray:other.shieldStatusListArray];
    } else {
      [resultImgroupGetShieldRsp.shieldStatusListArray addObjectsFromArray:other.shieldStatusListArray];
    }
  }
  if (other.hasAttachData) {
    [self setAttachData:other.attachData];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (IMGroupGetShieldRspBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (IMGroupGetShieldRspBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setGroupId:[input readUInt32]];
        break;
      }
      case 18: {
        ShieldStatusBuilder* subBuilder = [ShieldStatus builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addShieldStatusList:[subBuilder buildPartial]];
        break;
      }
      case 162: {
        [self setAttachData:[input readData]];
        break;
      }
    }
  }
}
- (BOOL) hasGroupId {
  return resultImgroupGetShieldRsp.hasGroupId;
}
- (UInt32) groupId {
  return resultImgroupGetShieldRsp.groupId;
}
- (IMGroupGetShieldRspBuilder*) setGroupId:(UInt32) value {
  resultImgroupGetShieldRsp.hasGroupId = YES;
  resultImgroupGetShieldRsp.groupId = value;
  return self;
}
- (IMGroupGetShieldRspBuilder*) clearGroupId {
  resultImgroupGetShieldRsp.hasGroupId = NO;
  resultImgroupGetShieldRsp.groupId = 0;
  return self;
}
- (NSMutableArray *)shieldStatusList {
  return resultImgroupGetShieldRsp.shieldStatusListArray;
}
- (ShieldStatus*)shieldStatusListAtIndex:(NSUInteger)index {
  return [resultImgroupGetShieldRsp shieldStatusListAtIndex:index];
}
- (IMGroupGetShieldRspBuilder *)addShieldStatusList:(ShieldStatus*)value {
  if (resultImgroupGetShieldRsp.shieldStatusListArray == nil) {
    resultImgroupGetShieldRsp.shieldStatusListArray = [[NSMutableArray alloc]init];
  }
  [resultImgroupGetShieldRsp.shieldStatusListArray addObject:value];
  return self;
}
- (IMGroupGetShieldRspBuilder *)setShieldStatusListArray:(NSArray *)array {
  resultImgroupGetShieldRsp.shieldStatusListArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (IMGroupGetShieldRspBuilder *)clearShieldStatusList {
  resultImgroupGetShieldRsp.shieldStatusListArray = nil;
  return self;
}
- (BOOL) hasAttachData {
  return resultImgroupGetShieldRsp.hasAttachData;
}
- (NSData*) attachData {
  return resultImgroupGetShieldRsp.attachData;
}
- (IMGroupGetShieldRspBuilder*) setAttachData:(NSData*) value {
  resultImgroupGetShieldRsp.hasAttachData = YES;
  resultImgroupGetShieldRsp.attachData = value;
  return self;
}
- (IMGroupGetShieldRspBuilder*) clearAttachData {
  resultImgroupGetShieldRsp.hasAttachData = NO;
  resultImgroupGetShieldRsp.attachData = [NSData data];
  return self;
}
@end

@interface IMFileTransferReq ()
@property UInt32 fromUserId;
@property UInt32 toUserId;
@property (strong) NSString* fileName;
@property UInt32 fileSize;
@property TransferFileType transMode;
@property (strong) NSData* attachData;
@end

@implementation IMFileTransferReq

- (BOOL) hasFromUserId {
  return !!hasFromUserId_;
}
- (void) setHasFromUserId:(BOOL) _value_ {
  hasFromUserId_ = !!_value_;
}
@synthesize fromUserId;
- (BOOL) hasToUserId {
  return !!hasToUserId_;
}
- (void) setHasToUserId:(BOOL) _value_ {
  hasToUserId_ = !!_value_;
}
@synthesize toUserId;
- (BOOL) hasFileName {
  return !!hasFileName_;
}
- (void) setHasFileName:(BOOL) _value_ {
  hasFileName_ = !!_value_;
}
@synthesize fileName;
- (BOOL) hasFileSize {
  return !!hasFileSize_;
}
- (void) setHasFileSize:(BOOL) _value_ {
  hasFileSize_ = !!_value_;
}
@synthesize fileSize;
- (BOOL) hasTransMode {
  return !!hasTransMode_;
}
- (void) setHasTransMode:(BOOL) _value_ {
  hasTransMode_ = !!_value_;
}
@synthesize transMode;
- (BOOL) hasAttachData {
  return !!hasAttachData_;
}
- (void) setHasAttachData:(BOOL) _value_ {
  hasAttachData_ = !!_value_;
}
@synthesize attachData;
- (instancetype) init {
  if ((self = [super init])) {
    self.fromUserId = 0;
    self.toUserId = 0;
    self.fileName = @"";
    self.fileSize = 0;
    self.transMode = TransferFileTypeFileTypeOnline;
    self.attachData = [NSData data];
  }
  return self;
}
static IMFileTransferReq* defaultIMFileTransferReqInstance = nil;
+ (void) initialize {
  if (self == [IMFileTransferReq class]) {
    defaultIMFileTransferReqInstance = [[IMFileTransferReq alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultIMFileTransferReqInstance;
}
- (instancetype) defaultInstance {
  return defaultIMFileTransferReqInstance;
}
- (BOOL) isInitialized {
  if (!self.hasFromUserId) {
    return NO;
  }
  if (!self.hasToUserId) {
    return NO;
  }
  if (!self.hasFileName) {
    return NO;
  }
  if (!self.hasFileSize) {
    return NO;
  }
  if (!self.hasTransMode) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasFromUserId) {
    [output writeUInt32:1 value:self.fromUserId];
  }
  if (self.hasToUserId) {
    [output writeUInt32:2 value:self.toUserId];
  }
  if (self.hasFileName) {
    [output writeString:3 value:self.fileName];
  }
  if (self.hasFileSize) {
    [output writeUInt32:4 value:self.fileSize];
  }
  if (self.hasTransMode) {
    [output writeEnum:5 value:self.transMode];
  }
  if (self.hasAttachData) {
    [output writeData:20 value:self.attachData];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasFromUserId) {
    size_ += computeUInt32Size(1, self.fromUserId);
  }
  if (self.hasToUserId) {
    size_ += computeUInt32Size(2, self.toUserId);
  }
  if (self.hasFileName) {
    size_ += computeStringSize(3, self.fileName);
  }
  if (self.hasFileSize) {
    size_ += computeUInt32Size(4, self.fileSize);
  }
  if (self.hasTransMode) {
    size_ += computeEnumSize(5, self.transMode);
  }
  if (self.hasAttachData) {
    size_ += computeDataSize(20, self.attachData);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (IMFileTransferReq*) parseFromData:(NSData*) data {
  return (IMFileTransferReq*)[[[IMFileTransferReq builder] mergeFromData:data] build];
}
+ (IMFileTransferReq*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMFileTransferReq*)[[[IMFileTransferReq builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (IMFileTransferReq*) parseFromInputStream:(NSInputStream*) input {
  return (IMFileTransferReq*)[[[IMFileTransferReq builder] mergeFromInputStream:input] build];
}
+ (IMFileTransferReq*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMFileTransferReq*)[[[IMFileTransferReq builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (IMFileTransferReq*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (IMFileTransferReq*)[[[IMFileTransferReq builder] mergeFromCodedInputStream:input] build];
}
+ (IMFileTransferReq*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMFileTransferReq*)[[[IMFileTransferReq builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (IMFileTransferReqBuilder*) builder {
  return [[IMFileTransferReqBuilder alloc] init];
}
+ (IMFileTransferReqBuilder*) builderWithPrototype:(IMFileTransferReq*) prototype {
  return [[IMFileTransferReq builder] mergeFrom:prototype];
}
- (IMFileTransferReqBuilder*) builder {
  return [IMFileTransferReq builder];
}
- (IMFileTransferReqBuilder*) toBuilder {
  return [IMFileTransferReq builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasFromUserId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"fromUserId", [NSNumber numberWithInteger:self.fromUserId]];
  }
  if (self.hasToUserId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"toUserId", [NSNumber numberWithInteger:self.toUserId]];
  }
  if (self.hasFileName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"fileName", self.fileName];
  }
  if (self.hasFileSize) {
    [output appendFormat:@"%@%@: %@\n", indent, @"fileSize", [NSNumber numberWithInteger:self.fileSize]];
  }
  if (self.hasTransMode) {
    [output appendFormat:@"%@%@: %@\n", indent, @"transMode", NSStringFromTransferFileType(self.transMode)];
  }
  if (self.hasAttachData) {
    [output appendFormat:@"%@%@: %@\n", indent, @"attachData", self.attachData];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasFromUserId) {
    [dictionary setObject: [NSNumber numberWithInteger:self.fromUserId] forKey: @"fromUserId"];
  }
  if (self.hasToUserId) {
    [dictionary setObject: [NSNumber numberWithInteger:self.toUserId] forKey: @"toUserId"];
  }
  if (self.hasFileName) {
    [dictionary setObject: self.fileName forKey: @"fileName"];
  }
  if (self.hasFileSize) {
    [dictionary setObject: [NSNumber numberWithInteger:self.fileSize] forKey: @"fileSize"];
  }
  if (self.hasTransMode) {
    [dictionary setObject: @(self.transMode) forKey: @"transMode"];
  }
  if (self.hasAttachData) {
    [dictionary setObject: self.attachData forKey: @"attachData"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[IMFileTransferReq class]]) {
    return NO;
  }
  IMFileTransferReq *otherMessage = other;
  return
      self.hasFromUserId == otherMessage.hasFromUserId &&
      (!self.hasFromUserId || self.fromUserId == otherMessage.fromUserId) &&
      self.hasToUserId == otherMessage.hasToUserId &&
      (!self.hasToUserId || self.toUserId == otherMessage.toUserId) &&
      self.hasFileName == otherMessage.hasFileName &&
      (!self.hasFileName || [self.fileName isEqual:otherMessage.fileName]) &&
      self.hasFileSize == otherMessage.hasFileSize &&
      (!self.hasFileSize || self.fileSize == otherMessage.fileSize) &&
      self.hasTransMode == otherMessage.hasTransMode &&
      (!self.hasTransMode || self.transMode == otherMessage.transMode) &&
      self.hasAttachData == otherMessage.hasAttachData &&
      (!self.hasAttachData || [self.attachData isEqual:otherMessage.attachData]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasFromUserId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.fromUserId] hash];
  }
  if (self.hasToUserId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.toUserId] hash];
  }
  if (self.hasFileName) {
    hashCode = hashCode * 31 + [self.fileName hash];
  }
  if (self.hasFileSize) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.fileSize] hash];
  }
  if (self.hasTransMode) {
    hashCode = hashCode * 31 + self.transMode;
  }
  if (self.hasAttachData) {
    hashCode = hashCode * 31 + [self.attachData hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface IMFileTransferReqBuilder()
@property (strong) IMFileTransferReq* resultImfileTransferReq;
@end

@implementation IMFileTransferReqBuilder
@synthesize resultImfileTransferReq;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultImfileTransferReq = [[IMFileTransferReq alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultImfileTransferReq;
}
- (IMFileTransferReqBuilder*) clear {
  self.resultImfileTransferReq = [[IMFileTransferReq alloc] init];
  return self;
}
- (IMFileTransferReqBuilder*) clone {
  return [IMFileTransferReq builderWithPrototype:resultImfileTransferReq];
}
- (IMFileTransferReq*) defaultInstance {
  return [IMFileTransferReq defaultInstance];
}
- (IMFileTransferReq*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (IMFileTransferReq*) buildPartial {
  IMFileTransferReq* returnMe = resultImfileTransferReq;
  self.resultImfileTransferReq = nil;
  return returnMe;
}
- (IMFileTransferReqBuilder*) mergeFrom:(IMFileTransferReq*) other {
  if (other == [IMFileTransferReq defaultInstance]) {
    return self;
  }
  if (other.hasFromUserId) {
    [self setFromUserId:other.fromUserId];
  }
  if (other.hasToUserId) {
    [self setToUserId:other.toUserId];
  }
  if (other.hasFileName) {
    [self setFileName:other.fileName];
  }
  if (other.hasFileSize) {
    [self setFileSize:other.fileSize];
  }
  if (other.hasTransMode) {
    [self setTransMode:other.transMode];
  }
  if (other.hasAttachData) {
    [self setAttachData:other.attachData];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (IMFileTransferReqBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (IMFileTransferReqBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setFromUserId:[input readUInt32]];
        break;
      }
      case 16: {
        [self setToUserId:[input readUInt32]];
        break;
      }
      case 26: {
        [self setFileName:[input readString]];
        break;
      }
      case 32: {
        [self setFileSize:[input readUInt32]];
        break;
      }
      case 40: {
        TransferFileType value = (TransferFileType)[input readEnum];
        if (TransferFileTypeIsValidValue(value)) {
          [self setTransMode:value];
        } else {
          [unknownFields mergeVarintField:5 value:value];
        }
        break;
      }
      case 162: {
        [self setAttachData:[input readData]];
        break;
      }
    }
  }
}
- (BOOL) hasFromUserId {
  return resultImfileTransferReq.hasFromUserId;
}
- (UInt32) fromUserId {
  return resultImfileTransferReq.fromUserId;
}
- (IMFileTransferReqBuilder*) setFromUserId:(UInt32) value {
  resultImfileTransferReq.hasFromUserId = YES;
  resultImfileTransferReq.fromUserId = value;
  return self;
}
- (IMFileTransferReqBuilder*) clearFromUserId {
  resultImfileTransferReq.hasFromUserId = NO;
  resultImfileTransferReq.fromUserId = 0;
  return self;
}
- (BOOL) hasToUserId {
  return resultImfileTransferReq.hasToUserId;
}
- (UInt32) toUserId {
  return resultImfileTransferReq.toUserId;
}
- (IMFileTransferReqBuilder*) setToUserId:(UInt32) value {
  resultImfileTransferReq.hasToUserId = YES;
  resultImfileTransferReq.toUserId = value;
  return self;
}
- (IMFileTransferReqBuilder*) clearToUserId {
  resultImfileTransferReq.hasToUserId = NO;
  resultImfileTransferReq.toUserId = 0;
  return self;
}
- (BOOL) hasFileName {
  return resultImfileTransferReq.hasFileName;
}
- (NSString*) fileName {
  return resultImfileTransferReq.fileName;
}
- (IMFileTransferReqBuilder*) setFileName:(NSString*) value {
  resultImfileTransferReq.hasFileName = YES;
  resultImfileTransferReq.fileName = value;
  return self;
}
- (IMFileTransferReqBuilder*) clearFileName {
  resultImfileTransferReq.hasFileName = NO;
  resultImfileTransferReq.fileName = @"";
  return self;
}
- (BOOL) hasFileSize {
  return resultImfileTransferReq.hasFileSize;
}
- (UInt32) fileSize {
  return resultImfileTransferReq.fileSize;
}
- (IMFileTransferReqBuilder*) setFileSize:(UInt32) value {
  resultImfileTransferReq.hasFileSize = YES;
  resultImfileTransferReq.fileSize = value;
  return self;
}
- (IMFileTransferReqBuilder*) clearFileSize {
  resultImfileTransferReq.hasFileSize = NO;
  resultImfileTransferReq.fileSize = 0;
  return self;
}
- (BOOL) hasTransMode {
  return resultImfileTransferReq.hasTransMode;
}
- (TransferFileType) transMode {
  return resultImfileTransferReq.transMode;
}
- (IMFileTransferReqBuilder*) setTransMode:(TransferFileType) value {
  resultImfileTransferReq.hasTransMode = YES;
  resultImfileTransferReq.transMode = value;
  return self;
}
- (IMFileTransferReqBuilder*) clearTransMode {
  resultImfileTransferReq.hasTransMode = NO;
  resultImfileTransferReq.transMode = TransferFileTypeFileTypeOnline;
  return self;
}
- (BOOL) hasAttachData {
  return resultImfileTransferReq.hasAttachData;
}
- (NSData*) attachData {
  return resultImfileTransferReq.attachData;
}
- (IMFileTransferReqBuilder*) setAttachData:(NSData*) value {
  resultImfileTransferReq.hasAttachData = YES;
  resultImfileTransferReq.attachData = value;
  return self;
}
- (IMFileTransferReqBuilder*) clearAttachData {
  resultImfileTransferReq.hasAttachData = NO;
  resultImfileTransferReq.attachData = [NSData data];
  return self;
}
@end

@interface IMFileTransferRsp ()
@property UInt32 resultCode;
@property UInt32 fromUserId;
@property UInt32 toUserId;
@property (strong) NSString* fileName;
@property UInt32 fileSize;
@property (strong) NSString* taskId;
@property TransferFileType transMode;
@property (strong) NSData* attachData;
@end

@implementation IMFileTransferRsp

- (BOOL) hasResultCode {
  return !!hasResultCode_;
}
- (void) setHasResultCode:(BOOL) _value_ {
  hasResultCode_ = !!_value_;
}
@synthesize resultCode;
- (BOOL) hasFromUserId {
  return !!hasFromUserId_;
}
- (void) setHasFromUserId:(BOOL) _value_ {
  hasFromUserId_ = !!_value_;
}
@synthesize fromUserId;
- (BOOL) hasToUserId {
  return !!hasToUserId_;
}
- (void) setHasToUserId:(BOOL) _value_ {
  hasToUserId_ = !!_value_;
}
@synthesize toUserId;
- (BOOL) hasFileName {
  return !!hasFileName_;
}
- (void) setHasFileName:(BOOL) _value_ {
  hasFileName_ = !!_value_;
}
@synthesize fileName;
- (BOOL) hasFileSize {
  return !!hasFileSize_;
}
- (void) setHasFileSize:(BOOL) _value_ {
  hasFileSize_ = !!_value_;
}
@synthesize fileSize;
- (BOOL) hasTaskId {
  return !!hasTaskId_;
}
- (void) setHasTaskId:(BOOL) _value_ {
  hasTaskId_ = !!_value_;
}
@synthesize taskId;
- (BOOL) hasTransMode {
  return !!hasTransMode_;
}
- (void) setHasTransMode:(BOOL) _value_ {
  hasTransMode_ = !!_value_;
}
@synthesize transMode;
- (BOOL) hasAttachData {
  return !!hasAttachData_;
}
- (void) setHasAttachData:(BOOL) _value_ {
  hasAttachData_ = !!_value_;
}
@synthesize attachData;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultCode = 0;
    self.fromUserId = 0;
    self.toUserId = 0;
    self.fileName = @"";
    self.fileSize = 0;
    self.taskId = @"";
    self.transMode = TransferFileTypeFileTypeOnline;
    self.attachData = [NSData data];
  }
  return self;
}
static IMFileTransferRsp* defaultIMFileTransferRspInstance = nil;
+ (void) initialize {
  if (self == [IMFileTransferRsp class]) {
    defaultIMFileTransferRspInstance = [[IMFileTransferRsp alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultIMFileTransferRspInstance;
}
- (instancetype) defaultInstance {
  return defaultIMFileTransferRspInstance;
}
- (BOOL) isInitialized {
  if (!self.hasResultCode) {
    return NO;
  }
  if (!self.hasFromUserId) {
    return NO;
  }
  if (!self.hasToUserId) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasResultCode) {
    [output writeUInt32:1 value:self.resultCode];
  }
  if (self.hasFromUserId) {
    [output writeUInt32:2 value:self.fromUserId];
  }
  if (self.hasToUserId) {
    [output writeUInt32:3 value:self.toUserId];
  }
  if (self.hasFileName) {
    [output writeString:4 value:self.fileName];
  }
  if (self.hasFileSize) {
    [output writeUInt32:5 value:self.fileSize];
  }
  if (self.hasTaskId) {
    [output writeString:6 value:self.taskId];
  }
  if (self.hasTransMode) {
    [output writeEnum:7 value:self.transMode];
  }
  if (self.hasAttachData) {
    [output writeData:20 value:self.attachData];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasResultCode) {
    size_ += computeUInt32Size(1, self.resultCode);
  }
  if (self.hasFromUserId) {
    size_ += computeUInt32Size(2, self.fromUserId);
  }
  if (self.hasToUserId) {
    size_ += computeUInt32Size(3, self.toUserId);
  }
  if (self.hasFileName) {
    size_ += computeStringSize(4, self.fileName);
  }
  if (self.hasFileSize) {
    size_ += computeUInt32Size(5, self.fileSize);
  }
  if (self.hasTaskId) {
    size_ += computeStringSize(6, self.taskId);
  }
  if (self.hasTransMode) {
    size_ += computeEnumSize(7, self.transMode);
  }
  if (self.hasAttachData) {
    size_ += computeDataSize(20, self.attachData);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (IMFileTransferRsp*) parseFromData:(NSData*) data {
  return (IMFileTransferRsp*)[[[IMFileTransferRsp builder] mergeFromData:data] build];
}
+ (IMFileTransferRsp*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMFileTransferRsp*)[[[IMFileTransferRsp builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (IMFileTransferRsp*) parseFromInputStream:(NSInputStream*) input {
  return (IMFileTransferRsp*)[[[IMFileTransferRsp builder] mergeFromInputStream:input] build];
}
+ (IMFileTransferRsp*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMFileTransferRsp*)[[[IMFileTransferRsp builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (IMFileTransferRsp*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (IMFileTransferRsp*)[[[IMFileTransferRsp builder] mergeFromCodedInputStream:input] build];
}
+ (IMFileTransferRsp*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMFileTransferRsp*)[[[IMFileTransferRsp builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (IMFileTransferRspBuilder*) builder {
  return [[IMFileTransferRspBuilder alloc] init];
}
+ (IMFileTransferRspBuilder*) builderWithPrototype:(IMFileTransferRsp*) prototype {
  return [[IMFileTransferRsp builder] mergeFrom:prototype];
}
- (IMFileTransferRspBuilder*) builder {
  return [IMFileTransferRsp builder];
}
- (IMFileTransferRspBuilder*) toBuilder {
  return [IMFileTransferRsp builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasResultCode) {
    [output appendFormat:@"%@%@: %@\n", indent, @"resultCode", [NSNumber numberWithInteger:self.resultCode]];
  }
  if (self.hasFromUserId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"fromUserId", [NSNumber numberWithInteger:self.fromUserId]];
  }
  if (self.hasToUserId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"toUserId", [NSNumber numberWithInteger:self.toUserId]];
  }
  if (self.hasFileName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"fileName", self.fileName];
  }
  if (self.hasFileSize) {
    [output appendFormat:@"%@%@: %@\n", indent, @"fileSize", [NSNumber numberWithInteger:self.fileSize]];
  }
  if (self.hasTaskId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"taskId", self.taskId];
  }
  if (self.hasTransMode) {
    [output appendFormat:@"%@%@: %@\n", indent, @"transMode", NSStringFromTransferFileType(self.transMode)];
  }
  if (self.hasAttachData) {
    [output appendFormat:@"%@%@: %@\n", indent, @"attachData", self.attachData];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasResultCode) {
    [dictionary setObject: [NSNumber numberWithInteger:self.resultCode] forKey: @"resultCode"];
  }
  if (self.hasFromUserId) {
    [dictionary setObject: [NSNumber numberWithInteger:self.fromUserId] forKey: @"fromUserId"];
  }
  if (self.hasToUserId) {
    [dictionary setObject: [NSNumber numberWithInteger:self.toUserId] forKey: @"toUserId"];
  }
  if (self.hasFileName) {
    [dictionary setObject: self.fileName forKey: @"fileName"];
  }
  if (self.hasFileSize) {
    [dictionary setObject: [NSNumber numberWithInteger:self.fileSize] forKey: @"fileSize"];
  }
  if (self.hasTaskId) {
    [dictionary setObject: self.taskId forKey: @"taskId"];
  }
  if (self.hasTransMode) {
    [dictionary setObject: @(self.transMode) forKey: @"transMode"];
  }
  if (self.hasAttachData) {
    [dictionary setObject: self.attachData forKey: @"attachData"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[IMFileTransferRsp class]]) {
    return NO;
  }
  IMFileTransferRsp *otherMessage = other;
  return
      self.hasResultCode == otherMessage.hasResultCode &&
      (!self.hasResultCode || self.resultCode == otherMessage.resultCode) &&
      self.hasFromUserId == otherMessage.hasFromUserId &&
      (!self.hasFromUserId || self.fromUserId == otherMessage.fromUserId) &&
      self.hasToUserId == otherMessage.hasToUserId &&
      (!self.hasToUserId || self.toUserId == otherMessage.toUserId) &&
      self.hasFileName == otherMessage.hasFileName &&
      (!self.hasFileName || [self.fileName isEqual:otherMessage.fileName]) &&
      self.hasFileSize == otherMessage.hasFileSize &&
      (!self.hasFileSize || self.fileSize == otherMessage.fileSize) &&
      self.hasTaskId == otherMessage.hasTaskId &&
      (!self.hasTaskId || [self.taskId isEqual:otherMessage.taskId]) &&
      self.hasTransMode == otherMessage.hasTransMode &&
      (!self.hasTransMode || self.transMode == otherMessage.transMode) &&
      self.hasAttachData == otherMessage.hasAttachData &&
      (!self.hasAttachData || [self.attachData isEqual:otherMessage.attachData]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasResultCode) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.resultCode] hash];
  }
  if (self.hasFromUserId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.fromUserId] hash];
  }
  if (self.hasToUserId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.toUserId] hash];
  }
  if (self.hasFileName) {
    hashCode = hashCode * 31 + [self.fileName hash];
  }
  if (self.hasFileSize) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.fileSize] hash];
  }
  if (self.hasTaskId) {
    hashCode = hashCode * 31 + [self.taskId hash];
  }
  if (self.hasTransMode) {
    hashCode = hashCode * 31 + self.transMode;
  }
  if (self.hasAttachData) {
    hashCode = hashCode * 31 + [self.attachData hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface IMFileTransferRspBuilder()
@property (strong) IMFileTransferRsp* resultImfileTransferRsp;
@end

@implementation IMFileTransferRspBuilder
@synthesize resultImfileTransferRsp;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultImfileTransferRsp = [[IMFileTransferRsp alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultImfileTransferRsp;
}
- (IMFileTransferRspBuilder*) clear {
  self.resultImfileTransferRsp = [[IMFileTransferRsp alloc] init];
  return self;
}
- (IMFileTransferRspBuilder*) clone {
  return [IMFileTransferRsp builderWithPrototype:resultImfileTransferRsp];
}
- (IMFileTransferRsp*) defaultInstance {
  return [IMFileTransferRsp defaultInstance];
}
- (IMFileTransferRsp*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (IMFileTransferRsp*) buildPartial {
  IMFileTransferRsp* returnMe = resultImfileTransferRsp;
  self.resultImfileTransferRsp = nil;
  return returnMe;
}
- (IMFileTransferRspBuilder*) mergeFrom:(IMFileTransferRsp*) other {
  if (other == [IMFileTransferRsp defaultInstance]) {
    return self;
  }
  if (other.hasResultCode) {
    [self setResultCode:other.resultCode];
  }
  if (other.hasFromUserId) {
    [self setFromUserId:other.fromUserId];
  }
  if (other.hasToUserId) {
    [self setToUserId:other.toUserId];
  }
  if (other.hasFileName) {
    [self setFileName:other.fileName];
  }
  if (other.hasFileSize) {
    [self setFileSize:other.fileSize];
  }
  if (other.hasTaskId) {
    [self setTaskId:other.taskId];
  }
  if (other.hasTransMode) {
    [self setTransMode:other.transMode];
  }
  if (other.hasAttachData) {
    [self setAttachData:other.attachData];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (IMFileTransferRspBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (IMFileTransferRspBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setResultCode:[input readUInt32]];
        break;
      }
      case 16: {
        [self setFromUserId:[input readUInt32]];
        break;
      }
      case 24: {
        [self setToUserId:[input readUInt32]];
        break;
      }
      case 34: {
        [self setFileName:[input readString]];
        break;
      }
      case 40: {
        [self setFileSize:[input readUInt32]];
        break;
      }
      case 50: {
        [self setTaskId:[input readString]];
        break;
      }
      case 56: {
        TransferFileType value = (TransferFileType)[input readEnum];
        if (TransferFileTypeIsValidValue(value)) {
          [self setTransMode:value];
        } else {
          [unknownFields mergeVarintField:7 value:value];
        }
        break;
      }
      case 162: {
        [self setAttachData:[input readData]];
        break;
      }
    }
  }
}
- (BOOL) hasResultCode {
  return resultImfileTransferRsp.hasResultCode;
}
- (UInt32) resultCode {
  return resultImfileTransferRsp.resultCode;
}
- (IMFileTransferRspBuilder*) setResultCode:(UInt32) value {
  resultImfileTransferRsp.hasResultCode = YES;
  resultImfileTransferRsp.resultCode = value;
  return self;
}
- (IMFileTransferRspBuilder*) clearResultCode {
  resultImfileTransferRsp.hasResultCode = NO;
  resultImfileTransferRsp.resultCode = 0;
  return self;
}
- (BOOL) hasFromUserId {
  return resultImfileTransferRsp.hasFromUserId;
}
- (UInt32) fromUserId {
  return resultImfileTransferRsp.fromUserId;
}
- (IMFileTransferRspBuilder*) setFromUserId:(UInt32) value {
  resultImfileTransferRsp.hasFromUserId = YES;
  resultImfileTransferRsp.fromUserId = value;
  return self;
}
- (IMFileTransferRspBuilder*) clearFromUserId {
  resultImfileTransferRsp.hasFromUserId = NO;
  resultImfileTransferRsp.fromUserId = 0;
  return self;
}
- (BOOL) hasToUserId {
  return resultImfileTransferRsp.hasToUserId;
}
- (UInt32) toUserId {
  return resultImfileTransferRsp.toUserId;
}
- (IMFileTransferRspBuilder*) setToUserId:(UInt32) value {
  resultImfileTransferRsp.hasToUserId = YES;
  resultImfileTransferRsp.toUserId = value;
  return self;
}
- (IMFileTransferRspBuilder*) clearToUserId {
  resultImfileTransferRsp.hasToUserId = NO;
  resultImfileTransferRsp.toUserId = 0;
  return self;
}
- (BOOL) hasFileName {
  return resultImfileTransferRsp.hasFileName;
}
- (NSString*) fileName {
  return resultImfileTransferRsp.fileName;
}
- (IMFileTransferRspBuilder*) setFileName:(NSString*) value {
  resultImfileTransferRsp.hasFileName = YES;
  resultImfileTransferRsp.fileName = value;
  return self;
}
- (IMFileTransferRspBuilder*) clearFileName {
  resultImfileTransferRsp.hasFileName = NO;
  resultImfileTransferRsp.fileName = @"";
  return self;
}
- (BOOL) hasFileSize {
  return resultImfileTransferRsp.hasFileSize;
}
- (UInt32) fileSize {
  return resultImfileTransferRsp.fileSize;
}
- (IMFileTransferRspBuilder*) setFileSize:(UInt32) value {
  resultImfileTransferRsp.hasFileSize = YES;
  resultImfileTransferRsp.fileSize = value;
  return self;
}
- (IMFileTransferRspBuilder*) clearFileSize {
  resultImfileTransferRsp.hasFileSize = NO;
  resultImfileTransferRsp.fileSize = 0;
  return self;
}
- (BOOL) hasTaskId {
  return resultImfileTransferRsp.hasTaskId;
}
- (NSString*) taskId {
  return resultImfileTransferRsp.taskId;
}
- (IMFileTransferRspBuilder*) setTaskId:(NSString*) value {
  resultImfileTransferRsp.hasTaskId = YES;
  resultImfileTransferRsp.taskId = value;
  return self;
}
- (IMFileTransferRspBuilder*) clearTaskId {
  resultImfileTransferRsp.hasTaskId = NO;
  resultImfileTransferRsp.taskId = @"";
  return self;
}
- (BOOL) hasTransMode {
  return resultImfileTransferRsp.hasTransMode;
}
- (TransferFileType) transMode {
  return resultImfileTransferRsp.transMode;
}
- (IMFileTransferRspBuilder*) setTransMode:(TransferFileType) value {
  resultImfileTransferRsp.hasTransMode = YES;
  resultImfileTransferRsp.transMode = value;
  return self;
}
- (IMFileTransferRspBuilder*) clearTransMode {
  resultImfileTransferRsp.hasTransMode = NO;
  resultImfileTransferRsp.transMode = TransferFileTypeFileTypeOnline;
  return self;
}
- (BOOL) hasAttachData {
  return resultImfileTransferRsp.hasAttachData;
}
- (NSData*) attachData {
  return resultImfileTransferRsp.attachData;
}
- (IMFileTransferRspBuilder*) setAttachData:(NSData*) value {
  resultImfileTransferRsp.hasAttachData = YES;
  resultImfileTransferRsp.attachData = value;
  return self;
}
- (IMFileTransferRspBuilder*) clearAttachData {
  resultImfileTransferRsp.hasAttachData = NO;
  resultImfileTransferRsp.attachData = [NSData data];
  return self;
}
@end

@interface IMFileServerIPReq ()
@end

@implementation IMFileServerIPReq

- (instancetype) init {
  if ((self = [super init])) {
  }
  return self;
}
static IMFileServerIPReq* defaultIMFileServerIPReqInstance = nil;
+ (void) initialize {
  if (self == [IMFileServerIPReq class]) {
    defaultIMFileServerIPReqInstance = [[IMFileServerIPReq alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultIMFileServerIPReqInstance;
}
- (instancetype) defaultInstance {
  return defaultIMFileServerIPReqInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (IMFileServerIPReq*) parseFromData:(NSData*) data {
  return (IMFileServerIPReq*)[[[IMFileServerIPReq builder] mergeFromData:data] build];
}
+ (IMFileServerIPReq*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMFileServerIPReq*)[[[IMFileServerIPReq builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (IMFileServerIPReq*) parseFromInputStream:(NSInputStream*) input {
  return (IMFileServerIPReq*)[[[IMFileServerIPReq builder] mergeFromInputStream:input] build];
}
+ (IMFileServerIPReq*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMFileServerIPReq*)[[[IMFileServerIPReq builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (IMFileServerIPReq*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (IMFileServerIPReq*)[[[IMFileServerIPReq builder] mergeFromCodedInputStream:input] build];
}
+ (IMFileServerIPReq*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMFileServerIPReq*)[[[IMFileServerIPReq builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (IMFileServerIPReqBuilder*) builder {
  return [[IMFileServerIPReqBuilder alloc] init];
}
+ (IMFileServerIPReqBuilder*) builderWithPrototype:(IMFileServerIPReq*) prototype {
  return [[IMFileServerIPReq builder] mergeFrom:prototype];
}
- (IMFileServerIPReqBuilder*) builder {
  return [IMFileServerIPReq builder];
}
- (IMFileServerIPReqBuilder*) toBuilder {
  return [IMFileServerIPReq builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[IMFileServerIPReq class]]) {
    return NO;
  }
  IMFileServerIPReq *otherMessage = other;
  return
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface IMFileServerIPReqBuilder()
@property (strong) IMFileServerIPReq* resultImfileServerIpreq;
@end

@implementation IMFileServerIPReqBuilder
@synthesize resultImfileServerIpreq;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultImfileServerIpreq = [[IMFileServerIPReq alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultImfileServerIpreq;
}
- (IMFileServerIPReqBuilder*) clear {
  self.resultImfileServerIpreq = [[IMFileServerIPReq alloc] init];
  return self;
}
- (IMFileServerIPReqBuilder*) clone {
  return [IMFileServerIPReq builderWithPrototype:resultImfileServerIpreq];
}
- (IMFileServerIPReq*) defaultInstance {
  return [IMFileServerIPReq defaultInstance];
}
- (IMFileServerIPReq*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (IMFileServerIPReq*) buildPartial {
  IMFileServerIPReq* returnMe = resultImfileServerIpreq;
  self.resultImfileServerIpreq = nil;
  return returnMe;
}
- (IMFileServerIPReqBuilder*) mergeFrom:(IMFileServerIPReq*) other {
  if (other == [IMFileServerIPReq defaultInstance]) {
    return self;
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (IMFileServerIPReqBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (IMFileServerIPReqBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
    }
  }
}
@end

@interface IMFileServerIPRsp ()
@property (strong) NSMutableArray * ipAddrListArray;
@end

@implementation IMFileServerIPRsp

@synthesize ipAddrListArray;
@dynamic ipAddrList;
- (instancetype) init {
  if ((self = [super init])) {
  }
  return self;
}
static IMFileServerIPRsp* defaultIMFileServerIPRspInstance = nil;
+ (void) initialize {
  if (self == [IMFileServerIPRsp class]) {
    defaultIMFileServerIPRspInstance = [[IMFileServerIPRsp alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultIMFileServerIPRspInstance;
}
- (instancetype) defaultInstance {
  return defaultIMFileServerIPRspInstance;
}
- (NSArray *)ipAddrList {
  return ipAddrListArray;
}
- (IpAddr*)ipAddrListAtIndex:(NSUInteger)index {
  return [ipAddrListArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  __block BOOL isInitipAddrList = YES;
   [self.ipAddrList enumerateObjectsUsingBlock:^(IpAddr *element, NSUInteger idx, BOOL *stop) {
    if (!element.isInitialized) {
      isInitipAddrList = NO;
      *stop = YES;
    }
  }];
  if (!isInitipAddrList) return isInitipAddrList;
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  [self.ipAddrListArray enumerateObjectsUsingBlock:^(IpAddr *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:1 value:element];
  }];
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  [self.ipAddrListArray enumerateObjectsUsingBlock:^(IpAddr *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(1, element);
  }];
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (IMFileServerIPRsp*) parseFromData:(NSData*) data {
  return (IMFileServerIPRsp*)[[[IMFileServerIPRsp builder] mergeFromData:data] build];
}
+ (IMFileServerIPRsp*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMFileServerIPRsp*)[[[IMFileServerIPRsp builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (IMFileServerIPRsp*) parseFromInputStream:(NSInputStream*) input {
  return (IMFileServerIPRsp*)[[[IMFileServerIPRsp builder] mergeFromInputStream:input] build];
}
+ (IMFileServerIPRsp*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMFileServerIPRsp*)[[[IMFileServerIPRsp builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (IMFileServerIPRsp*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (IMFileServerIPRsp*)[[[IMFileServerIPRsp builder] mergeFromCodedInputStream:input] build];
}
+ (IMFileServerIPRsp*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMFileServerIPRsp*)[[[IMFileServerIPRsp builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (IMFileServerIPRspBuilder*) builder {
  return [[IMFileServerIPRspBuilder alloc] init];
}
+ (IMFileServerIPRspBuilder*) builderWithPrototype:(IMFileServerIPRsp*) prototype {
  return [[IMFileServerIPRsp builder] mergeFrom:prototype];
}
- (IMFileServerIPRspBuilder*) builder {
  return [IMFileServerIPRsp builder];
}
- (IMFileServerIPRspBuilder*) toBuilder {
  return [IMFileServerIPRsp builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  [self.ipAddrListArray enumerateObjectsUsingBlock:^(IpAddr *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"ipAddrList"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  for (IpAddr* element in self.ipAddrListArray) {
    NSMutableDictionary *elementDictionary = [NSMutableDictionary dictionary];
    [element storeInDictionary:elementDictionary];
    [dictionary setObject:[NSDictionary dictionaryWithDictionary:elementDictionary] forKey:@"ipAddrList"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[IMFileServerIPRsp class]]) {
    return NO;
  }
  IMFileServerIPRsp *otherMessage = other;
  return
      [self.ipAddrListArray isEqualToArray:otherMessage.ipAddrListArray] &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  [self.ipAddrListArray enumerateObjectsUsingBlock:^(IpAddr *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface IMFileServerIPRspBuilder()
@property (strong) IMFileServerIPRsp* resultImfileServerIprsp;
@end

@implementation IMFileServerIPRspBuilder
@synthesize resultImfileServerIprsp;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultImfileServerIprsp = [[IMFileServerIPRsp alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultImfileServerIprsp;
}
- (IMFileServerIPRspBuilder*) clear {
  self.resultImfileServerIprsp = [[IMFileServerIPRsp alloc] init];
  return self;
}
- (IMFileServerIPRspBuilder*) clone {
  return [IMFileServerIPRsp builderWithPrototype:resultImfileServerIprsp];
}
- (IMFileServerIPRsp*) defaultInstance {
  return [IMFileServerIPRsp defaultInstance];
}
- (IMFileServerIPRsp*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (IMFileServerIPRsp*) buildPartial {
  IMFileServerIPRsp* returnMe = resultImfileServerIprsp;
  self.resultImfileServerIprsp = nil;
  return returnMe;
}
- (IMFileServerIPRspBuilder*) mergeFrom:(IMFileServerIPRsp*) other {
  if (other == [IMFileServerIPRsp defaultInstance]) {
    return self;
  }
  if (other.ipAddrListArray.count > 0) {
    if (resultImfileServerIprsp.ipAddrListArray == nil) {
      resultImfileServerIprsp.ipAddrListArray = [[NSMutableArray alloc] initWithArray:other.ipAddrListArray];
    } else {
      [resultImfileServerIprsp.ipAddrListArray addObjectsFromArray:other.ipAddrListArray];
    }
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (IMFileServerIPRspBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (IMFileServerIPRspBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        IpAddrBuilder* subBuilder = [IpAddr builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addIpAddrList:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (NSMutableArray *)ipAddrList {
  return resultImfileServerIprsp.ipAddrListArray;
}
- (IpAddr*)ipAddrListAtIndex:(NSUInteger)index {
  return [resultImfileServerIprsp ipAddrListAtIndex:index];
}
- (IMFileServerIPRspBuilder *)addIpAddrList:(IpAddr*)value {
  if (resultImfileServerIprsp.ipAddrListArray == nil) {
    resultImfileServerIprsp.ipAddrListArray = [[NSMutableArray alloc]init];
  }
  [resultImfileServerIprsp.ipAddrListArray addObject:value];
  return self;
}
- (IMFileServerIPRspBuilder *)setIpAddrListArray:(NSArray *)array {
  resultImfileServerIprsp.ipAddrListArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (IMFileServerIPRspBuilder *)clearIpAddrList {
  resultImfileServerIprsp.ipAddrListArray = nil;
  return self;
}
@end


// @@protoc_insertion_point(global_scope)
