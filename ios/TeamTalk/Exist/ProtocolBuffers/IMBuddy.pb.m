// Generated by the protocol buffer compiler.  DO NOT EDIT!

#import "IMBuddy.pb.h"
// @@protoc_insertion_point(imports)

@implementation ImbuddyRoot
static PBExtensionRegistry* extensionRegistry = nil;
+ (PBExtensionRegistry*) extensionRegistry {
  return extensionRegistry;
}

+ (void) initialize {
  if (self == [ImbuddyRoot class]) {
    PBMutableExtensionRegistry* registry = [PBMutableExtensionRegistry registry];
    [self registerAllExtensions:registry];
    [ImbaseDefineRoot registerAllExtensions:registry];
    extensionRegistry = registry;
  }
}
+ (void) registerAllExtensions:(PBMutableExtensionRegistry*) registry {
}
@end

@interface IMRecentContactSessionReq ()
@property UInt32 userId;
@property UInt32 latestUpdateTime;
@property (strong) NSData* attachData;
@end

@implementation IMRecentContactSessionReq

- (BOOL) hasUserId {
  return !!hasUserId_;
}
- (void) setHasUserId:(BOOL) _value_ {
  hasUserId_ = !!_value_;
}
@synthesize userId;
- (BOOL) hasLatestUpdateTime {
  return !!hasLatestUpdateTime_;
}
- (void) setHasLatestUpdateTime:(BOOL) _value_ {
  hasLatestUpdateTime_ = !!_value_;
}
@synthesize latestUpdateTime;
- (BOOL) hasAttachData {
  return !!hasAttachData_;
}
- (void) setHasAttachData:(BOOL) _value_ {
  hasAttachData_ = !!_value_;
}
@synthesize attachData;
- (instancetype) init {
  if ((self = [super init])) {
    self.userId = 0;
    self.latestUpdateTime = 0;
    self.attachData = [NSData data];
  }
  return self;
}
static IMRecentContactSessionReq* defaultIMRecentContactSessionReqInstance = nil;
+ (void) initialize {
  if (self == [IMRecentContactSessionReq class]) {
    defaultIMRecentContactSessionReqInstance = [[IMRecentContactSessionReq alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultIMRecentContactSessionReqInstance;
}
- (instancetype) defaultInstance {
  return defaultIMRecentContactSessionReqInstance;
}
- (BOOL) isInitialized {
  if (!self.hasUserId) {
    return NO;
  }
  if (!self.hasLatestUpdateTime) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasUserId) {
    [output writeUInt32:1 value:self.userId];
  }
  if (self.hasLatestUpdateTime) {
    [output writeUInt32:2 value:self.latestUpdateTime];
  }
  if (self.hasAttachData) {
    [output writeData:20 value:self.attachData];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasUserId) {
    size_ += computeUInt32Size(1, self.userId);
  }
  if (self.hasLatestUpdateTime) {
    size_ += computeUInt32Size(2, self.latestUpdateTime);
  }
  if (self.hasAttachData) {
    size_ += computeDataSize(20, self.attachData);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (IMRecentContactSessionReq*) parseFromData:(NSData*) data {
  return (IMRecentContactSessionReq*)[[[IMRecentContactSessionReq builder] mergeFromData:data] build];
}
+ (IMRecentContactSessionReq*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMRecentContactSessionReq*)[[[IMRecentContactSessionReq builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (IMRecentContactSessionReq*) parseFromInputStream:(NSInputStream*) input {
  return (IMRecentContactSessionReq*)[[[IMRecentContactSessionReq builder] mergeFromInputStream:input] build];
}
+ (IMRecentContactSessionReq*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMRecentContactSessionReq*)[[[IMRecentContactSessionReq builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (IMRecentContactSessionReq*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (IMRecentContactSessionReq*)[[[IMRecentContactSessionReq builder] mergeFromCodedInputStream:input] build];
}
+ (IMRecentContactSessionReq*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMRecentContactSessionReq*)[[[IMRecentContactSessionReq builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (IMRecentContactSessionReqBuilder*) builder {
  return [[IMRecentContactSessionReqBuilder alloc] init];
}
+ (IMRecentContactSessionReqBuilder*) builderWithPrototype:(IMRecentContactSessionReq*) prototype {
  return [[IMRecentContactSessionReq builder] mergeFrom:prototype];
}
- (IMRecentContactSessionReqBuilder*) builder {
  return [IMRecentContactSessionReq builder];
}
- (IMRecentContactSessionReqBuilder*) toBuilder {
  return [IMRecentContactSessionReq builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasUserId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"userId", [NSNumber numberWithInteger:self.userId]];
  }
  if (self.hasLatestUpdateTime) {
    [output appendFormat:@"%@%@: %@\n", indent, @"latestUpdateTime", [NSNumber numberWithInteger:self.latestUpdateTime]];
  }
  if (self.hasAttachData) {
    [output appendFormat:@"%@%@: %@\n", indent, @"attachData", self.attachData];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasUserId) {
    [dictionary setObject: [NSNumber numberWithInteger:self.userId] forKey: @"userId"];
  }
  if (self.hasLatestUpdateTime) {
    [dictionary setObject: [NSNumber numberWithInteger:self.latestUpdateTime] forKey: @"latestUpdateTime"];
  }
  if (self.hasAttachData) {
    [dictionary setObject: self.attachData forKey: @"attachData"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[IMRecentContactSessionReq class]]) {
    return NO;
  }
  IMRecentContactSessionReq *otherMessage = other;
  return
      self.hasUserId == otherMessage.hasUserId &&
      (!self.hasUserId || self.userId == otherMessage.userId) &&
      self.hasLatestUpdateTime == otherMessage.hasLatestUpdateTime &&
      (!self.hasLatestUpdateTime || self.latestUpdateTime == otherMessage.latestUpdateTime) &&
      self.hasAttachData == otherMessage.hasAttachData &&
      (!self.hasAttachData || [self.attachData isEqual:otherMessage.attachData]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasUserId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.userId] hash];
  }
  if (self.hasLatestUpdateTime) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.latestUpdateTime] hash];
  }
  if (self.hasAttachData) {
    hashCode = hashCode * 31 + [self.attachData hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface IMRecentContactSessionReqBuilder()
@property (strong) IMRecentContactSessionReq* resultImrecentContactSessionReq;
@end

@implementation IMRecentContactSessionReqBuilder
@synthesize resultImrecentContactSessionReq;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultImrecentContactSessionReq = [[IMRecentContactSessionReq alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultImrecentContactSessionReq;
}
- (IMRecentContactSessionReqBuilder*) clear {
  self.resultImrecentContactSessionReq = [[IMRecentContactSessionReq alloc] init];
  return self;
}
- (IMRecentContactSessionReqBuilder*) clone {
  return [IMRecentContactSessionReq builderWithPrototype:resultImrecentContactSessionReq];
}
- (IMRecentContactSessionReq*) defaultInstance {
  return [IMRecentContactSessionReq defaultInstance];
}
- (IMRecentContactSessionReq*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (IMRecentContactSessionReq*) buildPartial {
  IMRecentContactSessionReq* returnMe = resultImrecentContactSessionReq;
  self.resultImrecentContactSessionReq = nil;
  return returnMe;
}
- (IMRecentContactSessionReqBuilder*) mergeFrom:(IMRecentContactSessionReq*) other {
  if (other == [IMRecentContactSessionReq defaultInstance]) {
    return self;
  }
  if (other.hasUserId) {
    [self setUserId:other.userId];
  }
  if (other.hasLatestUpdateTime) {
    [self setLatestUpdateTime:other.latestUpdateTime];
  }
  if (other.hasAttachData) {
    [self setAttachData:other.attachData];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (IMRecentContactSessionReqBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (IMRecentContactSessionReqBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setUserId:[input readUInt32]];
        break;
      }
      case 16: {
        [self setLatestUpdateTime:[input readUInt32]];
        break;
      }
      case 162: {
        [self setAttachData:[input readData]];
        break;
      }
    }
  }
}
- (BOOL) hasUserId {
  return resultImrecentContactSessionReq.hasUserId;
}
- (UInt32) userId {
  return resultImrecentContactSessionReq.userId;
}
- (IMRecentContactSessionReqBuilder*) setUserId:(UInt32) value {
  resultImrecentContactSessionReq.hasUserId = YES;
  resultImrecentContactSessionReq.userId = value;
  return self;
}
- (IMRecentContactSessionReqBuilder*) clearUserId {
  resultImrecentContactSessionReq.hasUserId = NO;
  resultImrecentContactSessionReq.userId = 0;
  return self;
}
- (BOOL) hasLatestUpdateTime {
  return resultImrecentContactSessionReq.hasLatestUpdateTime;
}
- (UInt32) latestUpdateTime {
  return resultImrecentContactSessionReq.latestUpdateTime;
}
- (IMRecentContactSessionReqBuilder*) setLatestUpdateTime:(UInt32) value {
  resultImrecentContactSessionReq.hasLatestUpdateTime = YES;
  resultImrecentContactSessionReq.latestUpdateTime = value;
  return self;
}
- (IMRecentContactSessionReqBuilder*) clearLatestUpdateTime {
  resultImrecentContactSessionReq.hasLatestUpdateTime = NO;
  resultImrecentContactSessionReq.latestUpdateTime = 0;
  return self;
}
- (BOOL) hasAttachData {
  return resultImrecentContactSessionReq.hasAttachData;
}
- (NSData*) attachData {
  return resultImrecentContactSessionReq.attachData;
}
- (IMRecentContactSessionReqBuilder*) setAttachData:(NSData*) value {
  resultImrecentContactSessionReq.hasAttachData = YES;
  resultImrecentContactSessionReq.attachData = value;
  return self;
}
- (IMRecentContactSessionReqBuilder*) clearAttachData {
  resultImrecentContactSessionReq.hasAttachData = NO;
  resultImrecentContactSessionReq.attachData = [NSData data];
  return self;
}
@end

@interface IMRecentContactSessionRsp ()
@property UInt32 userId;
@property (strong) NSMutableArray * contactSessionListArray;
@property (strong) NSData* attachData;
@end

@implementation IMRecentContactSessionRsp

- (BOOL) hasUserId {
  return !!hasUserId_;
}
- (void) setHasUserId:(BOOL) _value_ {
  hasUserId_ = !!_value_;
}
@synthesize userId;
@synthesize contactSessionListArray;
@dynamic contactSessionList;
- (BOOL) hasAttachData {
  return !!hasAttachData_;
}
- (void) setHasAttachData:(BOOL) _value_ {
  hasAttachData_ = !!_value_;
}
@synthesize attachData;
- (instancetype) init {
  if ((self = [super init])) {
    self.userId = 0;
    self.attachData = [NSData data];
  }
  return self;
}
static IMRecentContactSessionRsp* defaultIMRecentContactSessionRspInstance = nil;
+ (void) initialize {
  if (self == [IMRecentContactSessionRsp class]) {
    defaultIMRecentContactSessionRspInstance = [[IMRecentContactSessionRsp alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultIMRecentContactSessionRspInstance;
}
- (instancetype) defaultInstance {
  return defaultIMRecentContactSessionRspInstance;
}
- (NSArray *)contactSessionList {
  return contactSessionListArray;
}
- (ContactSessionInfo*)contactSessionListAtIndex:(NSUInteger)index {
  return [contactSessionListArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  if (!self.hasUserId) {
    return NO;
  }
  __block BOOL isInitcontactSessionList = YES;
   [self.contactSessionList enumerateObjectsUsingBlock:^(ContactSessionInfo *element, NSUInteger idx, BOOL *stop) {
    if (!element.isInitialized) {
      isInitcontactSessionList = NO;
      *stop = YES;
    }
  }];
  if (!isInitcontactSessionList) return isInitcontactSessionList;
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasUserId) {
    [output writeUInt32:1 value:self.userId];
  }
  [self.contactSessionListArray enumerateObjectsUsingBlock:^(ContactSessionInfo *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:2 value:element];
  }];
  if (self.hasAttachData) {
    [output writeData:20 value:self.attachData];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasUserId) {
    size_ += computeUInt32Size(1, self.userId);
  }
  [self.contactSessionListArray enumerateObjectsUsingBlock:^(ContactSessionInfo *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(2, element);
  }];
  if (self.hasAttachData) {
    size_ += computeDataSize(20, self.attachData);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (IMRecentContactSessionRsp*) parseFromData:(NSData*) data {
  return (IMRecentContactSessionRsp*)[[[IMRecentContactSessionRsp builder] mergeFromData:data] build];
}
+ (IMRecentContactSessionRsp*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMRecentContactSessionRsp*)[[[IMRecentContactSessionRsp builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (IMRecentContactSessionRsp*) parseFromInputStream:(NSInputStream*) input {
  return (IMRecentContactSessionRsp*)[[[IMRecentContactSessionRsp builder] mergeFromInputStream:input] build];
}
+ (IMRecentContactSessionRsp*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMRecentContactSessionRsp*)[[[IMRecentContactSessionRsp builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (IMRecentContactSessionRsp*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (IMRecentContactSessionRsp*)[[[IMRecentContactSessionRsp builder] mergeFromCodedInputStream:input] build];
}
+ (IMRecentContactSessionRsp*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMRecentContactSessionRsp*)[[[IMRecentContactSessionRsp builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (IMRecentContactSessionRspBuilder*) builder {
  return [[IMRecentContactSessionRspBuilder alloc] init];
}
+ (IMRecentContactSessionRspBuilder*) builderWithPrototype:(IMRecentContactSessionRsp*) prototype {
  return [[IMRecentContactSessionRsp builder] mergeFrom:prototype];
}
- (IMRecentContactSessionRspBuilder*) builder {
  return [IMRecentContactSessionRsp builder];
}
- (IMRecentContactSessionRspBuilder*) toBuilder {
  return [IMRecentContactSessionRsp builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasUserId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"userId", [NSNumber numberWithInteger:self.userId]];
  }
  [self.contactSessionListArray enumerateObjectsUsingBlock:^(ContactSessionInfo *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"contactSessionList"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  if (self.hasAttachData) {
    [output appendFormat:@"%@%@: %@\n", indent, @"attachData", self.attachData];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasUserId) {
    [dictionary setObject: [NSNumber numberWithInteger:self.userId] forKey: @"userId"];
  }
  for (ContactSessionInfo* element in self.contactSessionListArray) {
    NSMutableDictionary *elementDictionary = [NSMutableDictionary dictionary];
    [element storeInDictionary:elementDictionary];
    [dictionary setObject:[NSDictionary dictionaryWithDictionary:elementDictionary] forKey:@"contactSessionList"];
  }
  if (self.hasAttachData) {
    [dictionary setObject: self.attachData forKey: @"attachData"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[IMRecentContactSessionRsp class]]) {
    return NO;
  }
  IMRecentContactSessionRsp *otherMessage = other;
  return
      self.hasUserId == otherMessage.hasUserId &&
      (!self.hasUserId || self.userId == otherMessage.userId) &&
      [self.contactSessionListArray isEqualToArray:otherMessage.contactSessionListArray] &&
      self.hasAttachData == otherMessage.hasAttachData &&
      (!self.hasAttachData || [self.attachData isEqual:otherMessage.attachData]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasUserId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.userId] hash];
  }
  [self.contactSessionListArray enumerateObjectsUsingBlock:^(ContactSessionInfo *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  if (self.hasAttachData) {
    hashCode = hashCode * 31 + [self.attachData hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface IMRecentContactSessionRspBuilder()
@property (strong) IMRecentContactSessionRsp* resultImrecentContactSessionRsp;
@end

@implementation IMRecentContactSessionRspBuilder
@synthesize resultImrecentContactSessionRsp;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultImrecentContactSessionRsp = [[IMRecentContactSessionRsp alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultImrecentContactSessionRsp;
}
- (IMRecentContactSessionRspBuilder*) clear {
  self.resultImrecentContactSessionRsp = [[IMRecentContactSessionRsp alloc] init];
  return self;
}
- (IMRecentContactSessionRspBuilder*) clone {
  return [IMRecentContactSessionRsp builderWithPrototype:resultImrecentContactSessionRsp];
}
- (IMRecentContactSessionRsp*) defaultInstance {
  return [IMRecentContactSessionRsp defaultInstance];
}
- (IMRecentContactSessionRsp*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (IMRecentContactSessionRsp*) buildPartial {
  IMRecentContactSessionRsp* returnMe = resultImrecentContactSessionRsp;
  self.resultImrecentContactSessionRsp = nil;
  return returnMe;
}
- (IMRecentContactSessionRspBuilder*) mergeFrom:(IMRecentContactSessionRsp*) other {
  if (other == [IMRecentContactSessionRsp defaultInstance]) {
    return self;
  }
  if (other.hasUserId) {
    [self setUserId:other.userId];
  }
  if (other.contactSessionListArray.count > 0) {
    if (resultImrecentContactSessionRsp.contactSessionListArray == nil) {
      resultImrecentContactSessionRsp.contactSessionListArray = [[NSMutableArray alloc] initWithArray:other.contactSessionListArray];
    } else {
      [resultImrecentContactSessionRsp.contactSessionListArray addObjectsFromArray:other.contactSessionListArray];
    }
  }
  if (other.hasAttachData) {
    [self setAttachData:other.attachData];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (IMRecentContactSessionRspBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (IMRecentContactSessionRspBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setUserId:[input readUInt32]];
        break;
      }
      case 18: {
        ContactSessionInfoBuilder* subBuilder = [ContactSessionInfo builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addContactSessionList:[subBuilder buildPartial]];
        break;
      }
      case 162: {
        [self setAttachData:[input readData]];
        break;
      }
    }
  }
}
- (BOOL) hasUserId {
  return resultImrecentContactSessionRsp.hasUserId;
}
- (UInt32) userId {
  return resultImrecentContactSessionRsp.userId;
}
- (IMRecentContactSessionRspBuilder*) setUserId:(UInt32) value {
  resultImrecentContactSessionRsp.hasUserId = YES;
  resultImrecentContactSessionRsp.userId = value;
  return self;
}
- (IMRecentContactSessionRspBuilder*) clearUserId {
  resultImrecentContactSessionRsp.hasUserId = NO;
  resultImrecentContactSessionRsp.userId = 0;
  return self;
}
- (NSMutableArray *)contactSessionList {
  return resultImrecentContactSessionRsp.contactSessionListArray;
}
- (ContactSessionInfo*)contactSessionListAtIndex:(NSUInteger)index {
  return [resultImrecentContactSessionRsp contactSessionListAtIndex:index];
}
- (IMRecentContactSessionRspBuilder *)addContactSessionList:(ContactSessionInfo*)value {
  if (resultImrecentContactSessionRsp.contactSessionListArray == nil) {
    resultImrecentContactSessionRsp.contactSessionListArray = [[NSMutableArray alloc]init];
  }
  [resultImrecentContactSessionRsp.contactSessionListArray addObject:value];
  return self;
}
- (IMRecentContactSessionRspBuilder *)setContactSessionListArray:(NSArray *)array {
  resultImrecentContactSessionRsp.contactSessionListArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (IMRecentContactSessionRspBuilder *)clearContactSessionList {
  resultImrecentContactSessionRsp.contactSessionListArray = nil;
  return self;
}
- (BOOL) hasAttachData {
  return resultImrecentContactSessionRsp.hasAttachData;
}
- (NSData*) attachData {
  return resultImrecentContactSessionRsp.attachData;
}
- (IMRecentContactSessionRspBuilder*) setAttachData:(NSData*) value {
  resultImrecentContactSessionRsp.hasAttachData = YES;
  resultImrecentContactSessionRsp.attachData = value;
  return self;
}
- (IMRecentContactSessionRspBuilder*) clearAttachData {
  resultImrecentContactSessionRsp.hasAttachData = NO;
  resultImrecentContactSessionRsp.attachData = [NSData data];
  return self;
}
@end

@interface IMUserStatNotify ()
@property (strong) UserStat* userStat;
@end

@implementation IMUserStatNotify

- (BOOL) hasUserStat {
  return !!hasUserStat_;
}
- (void) setHasUserStat:(BOOL) _value_ {
  hasUserStat_ = !!_value_;
}
@synthesize userStat;
- (instancetype) init {
  if ((self = [super init])) {
    self.userStat = [UserStat defaultInstance];
  }
  return self;
}
static IMUserStatNotify* defaultIMUserStatNotifyInstance = nil;
+ (void) initialize {
  if (self == [IMUserStatNotify class]) {
    defaultIMUserStatNotifyInstance = [[IMUserStatNotify alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultIMUserStatNotifyInstance;
}
- (instancetype) defaultInstance {
  return defaultIMUserStatNotifyInstance;
}
- (BOOL) isInitialized {
  if (!self.hasUserStat) {
    return NO;
  }
  if (!self.userStat.isInitialized) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasUserStat) {
    [output writeMessage:1 value:self.userStat];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasUserStat) {
    size_ += computeMessageSize(1, self.userStat);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (IMUserStatNotify*) parseFromData:(NSData*) data {
  return (IMUserStatNotify*)[[[IMUserStatNotify builder] mergeFromData:data] build];
}
+ (IMUserStatNotify*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMUserStatNotify*)[[[IMUserStatNotify builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (IMUserStatNotify*) parseFromInputStream:(NSInputStream*) input {
  return (IMUserStatNotify*)[[[IMUserStatNotify builder] mergeFromInputStream:input] build];
}
+ (IMUserStatNotify*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMUserStatNotify*)[[[IMUserStatNotify builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (IMUserStatNotify*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (IMUserStatNotify*)[[[IMUserStatNotify builder] mergeFromCodedInputStream:input] build];
}
+ (IMUserStatNotify*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMUserStatNotify*)[[[IMUserStatNotify builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (IMUserStatNotifyBuilder*) builder {
  return [[IMUserStatNotifyBuilder alloc] init];
}
+ (IMUserStatNotifyBuilder*) builderWithPrototype:(IMUserStatNotify*) prototype {
  return [[IMUserStatNotify builder] mergeFrom:prototype];
}
- (IMUserStatNotifyBuilder*) builder {
  return [IMUserStatNotify builder];
}
- (IMUserStatNotifyBuilder*) toBuilder {
  return [IMUserStatNotify builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasUserStat) {
    [output appendFormat:@"%@%@ {\n", indent, @"userStat"];
    [self.userStat writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasUserStat) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.userStat storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"userStat"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[IMUserStatNotify class]]) {
    return NO;
  }
  IMUserStatNotify *otherMessage = other;
  return
      self.hasUserStat == otherMessage.hasUserStat &&
      (!self.hasUserStat || [self.userStat isEqual:otherMessage.userStat]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasUserStat) {
    hashCode = hashCode * 31 + [self.userStat hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface IMUserStatNotifyBuilder()
@property (strong) IMUserStatNotify* resultImuserStatNotify;
@end

@implementation IMUserStatNotifyBuilder
@synthesize resultImuserStatNotify;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultImuserStatNotify = [[IMUserStatNotify alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultImuserStatNotify;
}
- (IMUserStatNotifyBuilder*) clear {
  self.resultImuserStatNotify = [[IMUserStatNotify alloc] init];
  return self;
}
- (IMUserStatNotifyBuilder*) clone {
  return [IMUserStatNotify builderWithPrototype:resultImuserStatNotify];
}
- (IMUserStatNotify*) defaultInstance {
  return [IMUserStatNotify defaultInstance];
}
- (IMUserStatNotify*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (IMUserStatNotify*) buildPartial {
  IMUserStatNotify* returnMe = resultImuserStatNotify;
  self.resultImuserStatNotify = nil;
  return returnMe;
}
- (IMUserStatNotifyBuilder*) mergeFrom:(IMUserStatNotify*) other {
  if (other == [IMUserStatNotify defaultInstance]) {
    return self;
  }
  if (other.hasUserStat) {
    [self mergeUserStat:other.userStat];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (IMUserStatNotifyBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (IMUserStatNotifyBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        UserStatBuilder* subBuilder = [UserStat builder];
        if (self.hasUserStat) {
          [subBuilder mergeFrom:self.userStat];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setUserStat:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (BOOL) hasUserStat {
  return resultImuserStatNotify.hasUserStat;
}
- (UserStat*) userStat {
  return resultImuserStatNotify.userStat;
}
- (IMUserStatNotifyBuilder*) setUserStat:(UserStat*) value {
  resultImuserStatNotify.hasUserStat = YES;
  resultImuserStatNotify.userStat = value;
  return self;
}
- (IMUserStatNotifyBuilder*) setUserStatBuilder:(UserStatBuilder*) builderForValue {
  return [self setUserStat:[builderForValue build]];
}
- (IMUserStatNotifyBuilder*) mergeUserStat:(UserStat*) value {
  if (resultImuserStatNotify.hasUserStat &&
      resultImuserStatNotify.userStat != [UserStat defaultInstance]) {
    resultImuserStatNotify.userStat =
      [[[UserStat builderWithPrototype:resultImuserStatNotify.userStat] mergeFrom:value] buildPartial];
  } else {
    resultImuserStatNotify.userStat = value;
  }
  resultImuserStatNotify.hasUserStat = YES;
  return self;
}
- (IMUserStatNotifyBuilder*) clearUserStat {
  resultImuserStatNotify.hasUserStat = NO;
  resultImuserStatNotify.userStat = [UserStat defaultInstance];
  return self;
}
@end

@interface IMUsersInfoReq ()
@property UInt32 userId;
@property (strong) PBAppendableArray * userIdListArray;
@property (strong) NSData* attachData;
@end

@implementation IMUsersInfoReq

- (BOOL) hasUserId {
  return !!hasUserId_;
}
- (void) setHasUserId:(BOOL) _value_ {
  hasUserId_ = !!_value_;
}
@synthesize userId;
@synthesize userIdListArray;
@dynamic userIdList;
- (BOOL) hasAttachData {
  return !!hasAttachData_;
}
- (void) setHasAttachData:(BOOL) _value_ {
  hasAttachData_ = !!_value_;
}
@synthesize attachData;
- (instancetype) init {
  if ((self = [super init])) {
    self.userId = 0;
    self.attachData = [NSData data];
  }
  return self;
}
static IMUsersInfoReq* defaultIMUsersInfoReqInstance = nil;
+ (void) initialize {
  if (self == [IMUsersInfoReq class]) {
    defaultIMUsersInfoReqInstance = [[IMUsersInfoReq alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultIMUsersInfoReqInstance;
}
- (instancetype) defaultInstance {
  return defaultIMUsersInfoReqInstance;
}
- (PBArray *)userIdList {
  return userIdListArray;
}
- (UInt32)userIdListAtIndex:(NSUInteger)index {
  return [userIdListArray uint32AtIndex:index];
}
- (BOOL) isInitialized {
  if (!self.hasUserId) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasUserId) {
    [output writeUInt32:1 value:self.userId];
  }
  const NSUInteger userIdListArrayCount = self.userIdListArray.count;
  if (userIdListArrayCount > 0) {
    const UInt32 *values = (const UInt32 *)self.userIdListArray.data;
    for (NSUInteger i = 0; i < userIdListArrayCount; ++i) {
      [output writeUInt32:2 value:values[i]];
    }
  }
  if (self.hasAttachData) {
    [output writeData:20 value:self.attachData];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasUserId) {
    size_ += computeUInt32Size(1, self.userId);
  }
  {
    __block SInt32 dataSize = 0;
    const NSUInteger count = self.userIdListArray.count;
    const UInt32 *values = (const UInt32 *)self.userIdListArray.data;
    for (NSUInteger i = 0; i < count; ++i) {
      dataSize += computeUInt32SizeNoTag(values[i]);
    }
    size_ += dataSize;
    size_ += (SInt32)(1 * count);
  }
  if (self.hasAttachData) {
    size_ += computeDataSize(20, self.attachData);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (IMUsersInfoReq*) parseFromData:(NSData*) data {
  return (IMUsersInfoReq*)[[[IMUsersInfoReq builder] mergeFromData:data] build];
}
+ (IMUsersInfoReq*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMUsersInfoReq*)[[[IMUsersInfoReq builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (IMUsersInfoReq*) parseFromInputStream:(NSInputStream*) input {
  return (IMUsersInfoReq*)[[[IMUsersInfoReq builder] mergeFromInputStream:input] build];
}
+ (IMUsersInfoReq*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMUsersInfoReq*)[[[IMUsersInfoReq builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (IMUsersInfoReq*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (IMUsersInfoReq*)[[[IMUsersInfoReq builder] mergeFromCodedInputStream:input] build];
}
+ (IMUsersInfoReq*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMUsersInfoReq*)[[[IMUsersInfoReq builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (IMUsersInfoReqBuilder*) builder {
  return [[IMUsersInfoReqBuilder alloc] init];
}
+ (IMUsersInfoReqBuilder*) builderWithPrototype:(IMUsersInfoReq*) prototype {
  return [[IMUsersInfoReq builder] mergeFrom:prototype];
}
- (IMUsersInfoReqBuilder*) builder {
  return [IMUsersInfoReq builder];
}
- (IMUsersInfoReqBuilder*) toBuilder {
  return [IMUsersInfoReq builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasUserId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"userId", [NSNumber numberWithInteger:self.userId]];
  }
  [self.userIdListArray enumerateObjectsUsingBlock:^(id obj, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@: %@\n", indent, @"userIdList", obj];
  }];
  if (self.hasAttachData) {
    [output appendFormat:@"%@%@: %@\n", indent, @"attachData", self.attachData];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasUserId) {
    [dictionary setObject: [NSNumber numberWithInteger:self.userId] forKey: @"userId"];
  }
  NSMutableArray * userIdListArrayArray = [NSMutableArray new];
  NSUInteger userIdListArrayCount=self.userIdListArray.count;
  for(int i=0;i<userIdListArrayCount;i++){
    [userIdListArrayArray addObject: @([self.userIdListArray uint32AtIndex:i])];
  }
  [dictionary setObject: userIdListArrayArray forKey: @"userIdList"];
  if (self.hasAttachData) {
    [dictionary setObject: self.attachData forKey: @"attachData"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[IMUsersInfoReq class]]) {
    return NO;
  }
  IMUsersInfoReq *otherMessage = other;
  return
      self.hasUserId == otherMessage.hasUserId &&
      (!self.hasUserId || self.userId == otherMessage.userId) &&
      [self.userIdListArray isEqualToArray:otherMessage.userIdListArray] &&
      self.hasAttachData == otherMessage.hasAttachData &&
      (!self.hasAttachData || [self.attachData isEqual:otherMessage.attachData]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasUserId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.userId] hash];
  }
  [self.userIdListArray enumerateObjectsUsingBlock:^(NSNumber *obj, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [obj longValue];
  }];
  if (self.hasAttachData) {
    hashCode = hashCode * 31 + [self.attachData hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface IMUsersInfoReqBuilder()
@property (strong) IMUsersInfoReq* resultImusersInfoReq;
@end

@implementation IMUsersInfoReqBuilder
@synthesize resultImusersInfoReq;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultImusersInfoReq = [[IMUsersInfoReq alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultImusersInfoReq;
}
- (IMUsersInfoReqBuilder*) clear {
  self.resultImusersInfoReq = [[IMUsersInfoReq alloc] init];
  return self;
}
- (IMUsersInfoReqBuilder*) clone {
  return [IMUsersInfoReq builderWithPrototype:resultImusersInfoReq];
}
- (IMUsersInfoReq*) defaultInstance {
  return [IMUsersInfoReq defaultInstance];
}
- (IMUsersInfoReq*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (IMUsersInfoReq*) buildPartial {
  IMUsersInfoReq* returnMe = resultImusersInfoReq;
  self.resultImusersInfoReq = nil;
  return returnMe;
}
- (IMUsersInfoReqBuilder*) mergeFrom:(IMUsersInfoReq*) other {
  if (other == [IMUsersInfoReq defaultInstance]) {
    return self;
  }
  if (other.hasUserId) {
    [self setUserId:other.userId];
  }
  if (other.userIdListArray.count > 0) {
    if (resultImusersInfoReq.userIdListArray == nil) {
      resultImusersInfoReq.userIdListArray = [other.userIdListArray copy];
    } else {
      [resultImusersInfoReq.userIdListArray appendArray:other.userIdListArray];
    }
  }
  if (other.hasAttachData) {
    [self setAttachData:other.attachData];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (IMUsersInfoReqBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (IMUsersInfoReqBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setUserId:[input readUInt32]];
        break;
      }
      case 16: {
        [self addUserIdList:[input readUInt32]];
        break;
      }
      case 162: {
        [self setAttachData:[input readData]];
        break;
      }
    }
  }
}
- (BOOL) hasUserId {
  return resultImusersInfoReq.hasUserId;
}
- (UInt32) userId {
  return resultImusersInfoReq.userId;
}
- (IMUsersInfoReqBuilder*) setUserId:(UInt32) value {
  resultImusersInfoReq.hasUserId = YES;
  resultImusersInfoReq.userId = value;
  return self;
}
- (IMUsersInfoReqBuilder*) clearUserId {
  resultImusersInfoReq.hasUserId = NO;
  resultImusersInfoReq.userId = 0;
  return self;
}
- (PBAppendableArray *)userIdList {
  return resultImusersInfoReq.userIdListArray;
}
- (UInt32)userIdListAtIndex:(NSUInteger)index {
  return [resultImusersInfoReq userIdListAtIndex:index];
}
- (IMUsersInfoReqBuilder *)addUserIdList:(UInt32)value {
  if (resultImusersInfoReq.userIdListArray == nil) {
    resultImusersInfoReq.userIdListArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeUInt32];
  }
  [resultImusersInfoReq.userIdListArray addUint32:value];
  return self;
}
- (IMUsersInfoReqBuilder *)setUserIdListArray:(NSArray *)array {
  resultImusersInfoReq.userIdListArray = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeUInt32];
  return self;
}
- (IMUsersInfoReqBuilder *)setUserIdListValues:(const UInt32 *)values count:(NSUInteger)count {
  resultImusersInfoReq.userIdListArray = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeUInt32];
  return self;
}
- (IMUsersInfoReqBuilder *)clearUserIdList {
  resultImusersInfoReq.userIdListArray = nil;
  return self;
}
- (BOOL) hasAttachData {
  return resultImusersInfoReq.hasAttachData;
}
- (NSData*) attachData {
  return resultImusersInfoReq.attachData;
}
- (IMUsersInfoReqBuilder*) setAttachData:(NSData*) value {
  resultImusersInfoReq.hasAttachData = YES;
  resultImusersInfoReq.attachData = value;
  return self;
}
- (IMUsersInfoReqBuilder*) clearAttachData {
  resultImusersInfoReq.hasAttachData = NO;
  resultImusersInfoReq.attachData = [NSData data];
  return self;
}
@end

@interface IMUsersInfoRsp ()
@property UInt32 userId;
@property (strong) NSMutableArray * userInfoListArray;
@property (strong) NSData* attachData;
@end

@implementation IMUsersInfoRsp

- (BOOL) hasUserId {
  return !!hasUserId_;
}
- (void) setHasUserId:(BOOL) _value_ {
  hasUserId_ = !!_value_;
}
@synthesize userId;
@synthesize userInfoListArray;
@dynamic userInfoList;
- (BOOL) hasAttachData {
  return !!hasAttachData_;
}
- (void) setHasAttachData:(BOOL) _value_ {
  hasAttachData_ = !!_value_;
}
@synthesize attachData;
- (instancetype) init {
  if ((self = [super init])) {
    self.userId = 0;
    self.attachData = [NSData data];
  }
  return self;
}
static IMUsersInfoRsp* defaultIMUsersInfoRspInstance = nil;
+ (void) initialize {
  if (self == [IMUsersInfoRsp class]) {
    defaultIMUsersInfoRspInstance = [[IMUsersInfoRsp alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultIMUsersInfoRspInstance;
}
- (instancetype) defaultInstance {
  return defaultIMUsersInfoRspInstance;
}
- (NSArray *)userInfoList {
  return userInfoListArray;
}
- (UserInfo*)userInfoListAtIndex:(NSUInteger)index {
  return [userInfoListArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  if (!self.hasUserId) {
    return NO;
  }
  __block BOOL isInituserInfoList = YES;
   [self.userInfoList enumerateObjectsUsingBlock:^(UserInfo *element, NSUInteger idx, BOOL *stop) {
    if (!element.isInitialized) {
      isInituserInfoList = NO;
      *stop = YES;
    }
  }];
  if (!isInituserInfoList) return isInituserInfoList;
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasUserId) {
    [output writeUInt32:1 value:self.userId];
  }
  [self.userInfoListArray enumerateObjectsUsingBlock:^(UserInfo *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:2 value:element];
  }];
  if (self.hasAttachData) {
    [output writeData:20 value:self.attachData];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasUserId) {
    size_ += computeUInt32Size(1, self.userId);
  }
  [self.userInfoListArray enumerateObjectsUsingBlock:^(UserInfo *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(2, element);
  }];
  if (self.hasAttachData) {
    size_ += computeDataSize(20, self.attachData);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (IMUsersInfoRsp*) parseFromData:(NSData*) data {
  return (IMUsersInfoRsp*)[[[IMUsersInfoRsp builder] mergeFromData:data] build];
}
+ (IMUsersInfoRsp*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMUsersInfoRsp*)[[[IMUsersInfoRsp builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (IMUsersInfoRsp*) parseFromInputStream:(NSInputStream*) input {
  return (IMUsersInfoRsp*)[[[IMUsersInfoRsp builder] mergeFromInputStream:input] build];
}
+ (IMUsersInfoRsp*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMUsersInfoRsp*)[[[IMUsersInfoRsp builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (IMUsersInfoRsp*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (IMUsersInfoRsp*)[[[IMUsersInfoRsp builder] mergeFromCodedInputStream:input] build];
}
+ (IMUsersInfoRsp*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMUsersInfoRsp*)[[[IMUsersInfoRsp builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (IMUsersInfoRspBuilder*) builder {
  return [[IMUsersInfoRspBuilder alloc] init];
}
+ (IMUsersInfoRspBuilder*) builderWithPrototype:(IMUsersInfoRsp*) prototype {
  return [[IMUsersInfoRsp builder] mergeFrom:prototype];
}
- (IMUsersInfoRspBuilder*) builder {
  return [IMUsersInfoRsp builder];
}
- (IMUsersInfoRspBuilder*) toBuilder {
  return [IMUsersInfoRsp builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasUserId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"userId", [NSNumber numberWithInteger:self.userId]];
  }
  [self.userInfoListArray enumerateObjectsUsingBlock:^(UserInfo *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"userInfoList"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  if (self.hasAttachData) {
    [output appendFormat:@"%@%@: %@\n", indent, @"attachData", self.attachData];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasUserId) {
    [dictionary setObject: [NSNumber numberWithInteger:self.userId] forKey: @"userId"];
  }
  for (UserInfo* element in self.userInfoListArray) {
    NSMutableDictionary *elementDictionary = [NSMutableDictionary dictionary];
    [element storeInDictionary:elementDictionary];
    [dictionary setObject:[NSDictionary dictionaryWithDictionary:elementDictionary] forKey:@"userInfoList"];
  }
  if (self.hasAttachData) {
    [dictionary setObject: self.attachData forKey: @"attachData"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[IMUsersInfoRsp class]]) {
    return NO;
  }
  IMUsersInfoRsp *otherMessage = other;
  return
      self.hasUserId == otherMessage.hasUserId &&
      (!self.hasUserId || self.userId == otherMessage.userId) &&
      [self.userInfoListArray isEqualToArray:otherMessage.userInfoListArray] &&
      self.hasAttachData == otherMessage.hasAttachData &&
      (!self.hasAttachData || [self.attachData isEqual:otherMessage.attachData]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasUserId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.userId] hash];
  }
  [self.userInfoListArray enumerateObjectsUsingBlock:^(UserInfo *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  if (self.hasAttachData) {
    hashCode = hashCode * 31 + [self.attachData hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface IMUsersInfoRspBuilder()
@property (strong) IMUsersInfoRsp* resultImusersInfoRsp;
@end

@implementation IMUsersInfoRspBuilder
@synthesize resultImusersInfoRsp;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultImusersInfoRsp = [[IMUsersInfoRsp alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultImusersInfoRsp;
}
- (IMUsersInfoRspBuilder*) clear {
  self.resultImusersInfoRsp = [[IMUsersInfoRsp alloc] init];
  return self;
}
- (IMUsersInfoRspBuilder*) clone {
  return [IMUsersInfoRsp builderWithPrototype:resultImusersInfoRsp];
}
- (IMUsersInfoRsp*) defaultInstance {
  return [IMUsersInfoRsp defaultInstance];
}
- (IMUsersInfoRsp*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (IMUsersInfoRsp*) buildPartial {
  IMUsersInfoRsp* returnMe = resultImusersInfoRsp;
  self.resultImusersInfoRsp = nil;
  return returnMe;
}
- (IMUsersInfoRspBuilder*) mergeFrom:(IMUsersInfoRsp*) other {
  if (other == [IMUsersInfoRsp defaultInstance]) {
    return self;
  }
  if (other.hasUserId) {
    [self setUserId:other.userId];
  }
  if (other.userInfoListArray.count > 0) {
    if (resultImusersInfoRsp.userInfoListArray == nil) {
      resultImusersInfoRsp.userInfoListArray = [[NSMutableArray alloc] initWithArray:other.userInfoListArray];
    } else {
      [resultImusersInfoRsp.userInfoListArray addObjectsFromArray:other.userInfoListArray];
    }
  }
  if (other.hasAttachData) {
    [self setAttachData:other.attachData];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (IMUsersInfoRspBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (IMUsersInfoRspBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setUserId:[input readUInt32]];
        break;
      }
      case 18: {
        UserInfoBuilder* subBuilder = [UserInfo builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addUserInfoList:[subBuilder buildPartial]];
        break;
      }
      case 162: {
        [self setAttachData:[input readData]];
        break;
      }
    }
  }
}
- (BOOL) hasUserId {
  return resultImusersInfoRsp.hasUserId;
}
- (UInt32) userId {
  return resultImusersInfoRsp.userId;
}
- (IMUsersInfoRspBuilder*) setUserId:(UInt32) value {
  resultImusersInfoRsp.hasUserId = YES;
  resultImusersInfoRsp.userId = value;
  return self;
}
- (IMUsersInfoRspBuilder*) clearUserId {
  resultImusersInfoRsp.hasUserId = NO;
  resultImusersInfoRsp.userId = 0;
  return self;
}
- (NSMutableArray *)userInfoList {
  return resultImusersInfoRsp.userInfoListArray;
}
- (UserInfo*)userInfoListAtIndex:(NSUInteger)index {
  return [resultImusersInfoRsp userInfoListAtIndex:index];
}
- (IMUsersInfoRspBuilder *)addUserInfoList:(UserInfo*)value {
  if (resultImusersInfoRsp.userInfoListArray == nil) {
    resultImusersInfoRsp.userInfoListArray = [[NSMutableArray alloc]init];
  }
  [resultImusersInfoRsp.userInfoListArray addObject:value];
  return self;
}
- (IMUsersInfoRspBuilder *)setUserInfoListArray:(NSArray *)array {
  resultImusersInfoRsp.userInfoListArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (IMUsersInfoRspBuilder *)clearUserInfoList {
  resultImusersInfoRsp.userInfoListArray = nil;
  return self;
}
- (BOOL) hasAttachData {
  return resultImusersInfoRsp.hasAttachData;
}
- (NSData*) attachData {
  return resultImusersInfoRsp.attachData;
}
- (IMUsersInfoRspBuilder*) setAttachData:(NSData*) value {
  resultImusersInfoRsp.hasAttachData = YES;
  resultImusersInfoRsp.attachData = value;
  return self;
}
- (IMUsersInfoRspBuilder*) clearAttachData {
  resultImusersInfoRsp.hasAttachData = NO;
  resultImusersInfoRsp.attachData = [NSData data];
  return self;
}
@end

@interface IMRemoveSessionReq ()
@property UInt32 userId;
@property SessionType sessionType;
@property UInt32 sessionId;
@property (strong) NSData* attachData;
@end

@implementation IMRemoveSessionReq

- (BOOL) hasUserId {
  return !!hasUserId_;
}
- (void) setHasUserId:(BOOL) _value_ {
  hasUserId_ = !!_value_;
}
@synthesize userId;
- (BOOL) hasSessionType {
  return !!hasSessionType_;
}
- (void) setHasSessionType:(BOOL) _value_ {
  hasSessionType_ = !!_value_;
}
@synthesize sessionType;
- (BOOL) hasSessionId {
  return !!hasSessionId_;
}
- (void) setHasSessionId:(BOOL) _value_ {
  hasSessionId_ = !!_value_;
}
@synthesize sessionId;
- (BOOL) hasAttachData {
  return !!hasAttachData_;
}
- (void) setHasAttachData:(BOOL) _value_ {
  hasAttachData_ = !!_value_;
}
@synthesize attachData;
- (instancetype) init {
  if ((self = [super init])) {
    self.userId = 0;
    self.sessionType = SessionTypeSessionTypeSingle;
    self.sessionId = 0;
    self.attachData = [NSData data];
  }
  return self;
}
static IMRemoveSessionReq* defaultIMRemoveSessionReqInstance = nil;
+ (void) initialize {
  if (self == [IMRemoveSessionReq class]) {
    defaultIMRemoveSessionReqInstance = [[IMRemoveSessionReq alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultIMRemoveSessionReqInstance;
}
- (instancetype) defaultInstance {
  return defaultIMRemoveSessionReqInstance;
}
- (BOOL) isInitialized {
  if (!self.hasUserId) {
    return NO;
  }
  if (!self.hasSessionType) {
    return NO;
  }
  if (!self.hasSessionId) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasUserId) {
    [output writeUInt32:1 value:self.userId];
  }
  if (self.hasSessionType) {
    [output writeEnum:2 value:self.sessionType];
  }
  if (self.hasSessionId) {
    [output writeUInt32:3 value:self.sessionId];
  }
  if (self.hasAttachData) {
    [output writeData:20 value:self.attachData];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasUserId) {
    size_ += computeUInt32Size(1, self.userId);
  }
  if (self.hasSessionType) {
    size_ += computeEnumSize(2, self.sessionType);
  }
  if (self.hasSessionId) {
    size_ += computeUInt32Size(3, self.sessionId);
  }
  if (self.hasAttachData) {
    size_ += computeDataSize(20, self.attachData);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (IMRemoveSessionReq*) parseFromData:(NSData*) data {
  return (IMRemoveSessionReq*)[[[IMRemoveSessionReq builder] mergeFromData:data] build];
}
+ (IMRemoveSessionReq*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMRemoveSessionReq*)[[[IMRemoveSessionReq builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (IMRemoveSessionReq*) parseFromInputStream:(NSInputStream*) input {
  return (IMRemoveSessionReq*)[[[IMRemoveSessionReq builder] mergeFromInputStream:input] build];
}
+ (IMRemoveSessionReq*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMRemoveSessionReq*)[[[IMRemoveSessionReq builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (IMRemoveSessionReq*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (IMRemoveSessionReq*)[[[IMRemoveSessionReq builder] mergeFromCodedInputStream:input] build];
}
+ (IMRemoveSessionReq*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMRemoveSessionReq*)[[[IMRemoveSessionReq builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (IMRemoveSessionReqBuilder*) builder {
  return [[IMRemoveSessionReqBuilder alloc] init];
}
+ (IMRemoveSessionReqBuilder*) builderWithPrototype:(IMRemoveSessionReq*) prototype {
  return [[IMRemoveSessionReq builder] mergeFrom:prototype];
}
- (IMRemoveSessionReqBuilder*) builder {
  return [IMRemoveSessionReq builder];
}
- (IMRemoveSessionReqBuilder*) toBuilder {
  return [IMRemoveSessionReq builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasUserId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"userId", [NSNumber numberWithInteger:self.userId]];
  }
  if (self.hasSessionType) {
    [output appendFormat:@"%@%@: %@\n", indent, @"sessionType", NSStringFromSessionType(self.sessionType)];
  }
  if (self.hasSessionId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"sessionId", [NSNumber numberWithInteger:self.sessionId]];
  }
  if (self.hasAttachData) {
    [output appendFormat:@"%@%@: %@\n", indent, @"attachData", self.attachData];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasUserId) {
    [dictionary setObject: [NSNumber numberWithInteger:self.userId] forKey: @"userId"];
  }
  if (self.hasSessionType) {
    [dictionary setObject: @(self.sessionType) forKey: @"sessionType"];
  }
  if (self.hasSessionId) {
    [dictionary setObject: [NSNumber numberWithInteger:self.sessionId] forKey: @"sessionId"];
  }
  if (self.hasAttachData) {
    [dictionary setObject: self.attachData forKey: @"attachData"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[IMRemoveSessionReq class]]) {
    return NO;
  }
  IMRemoveSessionReq *otherMessage = other;
  return
      self.hasUserId == otherMessage.hasUserId &&
      (!self.hasUserId || self.userId == otherMessage.userId) &&
      self.hasSessionType == otherMessage.hasSessionType &&
      (!self.hasSessionType || self.sessionType == otherMessage.sessionType) &&
      self.hasSessionId == otherMessage.hasSessionId &&
      (!self.hasSessionId || self.sessionId == otherMessage.sessionId) &&
      self.hasAttachData == otherMessage.hasAttachData &&
      (!self.hasAttachData || [self.attachData isEqual:otherMessage.attachData]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasUserId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.userId] hash];
  }
  if (self.hasSessionType) {
    hashCode = hashCode * 31 + self.sessionType;
  }
  if (self.hasSessionId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.sessionId] hash];
  }
  if (self.hasAttachData) {
    hashCode = hashCode * 31 + [self.attachData hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface IMRemoveSessionReqBuilder()
@property (strong) IMRemoveSessionReq* resultImremoveSessionReq;
@end

@implementation IMRemoveSessionReqBuilder
@synthesize resultImremoveSessionReq;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultImremoveSessionReq = [[IMRemoveSessionReq alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultImremoveSessionReq;
}
- (IMRemoveSessionReqBuilder*) clear {
  self.resultImremoveSessionReq = [[IMRemoveSessionReq alloc] init];
  return self;
}
- (IMRemoveSessionReqBuilder*) clone {
  return [IMRemoveSessionReq builderWithPrototype:resultImremoveSessionReq];
}
- (IMRemoveSessionReq*) defaultInstance {
  return [IMRemoveSessionReq defaultInstance];
}
- (IMRemoveSessionReq*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (IMRemoveSessionReq*) buildPartial {
  IMRemoveSessionReq* returnMe = resultImremoveSessionReq;
  self.resultImremoveSessionReq = nil;
  return returnMe;
}
- (IMRemoveSessionReqBuilder*) mergeFrom:(IMRemoveSessionReq*) other {
  if (other == [IMRemoveSessionReq defaultInstance]) {
    return self;
  }
  if (other.hasUserId) {
    [self setUserId:other.userId];
  }
  if (other.hasSessionType) {
    [self setSessionType:other.sessionType];
  }
  if (other.hasSessionId) {
    [self setSessionId:other.sessionId];
  }
  if (other.hasAttachData) {
    [self setAttachData:other.attachData];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (IMRemoveSessionReqBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (IMRemoveSessionReqBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setUserId:[input readUInt32]];
        break;
      }
      case 16: {
        SessionType value = (SessionType)[input readEnum];
        if (SessionTypeIsValidValue(value)) {
          [self setSessionType:value];
        } else {
          [unknownFields mergeVarintField:2 value:value];
        }
        break;
      }
      case 24: {
        [self setSessionId:[input readUInt32]];
        break;
      }
      case 162: {
        [self setAttachData:[input readData]];
        break;
      }
    }
  }
}
- (BOOL) hasUserId {
  return resultImremoveSessionReq.hasUserId;
}
- (UInt32) userId {
  return resultImremoveSessionReq.userId;
}
- (IMRemoveSessionReqBuilder*) setUserId:(UInt32) value {
  resultImremoveSessionReq.hasUserId = YES;
  resultImremoveSessionReq.userId = value;
  return self;
}
- (IMRemoveSessionReqBuilder*) clearUserId {
  resultImremoveSessionReq.hasUserId = NO;
  resultImremoveSessionReq.userId = 0;
  return self;
}
- (BOOL) hasSessionType {
  return resultImremoveSessionReq.hasSessionType;
}
- (SessionType) sessionType {
  return resultImremoveSessionReq.sessionType;
}
- (IMRemoveSessionReqBuilder*) setSessionType:(SessionType) value {
  resultImremoveSessionReq.hasSessionType = YES;
  resultImremoveSessionReq.sessionType = value;
  return self;
}
- (IMRemoveSessionReqBuilder*) clearSessionType {
  resultImremoveSessionReq.hasSessionType = NO;
  resultImremoveSessionReq.sessionType = SessionTypeSessionTypeSingle;
  return self;
}
- (BOOL) hasSessionId {
  return resultImremoveSessionReq.hasSessionId;
}
- (UInt32) sessionId {
  return resultImremoveSessionReq.sessionId;
}
- (IMRemoveSessionReqBuilder*) setSessionId:(UInt32) value {
  resultImremoveSessionReq.hasSessionId = YES;
  resultImremoveSessionReq.sessionId = value;
  return self;
}
- (IMRemoveSessionReqBuilder*) clearSessionId {
  resultImremoveSessionReq.hasSessionId = NO;
  resultImremoveSessionReq.sessionId = 0;
  return self;
}
- (BOOL) hasAttachData {
  return resultImremoveSessionReq.hasAttachData;
}
- (NSData*) attachData {
  return resultImremoveSessionReq.attachData;
}
- (IMRemoveSessionReqBuilder*) setAttachData:(NSData*) value {
  resultImremoveSessionReq.hasAttachData = YES;
  resultImremoveSessionReq.attachData = value;
  return self;
}
- (IMRemoveSessionReqBuilder*) clearAttachData {
  resultImremoveSessionReq.hasAttachData = NO;
  resultImremoveSessionReq.attachData = [NSData data];
  return self;
}
@end

@interface IMRemoveSessionRsp ()
@property UInt32 userId;
@property UInt32 resultCode;
@property SessionType sessionType;
@property UInt32 sessionId;
@property (strong) NSData* attachData;
@end

@implementation IMRemoveSessionRsp

- (BOOL) hasUserId {
  return !!hasUserId_;
}
- (void) setHasUserId:(BOOL) _value_ {
  hasUserId_ = !!_value_;
}
@synthesize userId;
- (BOOL) hasResultCode {
  return !!hasResultCode_;
}
- (void) setHasResultCode:(BOOL) _value_ {
  hasResultCode_ = !!_value_;
}
@synthesize resultCode;
- (BOOL) hasSessionType {
  return !!hasSessionType_;
}
- (void) setHasSessionType:(BOOL) _value_ {
  hasSessionType_ = !!_value_;
}
@synthesize sessionType;
- (BOOL) hasSessionId {
  return !!hasSessionId_;
}
- (void) setHasSessionId:(BOOL) _value_ {
  hasSessionId_ = !!_value_;
}
@synthesize sessionId;
- (BOOL) hasAttachData {
  return !!hasAttachData_;
}
- (void) setHasAttachData:(BOOL) _value_ {
  hasAttachData_ = !!_value_;
}
@synthesize attachData;
- (instancetype) init {
  if ((self = [super init])) {
    self.userId = 0;
    self.resultCode = 0;
    self.sessionType = SessionTypeSessionTypeSingle;
    self.sessionId = 0;
    self.attachData = [NSData data];
  }
  return self;
}
static IMRemoveSessionRsp* defaultIMRemoveSessionRspInstance = nil;
+ (void) initialize {
  if (self == [IMRemoveSessionRsp class]) {
    defaultIMRemoveSessionRspInstance = [[IMRemoveSessionRsp alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultIMRemoveSessionRspInstance;
}
- (instancetype) defaultInstance {
  return defaultIMRemoveSessionRspInstance;
}
- (BOOL) isInitialized {
  if (!self.hasUserId) {
    return NO;
  }
  if (!self.hasResultCode) {
    return NO;
  }
  if (!self.hasSessionType) {
    return NO;
  }
  if (!self.hasSessionId) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasUserId) {
    [output writeUInt32:1 value:self.userId];
  }
  if (self.hasResultCode) {
    [output writeUInt32:2 value:self.resultCode];
  }
  if (self.hasSessionType) {
    [output writeEnum:3 value:self.sessionType];
  }
  if (self.hasSessionId) {
    [output writeUInt32:4 value:self.sessionId];
  }
  if (self.hasAttachData) {
    [output writeData:20 value:self.attachData];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasUserId) {
    size_ += computeUInt32Size(1, self.userId);
  }
  if (self.hasResultCode) {
    size_ += computeUInt32Size(2, self.resultCode);
  }
  if (self.hasSessionType) {
    size_ += computeEnumSize(3, self.sessionType);
  }
  if (self.hasSessionId) {
    size_ += computeUInt32Size(4, self.sessionId);
  }
  if (self.hasAttachData) {
    size_ += computeDataSize(20, self.attachData);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (IMRemoveSessionRsp*) parseFromData:(NSData*) data {
  return (IMRemoveSessionRsp*)[[[IMRemoveSessionRsp builder] mergeFromData:data] build];
}
+ (IMRemoveSessionRsp*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMRemoveSessionRsp*)[[[IMRemoveSessionRsp builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (IMRemoveSessionRsp*) parseFromInputStream:(NSInputStream*) input {
  return (IMRemoveSessionRsp*)[[[IMRemoveSessionRsp builder] mergeFromInputStream:input] build];
}
+ (IMRemoveSessionRsp*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMRemoveSessionRsp*)[[[IMRemoveSessionRsp builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (IMRemoveSessionRsp*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (IMRemoveSessionRsp*)[[[IMRemoveSessionRsp builder] mergeFromCodedInputStream:input] build];
}
+ (IMRemoveSessionRsp*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMRemoveSessionRsp*)[[[IMRemoveSessionRsp builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (IMRemoveSessionRspBuilder*) builder {
  return [[IMRemoveSessionRspBuilder alloc] init];
}
+ (IMRemoveSessionRspBuilder*) builderWithPrototype:(IMRemoveSessionRsp*) prototype {
  return [[IMRemoveSessionRsp builder] mergeFrom:prototype];
}
- (IMRemoveSessionRspBuilder*) builder {
  return [IMRemoveSessionRsp builder];
}
- (IMRemoveSessionRspBuilder*) toBuilder {
  return [IMRemoveSessionRsp builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasUserId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"userId", [NSNumber numberWithInteger:self.userId]];
  }
  if (self.hasResultCode) {
    [output appendFormat:@"%@%@: %@\n", indent, @"resultCode", [NSNumber numberWithInteger:self.resultCode]];
  }
  if (self.hasSessionType) {
    [output appendFormat:@"%@%@: %@\n", indent, @"sessionType", NSStringFromSessionType(self.sessionType)];
  }
  if (self.hasSessionId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"sessionId", [NSNumber numberWithInteger:self.sessionId]];
  }
  if (self.hasAttachData) {
    [output appendFormat:@"%@%@: %@\n", indent, @"attachData", self.attachData];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasUserId) {
    [dictionary setObject: [NSNumber numberWithInteger:self.userId] forKey: @"userId"];
  }
  if (self.hasResultCode) {
    [dictionary setObject: [NSNumber numberWithInteger:self.resultCode] forKey: @"resultCode"];
  }
  if (self.hasSessionType) {
    [dictionary setObject: @(self.sessionType) forKey: @"sessionType"];
  }
  if (self.hasSessionId) {
    [dictionary setObject: [NSNumber numberWithInteger:self.sessionId] forKey: @"sessionId"];
  }
  if (self.hasAttachData) {
    [dictionary setObject: self.attachData forKey: @"attachData"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[IMRemoveSessionRsp class]]) {
    return NO;
  }
  IMRemoveSessionRsp *otherMessage = other;
  return
      self.hasUserId == otherMessage.hasUserId &&
      (!self.hasUserId || self.userId == otherMessage.userId) &&
      self.hasResultCode == otherMessage.hasResultCode &&
      (!self.hasResultCode || self.resultCode == otherMessage.resultCode) &&
      self.hasSessionType == otherMessage.hasSessionType &&
      (!self.hasSessionType || self.sessionType == otherMessage.sessionType) &&
      self.hasSessionId == otherMessage.hasSessionId &&
      (!self.hasSessionId || self.sessionId == otherMessage.sessionId) &&
      self.hasAttachData == otherMessage.hasAttachData &&
      (!self.hasAttachData || [self.attachData isEqual:otherMessage.attachData]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasUserId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.userId] hash];
  }
  if (self.hasResultCode) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.resultCode] hash];
  }
  if (self.hasSessionType) {
    hashCode = hashCode * 31 + self.sessionType;
  }
  if (self.hasSessionId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.sessionId] hash];
  }
  if (self.hasAttachData) {
    hashCode = hashCode * 31 + [self.attachData hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface IMRemoveSessionRspBuilder()
@property (strong) IMRemoveSessionRsp* resultImremoveSessionRsp;
@end

@implementation IMRemoveSessionRspBuilder
@synthesize resultImremoveSessionRsp;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultImremoveSessionRsp = [[IMRemoveSessionRsp alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultImremoveSessionRsp;
}
- (IMRemoveSessionRspBuilder*) clear {
  self.resultImremoveSessionRsp = [[IMRemoveSessionRsp alloc] init];
  return self;
}
- (IMRemoveSessionRspBuilder*) clone {
  return [IMRemoveSessionRsp builderWithPrototype:resultImremoveSessionRsp];
}
- (IMRemoveSessionRsp*) defaultInstance {
  return [IMRemoveSessionRsp defaultInstance];
}
- (IMRemoveSessionRsp*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (IMRemoveSessionRsp*) buildPartial {
  IMRemoveSessionRsp* returnMe = resultImremoveSessionRsp;
  self.resultImremoveSessionRsp = nil;
  return returnMe;
}
- (IMRemoveSessionRspBuilder*) mergeFrom:(IMRemoveSessionRsp*) other {
  if (other == [IMRemoveSessionRsp defaultInstance]) {
    return self;
  }
  if (other.hasUserId) {
    [self setUserId:other.userId];
  }
  if (other.hasResultCode) {
    [self setResultCode:other.resultCode];
  }
  if (other.hasSessionType) {
    [self setSessionType:other.sessionType];
  }
  if (other.hasSessionId) {
    [self setSessionId:other.sessionId];
  }
  if (other.hasAttachData) {
    [self setAttachData:other.attachData];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (IMRemoveSessionRspBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (IMRemoveSessionRspBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setUserId:[input readUInt32]];
        break;
      }
      case 16: {
        [self setResultCode:[input readUInt32]];
        break;
      }
      case 24: {
        SessionType value = (SessionType)[input readEnum];
        if (SessionTypeIsValidValue(value)) {
          [self setSessionType:value];
        } else {
          [unknownFields mergeVarintField:3 value:value];
        }
        break;
      }
      case 32: {
        [self setSessionId:[input readUInt32]];
        break;
      }
      case 162: {
        [self setAttachData:[input readData]];
        break;
      }
    }
  }
}
- (BOOL) hasUserId {
  return resultImremoveSessionRsp.hasUserId;
}
- (UInt32) userId {
  return resultImremoveSessionRsp.userId;
}
- (IMRemoveSessionRspBuilder*) setUserId:(UInt32) value {
  resultImremoveSessionRsp.hasUserId = YES;
  resultImremoveSessionRsp.userId = value;
  return self;
}
- (IMRemoveSessionRspBuilder*) clearUserId {
  resultImremoveSessionRsp.hasUserId = NO;
  resultImremoveSessionRsp.userId = 0;
  return self;
}
- (BOOL) hasResultCode {
  return resultImremoveSessionRsp.hasResultCode;
}
- (UInt32) resultCode {
  return resultImremoveSessionRsp.resultCode;
}
- (IMRemoveSessionRspBuilder*) setResultCode:(UInt32) value {
  resultImremoveSessionRsp.hasResultCode = YES;
  resultImremoveSessionRsp.resultCode = value;
  return self;
}
- (IMRemoveSessionRspBuilder*) clearResultCode {
  resultImremoveSessionRsp.hasResultCode = NO;
  resultImremoveSessionRsp.resultCode = 0;
  return self;
}
- (BOOL) hasSessionType {
  return resultImremoveSessionRsp.hasSessionType;
}
- (SessionType) sessionType {
  return resultImremoveSessionRsp.sessionType;
}
- (IMRemoveSessionRspBuilder*) setSessionType:(SessionType) value {
  resultImremoveSessionRsp.hasSessionType = YES;
  resultImremoveSessionRsp.sessionType = value;
  return self;
}
- (IMRemoveSessionRspBuilder*) clearSessionType {
  resultImremoveSessionRsp.hasSessionType = NO;
  resultImremoveSessionRsp.sessionType = SessionTypeSessionTypeSingle;
  return self;
}
- (BOOL) hasSessionId {
  return resultImremoveSessionRsp.hasSessionId;
}
- (UInt32) sessionId {
  return resultImremoveSessionRsp.sessionId;
}
- (IMRemoveSessionRspBuilder*) setSessionId:(UInt32) value {
  resultImremoveSessionRsp.hasSessionId = YES;
  resultImremoveSessionRsp.sessionId = value;
  return self;
}
- (IMRemoveSessionRspBuilder*) clearSessionId {
  resultImremoveSessionRsp.hasSessionId = NO;
  resultImremoveSessionRsp.sessionId = 0;
  return self;
}
- (BOOL) hasAttachData {
  return resultImremoveSessionRsp.hasAttachData;
}
- (NSData*) attachData {
  return resultImremoveSessionRsp.attachData;
}
- (IMRemoveSessionRspBuilder*) setAttachData:(NSData*) value {
  resultImremoveSessionRsp.hasAttachData = YES;
  resultImremoveSessionRsp.attachData = value;
  return self;
}
- (IMRemoveSessionRspBuilder*) clearAttachData {
  resultImremoveSessionRsp.hasAttachData = NO;
  resultImremoveSessionRsp.attachData = [NSData data];
  return self;
}
@end

@interface IMAllUserReq ()
@property UInt32 userId;
@property UInt32 latestUpdateTime;
@property (strong) NSData* attachData;
@end

@implementation IMAllUserReq

- (BOOL) hasUserId {
  return !!hasUserId_;
}
- (void) setHasUserId:(BOOL) _value_ {
  hasUserId_ = !!_value_;
}
@synthesize userId;
- (BOOL) hasLatestUpdateTime {
  return !!hasLatestUpdateTime_;
}
- (void) setHasLatestUpdateTime:(BOOL) _value_ {
  hasLatestUpdateTime_ = !!_value_;
}
@synthesize latestUpdateTime;
- (BOOL) hasAttachData {
  return !!hasAttachData_;
}
- (void) setHasAttachData:(BOOL) _value_ {
  hasAttachData_ = !!_value_;
}
@synthesize attachData;
- (instancetype) init {
  if ((self = [super init])) {
    self.userId = 0;
    self.latestUpdateTime = 0;
    self.attachData = [NSData data];
  }
  return self;
}
static IMAllUserReq* defaultIMAllUserReqInstance = nil;
+ (void) initialize {
  if (self == [IMAllUserReq class]) {
    defaultIMAllUserReqInstance = [[IMAllUserReq alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultIMAllUserReqInstance;
}
- (instancetype) defaultInstance {
  return defaultIMAllUserReqInstance;
}
- (BOOL) isInitialized {
  if (!self.hasUserId) {
    return NO;
  }
  if (!self.hasLatestUpdateTime) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasUserId) {
    [output writeUInt32:1 value:self.userId];
  }
  if (self.hasLatestUpdateTime) {
    [output writeUInt32:2 value:self.latestUpdateTime];
  }
  if (self.hasAttachData) {
    [output writeData:20 value:self.attachData];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasUserId) {
    size_ += computeUInt32Size(1, self.userId);
  }
  if (self.hasLatestUpdateTime) {
    size_ += computeUInt32Size(2, self.latestUpdateTime);
  }
  if (self.hasAttachData) {
    size_ += computeDataSize(20, self.attachData);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (IMAllUserReq*) parseFromData:(NSData*) data {
  return (IMAllUserReq*)[[[IMAllUserReq builder] mergeFromData:data] build];
}
+ (IMAllUserReq*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMAllUserReq*)[[[IMAllUserReq builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (IMAllUserReq*) parseFromInputStream:(NSInputStream*) input {
  return (IMAllUserReq*)[[[IMAllUserReq builder] mergeFromInputStream:input] build];
}
+ (IMAllUserReq*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMAllUserReq*)[[[IMAllUserReq builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (IMAllUserReq*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (IMAllUserReq*)[[[IMAllUserReq builder] mergeFromCodedInputStream:input] build];
}
+ (IMAllUserReq*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMAllUserReq*)[[[IMAllUserReq builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (IMAllUserReqBuilder*) builder {
  return [[IMAllUserReqBuilder alloc] init];
}
+ (IMAllUserReqBuilder*) builderWithPrototype:(IMAllUserReq*) prototype {
  return [[IMAllUserReq builder] mergeFrom:prototype];
}
- (IMAllUserReqBuilder*) builder {
  return [IMAllUserReq builder];
}
- (IMAllUserReqBuilder*) toBuilder {
  return [IMAllUserReq builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasUserId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"userId", [NSNumber numberWithInteger:self.userId]];
  }
  if (self.hasLatestUpdateTime) {
    [output appendFormat:@"%@%@: %@\n", indent, @"latestUpdateTime", [NSNumber numberWithInteger:self.latestUpdateTime]];
  }
  if (self.hasAttachData) {
    [output appendFormat:@"%@%@: %@\n", indent, @"attachData", self.attachData];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasUserId) {
    [dictionary setObject: [NSNumber numberWithInteger:self.userId] forKey: @"userId"];
  }
  if (self.hasLatestUpdateTime) {
    [dictionary setObject: [NSNumber numberWithInteger:self.latestUpdateTime] forKey: @"latestUpdateTime"];
  }
  if (self.hasAttachData) {
    [dictionary setObject: self.attachData forKey: @"attachData"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[IMAllUserReq class]]) {
    return NO;
  }
  IMAllUserReq *otherMessage = other;
  return
      self.hasUserId == otherMessage.hasUserId &&
      (!self.hasUserId || self.userId == otherMessage.userId) &&
      self.hasLatestUpdateTime == otherMessage.hasLatestUpdateTime &&
      (!self.hasLatestUpdateTime || self.latestUpdateTime == otherMessage.latestUpdateTime) &&
      self.hasAttachData == otherMessage.hasAttachData &&
      (!self.hasAttachData || [self.attachData isEqual:otherMessage.attachData]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasUserId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.userId] hash];
  }
  if (self.hasLatestUpdateTime) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.latestUpdateTime] hash];
  }
  if (self.hasAttachData) {
    hashCode = hashCode * 31 + [self.attachData hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface IMAllUserReqBuilder()
@property (strong) IMAllUserReq* resultImallUserReq;
@end

@implementation IMAllUserReqBuilder
@synthesize resultImallUserReq;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultImallUserReq = [[IMAllUserReq alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultImallUserReq;
}
- (IMAllUserReqBuilder*) clear {
  self.resultImallUserReq = [[IMAllUserReq alloc] init];
  return self;
}
- (IMAllUserReqBuilder*) clone {
  return [IMAllUserReq builderWithPrototype:resultImallUserReq];
}
- (IMAllUserReq*) defaultInstance {
  return [IMAllUserReq defaultInstance];
}
- (IMAllUserReq*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (IMAllUserReq*) buildPartial {
  IMAllUserReq* returnMe = resultImallUserReq;
  self.resultImallUserReq = nil;
  return returnMe;
}
- (IMAllUserReqBuilder*) mergeFrom:(IMAllUserReq*) other {
  if (other == [IMAllUserReq defaultInstance]) {
    return self;
  }
  if (other.hasUserId) {
    [self setUserId:other.userId];
  }
  if (other.hasLatestUpdateTime) {
    [self setLatestUpdateTime:other.latestUpdateTime];
  }
  if (other.hasAttachData) {
    [self setAttachData:other.attachData];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (IMAllUserReqBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (IMAllUserReqBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setUserId:[input readUInt32]];
        break;
      }
      case 16: {
        [self setLatestUpdateTime:[input readUInt32]];
        break;
      }
      case 162: {
        [self setAttachData:[input readData]];
        break;
      }
    }
  }
}
- (BOOL) hasUserId {
  return resultImallUserReq.hasUserId;
}
- (UInt32) userId {
  return resultImallUserReq.userId;
}
- (IMAllUserReqBuilder*) setUserId:(UInt32) value {
  resultImallUserReq.hasUserId = YES;
  resultImallUserReq.userId = value;
  return self;
}
- (IMAllUserReqBuilder*) clearUserId {
  resultImallUserReq.hasUserId = NO;
  resultImallUserReq.userId = 0;
  return self;
}
- (BOOL) hasLatestUpdateTime {
  return resultImallUserReq.hasLatestUpdateTime;
}
- (UInt32) latestUpdateTime {
  return resultImallUserReq.latestUpdateTime;
}
- (IMAllUserReqBuilder*) setLatestUpdateTime:(UInt32) value {
  resultImallUserReq.hasLatestUpdateTime = YES;
  resultImallUserReq.latestUpdateTime = value;
  return self;
}
- (IMAllUserReqBuilder*) clearLatestUpdateTime {
  resultImallUserReq.hasLatestUpdateTime = NO;
  resultImallUserReq.latestUpdateTime = 0;
  return self;
}
- (BOOL) hasAttachData {
  return resultImallUserReq.hasAttachData;
}
- (NSData*) attachData {
  return resultImallUserReq.attachData;
}
- (IMAllUserReqBuilder*) setAttachData:(NSData*) value {
  resultImallUserReq.hasAttachData = YES;
  resultImallUserReq.attachData = value;
  return self;
}
- (IMAllUserReqBuilder*) clearAttachData {
  resultImallUserReq.hasAttachData = NO;
  resultImallUserReq.attachData = [NSData data];
  return self;
}
@end

@interface IMAllUserRsp ()
@property UInt32 userId;
@property UInt32 latestUpdateTime;
@property (strong) NSMutableArray * userListArray;
@property (strong) NSData* attachData;
@end

@implementation IMAllUserRsp

- (BOOL) hasUserId {
  return !!hasUserId_;
}
- (void) setHasUserId:(BOOL) _value_ {
  hasUserId_ = !!_value_;
}
@synthesize userId;
- (BOOL) hasLatestUpdateTime {
  return !!hasLatestUpdateTime_;
}
- (void) setHasLatestUpdateTime:(BOOL) _value_ {
  hasLatestUpdateTime_ = !!_value_;
}
@synthesize latestUpdateTime;
@synthesize userListArray;
@dynamic userList;
- (BOOL) hasAttachData {
  return !!hasAttachData_;
}
- (void) setHasAttachData:(BOOL) _value_ {
  hasAttachData_ = !!_value_;
}
@synthesize attachData;
- (instancetype) init {
  if ((self = [super init])) {
    self.userId = 0;
    self.latestUpdateTime = 0;
    self.attachData = [NSData data];
  }
  return self;
}
static IMAllUserRsp* defaultIMAllUserRspInstance = nil;
+ (void) initialize {
  if (self == [IMAllUserRsp class]) {
    defaultIMAllUserRspInstance = [[IMAllUserRsp alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultIMAllUserRspInstance;
}
- (instancetype) defaultInstance {
  return defaultIMAllUserRspInstance;
}
- (NSArray *)userList {
  return userListArray;
}
- (UserInfo*)userListAtIndex:(NSUInteger)index {
  return [userListArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  if (!self.hasUserId) {
    return NO;
  }
  if (!self.hasLatestUpdateTime) {
    return NO;
  }
  __block BOOL isInituserList = YES;
   [self.userList enumerateObjectsUsingBlock:^(UserInfo *element, NSUInteger idx, BOOL *stop) {
    if (!element.isInitialized) {
      isInituserList = NO;
      *stop = YES;
    }
  }];
  if (!isInituserList) return isInituserList;
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasUserId) {
    [output writeUInt32:1 value:self.userId];
  }
  if (self.hasLatestUpdateTime) {
    [output writeUInt32:2 value:self.latestUpdateTime];
  }
  [self.userListArray enumerateObjectsUsingBlock:^(UserInfo *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:3 value:element];
  }];
  if (self.hasAttachData) {
    [output writeData:20 value:self.attachData];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasUserId) {
    size_ += computeUInt32Size(1, self.userId);
  }
  if (self.hasLatestUpdateTime) {
    size_ += computeUInt32Size(2, self.latestUpdateTime);
  }
  [self.userListArray enumerateObjectsUsingBlock:^(UserInfo *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(3, element);
  }];
  if (self.hasAttachData) {
    size_ += computeDataSize(20, self.attachData);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (IMAllUserRsp*) parseFromData:(NSData*) data {
  return (IMAllUserRsp*)[[[IMAllUserRsp builder] mergeFromData:data] build];
}
+ (IMAllUserRsp*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMAllUserRsp*)[[[IMAllUserRsp builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (IMAllUserRsp*) parseFromInputStream:(NSInputStream*) input {
  return (IMAllUserRsp*)[[[IMAllUserRsp builder] mergeFromInputStream:input] build];
}
+ (IMAllUserRsp*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMAllUserRsp*)[[[IMAllUserRsp builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (IMAllUserRsp*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (IMAllUserRsp*)[[[IMAllUserRsp builder] mergeFromCodedInputStream:input] build];
}
+ (IMAllUserRsp*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMAllUserRsp*)[[[IMAllUserRsp builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (IMAllUserRspBuilder*) builder {
  return [[IMAllUserRspBuilder alloc] init];
}
+ (IMAllUserRspBuilder*) builderWithPrototype:(IMAllUserRsp*) prototype {
  return [[IMAllUserRsp builder] mergeFrom:prototype];
}
- (IMAllUserRspBuilder*) builder {
  return [IMAllUserRsp builder];
}
- (IMAllUserRspBuilder*) toBuilder {
  return [IMAllUserRsp builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasUserId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"userId", [NSNumber numberWithInteger:self.userId]];
  }
  if (self.hasLatestUpdateTime) {
    [output appendFormat:@"%@%@: %@\n", indent, @"latestUpdateTime", [NSNumber numberWithInteger:self.latestUpdateTime]];
  }
  [self.userListArray enumerateObjectsUsingBlock:^(UserInfo *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"userList"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  if (self.hasAttachData) {
    [output appendFormat:@"%@%@: %@\n", indent, @"attachData", self.attachData];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasUserId) {
    [dictionary setObject: [NSNumber numberWithInteger:self.userId] forKey: @"userId"];
  }
  if (self.hasLatestUpdateTime) {
    [dictionary setObject: [NSNumber numberWithInteger:self.latestUpdateTime] forKey: @"latestUpdateTime"];
  }
  for (UserInfo* element in self.userListArray) {
    NSMutableDictionary *elementDictionary = [NSMutableDictionary dictionary];
    [element storeInDictionary:elementDictionary];
    [dictionary setObject:[NSDictionary dictionaryWithDictionary:elementDictionary] forKey:@"userList"];
  }
  if (self.hasAttachData) {
    [dictionary setObject: self.attachData forKey: @"attachData"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[IMAllUserRsp class]]) {
    return NO;
  }
  IMAllUserRsp *otherMessage = other;
  return
      self.hasUserId == otherMessage.hasUserId &&
      (!self.hasUserId || self.userId == otherMessage.userId) &&
      self.hasLatestUpdateTime == otherMessage.hasLatestUpdateTime &&
      (!self.hasLatestUpdateTime || self.latestUpdateTime == otherMessage.latestUpdateTime) &&
      [self.userListArray isEqualToArray:otherMessage.userListArray] &&
      self.hasAttachData == otherMessage.hasAttachData &&
      (!self.hasAttachData || [self.attachData isEqual:otherMessage.attachData]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasUserId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.userId] hash];
  }
  if (self.hasLatestUpdateTime) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.latestUpdateTime] hash];
  }
  [self.userListArray enumerateObjectsUsingBlock:^(UserInfo *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  if (self.hasAttachData) {
    hashCode = hashCode * 31 + [self.attachData hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface IMAllUserRspBuilder()
@property (strong) IMAllUserRsp* resultImallUserRsp;
@end

@implementation IMAllUserRspBuilder
@synthesize resultImallUserRsp;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultImallUserRsp = [[IMAllUserRsp alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultImallUserRsp;
}
- (IMAllUserRspBuilder*) clear {
  self.resultImallUserRsp = [[IMAllUserRsp alloc] init];
  return self;
}
- (IMAllUserRspBuilder*) clone {
  return [IMAllUserRsp builderWithPrototype:resultImallUserRsp];
}
- (IMAllUserRsp*) defaultInstance {
  return [IMAllUserRsp defaultInstance];
}
- (IMAllUserRsp*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (IMAllUserRsp*) buildPartial {
  IMAllUserRsp* returnMe = resultImallUserRsp;
  self.resultImallUserRsp = nil;
  return returnMe;
}
- (IMAllUserRspBuilder*) mergeFrom:(IMAllUserRsp*) other {
  if (other == [IMAllUserRsp defaultInstance]) {
    return self;
  }
  if (other.hasUserId) {
    [self setUserId:other.userId];
  }
  if (other.hasLatestUpdateTime) {
    [self setLatestUpdateTime:other.latestUpdateTime];
  }
  if (other.userListArray.count > 0) {
    if (resultImallUserRsp.userListArray == nil) {
      resultImallUserRsp.userListArray = [[NSMutableArray alloc] initWithArray:other.userListArray];
    } else {
      [resultImallUserRsp.userListArray addObjectsFromArray:other.userListArray];
    }
  }
  if (other.hasAttachData) {
    [self setAttachData:other.attachData];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (IMAllUserRspBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (IMAllUserRspBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setUserId:[input readUInt32]];
        break;
      }
      case 16: {
        [self setLatestUpdateTime:[input readUInt32]];
        break;
      }
      case 26: {
        UserInfoBuilder* subBuilder = [UserInfo builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addUserList:[subBuilder buildPartial]];
        break;
      }
      case 162: {
        [self setAttachData:[input readData]];
        break;
      }
    }
  }
}
- (BOOL) hasUserId {
  return resultImallUserRsp.hasUserId;
}
- (UInt32) userId {
  return resultImallUserRsp.userId;
}
- (IMAllUserRspBuilder*) setUserId:(UInt32) value {
  resultImallUserRsp.hasUserId = YES;
  resultImallUserRsp.userId = value;
  return self;
}
- (IMAllUserRspBuilder*) clearUserId {
  resultImallUserRsp.hasUserId = NO;
  resultImallUserRsp.userId = 0;
  return self;
}
- (BOOL) hasLatestUpdateTime {
  return resultImallUserRsp.hasLatestUpdateTime;
}
- (UInt32) latestUpdateTime {
  return resultImallUserRsp.latestUpdateTime;
}
- (IMAllUserRspBuilder*) setLatestUpdateTime:(UInt32) value {
  resultImallUserRsp.hasLatestUpdateTime = YES;
  resultImallUserRsp.latestUpdateTime = value;
  return self;
}
- (IMAllUserRspBuilder*) clearLatestUpdateTime {
  resultImallUserRsp.hasLatestUpdateTime = NO;
  resultImallUserRsp.latestUpdateTime = 0;
  return self;
}
- (NSMutableArray *)userList {
  return resultImallUserRsp.userListArray;
}
- (UserInfo*)userListAtIndex:(NSUInteger)index {
  return [resultImallUserRsp userListAtIndex:index];
}
- (IMAllUserRspBuilder *)addUserList:(UserInfo*)value {
  if (resultImallUserRsp.userListArray == nil) {
    resultImallUserRsp.userListArray = [[NSMutableArray alloc]init];
  }
  [resultImallUserRsp.userListArray addObject:value];
  return self;
}
- (IMAllUserRspBuilder *)setUserListArray:(NSArray *)array {
  resultImallUserRsp.userListArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (IMAllUserRspBuilder *)clearUserList {
  resultImallUserRsp.userListArray = nil;
  return self;
}
- (BOOL) hasAttachData {
  return resultImallUserRsp.hasAttachData;
}
- (NSData*) attachData {
  return resultImallUserRsp.attachData;
}
- (IMAllUserRspBuilder*) setAttachData:(NSData*) value {
  resultImallUserRsp.hasAttachData = YES;
  resultImallUserRsp.attachData = value;
  return self;
}
- (IMAllUserRspBuilder*) clearAttachData {
  resultImallUserRsp.hasAttachData = NO;
  resultImallUserRsp.attachData = [NSData data];
  return self;
}
@end

@interface IMAllFriendReq ()
@property UInt32 userId;
@property UInt32 latestUpdateTime;
@property (strong) NSData* attachData;
@end

@implementation IMAllFriendReq

- (BOOL) hasUserId {
  return !!hasUserId_;
}
- (void) setHasUserId:(BOOL) _value_ {
  hasUserId_ = !!_value_;
}
@synthesize userId;
- (BOOL) hasLatestUpdateTime {
  return !!hasLatestUpdateTime_;
}
- (void) setHasLatestUpdateTime:(BOOL) _value_ {
  hasLatestUpdateTime_ = !!_value_;
}
@synthesize latestUpdateTime;
- (BOOL) hasAttachData {
  return !!hasAttachData_;
}
- (void) setHasAttachData:(BOOL) _value_ {
  hasAttachData_ = !!_value_;
}
@synthesize attachData;
- (instancetype) init {
  if ((self = [super init])) {
    self.userId = 0;
    self.latestUpdateTime = 0;
    self.attachData = [NSData data];
  }
  return self;
}
static IMAllFriendReq* defaultIMAllFriendReqInstance = nil;
+ (void) initialize {
  if (self == [IMAllFriendReq class]) {
    defaultIMAllFriendReqInstance = [[IMAllFriendReq alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultIMAllFriendReqInstance;
}
- (instancetype) defaultInstance {
  return defaultIMAllFriendReqInstance;
}
- (BOOL) isInitialized {
  if (!self.hasUserId) {
    return NO;
  }
  if (!self.hasLatestUpdateTime) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasUserId) {
    [output writeUInt32:1 value:self.userId];
  }
  if (self.hasLatestUpdateTime) {
    [output writeUInt32:2 value:self.latestUpdateTime];
  }
  if (self.hasAttachData) {
    [output writeData:20 value:self.attachData];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasUserId) {
    size_ += computeUInt32Size(1, self.userId);
  }
  if (self.hasLatestUpdateTime) {
    size_ += computeUInt32Size(2, self.latestUpdateTime);
  }
  if (self.hasAttachData) {
    size_ += computeDataSize(20, self.attachData);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (IMAllFriendReq*) parseFromData:(NSData*) data {
  return (IMAllFriendReq*)[[[IMAllFriendReq builder] mergeFromData:data] build];
}
+ (IMAllFriendReq*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMAllFriendReq*)[[[IMAllFriendReq builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (IMAllFriendReq*) parseFromInputStream:(NSInputStream*) input {
  return (IMAllFriendReq*)[[[IMAllFriendReq builder] mergeFromInputStream:input] build];
}
+ (IMAllFriendReq*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMAllFriendReq*)[[[IMAllFriendReq builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (IMAllFriendReq*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (IMAllFriendReq*)[[[IMAllFriendReq builder] mergeFromCodedInputStream:input] build];
}
+ (IMAllFriendReq*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMAllFriendReq*)[[[IMAllFriendReq builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (IMAllFriendReqBuilder*) builder {
  return [[IMAllFriendReqBuilder alloc] init];
}
+ (IMAllFriendReqBuilder*) builderWithPrototype:(IMAllFriendReq*) prototype {
  return [[IMAllFriendReq builder] mergeFrom:prototype];
}
- (IMAllFriendReqBuilder*) builder {
  return [IMAllFriendReq builder];
}
- (IMAllFriendReqBuilder*) toBuilder {
  return [IMAllFriendReq builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasUserId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"userId", [NSNumber numberWithInteger:self.userId]];
  }
  if (self.hasLatestUpdateTime) {
    [output appendFormat:@"%@%@: %@\n", indent, @"latestUpdateTime", [NSNumber numberWithInteger:self.latestUpdateTime]];
  }
  if (self.hasAttachData) {
    [output appendFormat:@"%@%@: %@\n", indent, @"attachData", self.attachData];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasUserId) {
    [dictionary setObject: [NSNumber numberWithInteger:self.userId] forKey: @"userId"];
  }
  if (self.hasLatestUpdateTime) {
    [dictionary setObject: [NSNumber numberWithInteger:self.latestUpdateTime] forKey: @"latestUpdateTime"];
  }
  if (self.hasAttachData) {
    [dictionary setObject: self.attachData forKey: @"attachData"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[IMAllFriendReq class]]) {
    return NO;
  }
  IMAllFriendReq *otherMessage = other;
  return
      self.hasUserId == otherMessage.hasUserId &&
      (!self.hasUserId || self.userId == otherMessage.userId) &&
      self.hasLatestUpdateTime == otherMessage.hasLatestUpdateTime &&
      (!self.hasLatestUpdateTime || self.latestUpdateTime == otherMessage.latestUpdateTime) &&
      self.hasAttachData == otherMessage.hasAttachData &&
      (!self.hasAttachData || [self.attachData isEqual:otherMessage.attachData]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasUserId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.userId] hash];
  }
  if (self.hasLatestUpdateTime) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.latestUpdateTime] hash];
  }
  if (self.hasAttachData) {
    hashCode = hashCode * 31 + [self.attachData hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface IMAllFriendReqBuilder()
@property (strong) IMAllFriendReq* resultImallFriendReq;
@end

@implementation IMAllFriendReqBuilder
@synthesize resultImallFriendReq;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultImallFriendReq = [[IMAllFriendReq alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultImallFriendReq;
}
- (IMAllFriendReqBuilder*) clear {
  self.resultImallFriendReq = [[IMAllFriendReq alloc] init];
  return self;
}
- (IMAllFriendReqBuilder*) clone {
  return [IMAllFriendReq builderWithPrototype:resultImallFriendReq];
}
- (IMAllFriendReq*) defaultInstance {
  return [IMAllFriendReq defaultInstance];
}
- (IMAllFriendReq*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (IMAllFriendReq*) buildPartial {
  IMAllFriendReq* returnMe = resultImallFriendReq;
  self.resultImallFriendReq = nil;
  return returnMe;
}
- (IMAllFriendReqBuilder*) mergeFrom:(IMAllFriendReq*) other {
  if (other == [IMAllFriendReq defaultInstance]) {
    return self;
  }
  if (other.hasUserId) {
    [self setUserId:other.userId];
  }
  if (other.hasLatestUpdateTime) {
    [self setLatestUpdateTime:other.latestUpdateTime];
  }
  if (other.hasAttachData) {
    [self setAttachData:other.attachData];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (IMAllFriendReqBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (IMAllFriendReqBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setUserId:[input readUInt32]];
        break;
      }
      case 16: {
        [self setLatestUpdateTime:[input readUInt32]];
        break;
      }
      case 162: {
        [self setAttachData:[input readData]];
        break;
      }
    }
  }
}
- (BOOL) hasUserId {
  return resultImallFriendReq.hasUserId;
}
- (UInt32) userId {
  return resultImallFriendReq.userId;
}
- (IMAllFriendReqBuilder*) setUserId:(UInt32) value {
  resultImallFriendReq.hasUserId = YES;
  resultImallFriendReq.userId = value;
  return self;
}
- (IMAllFriendReqBuilder*) clearUserId {
  resultImallFriendReq.hasUserId = NO;
  resultImallFriendReq.userId = 0;
  return self;
}
- (BOOL) hasLatestUpdateTime {
  return resultImallFriendReq.hasLatestUpdateTime;
}
- (UInt32) latestUpdateTime {
  return resultImallFriendReq.latestUpdateTime;
}
- (IMAllFriendReqBuilder*) setLatestUpdateTime:(UInt32) value {
  resultImallFriendReq.hasLatestUpdateTime = YES;
  resultImallFriendReq.latestUpdateTime = value;
  return self;
}
- (IMAllFriendReqBuilder*) clearLatestUpdateTime {
  resultImallFriendReq.hasLatestUpdateTime = NO;
  resultImallFriendReq.latestUpdateTime = 0;
  return self;
}
- (BOOL) hasAttachData {
  return resultImallFriendReq.hasAttachData;
}
- (NSData*) attachData {
  return resultImallFriendReq.attachData;
}
- (IMAllFriendReqBuilder*) setAttachData:(NSData*) value {
  resultImallFriendReq.hasAttachData = YES;
  resultImallFriendReq.attachData = value;
  return self;
}
- (IMAllFriendReqBuilder*) clearAttachData {
  resultImallFriendReq.hasAttachData = NO;
  resultImallFriendReq.attachData = [NSData data];
  return self;
}
@end

@interface IMAllFriendRsp ()
@property UInt32 userId;
@property UInt32 latestUpdateTime;
@property (strong) NSMutableArray * userListArray;
@property (strong) NSData* attachData;
@end

@implementation IMAllFriendRsp

- (BOOL) hasUserId {
  return !!hasUserId_;
}
- (void) setHasUserId:(BOOL) _value_ {
  hasUserId_ = !!_value_;
}
@synthesize userId;
- (BOOL) hasLatestUpdateTime {
  return !!hasLatestUpdateTime_;
}
- (void) setHasLatestUpdateTime:(BOOL) _value_ {
  hasLatestUpdateTime_ = !!_value_;
}
@synthesize latestUpdateTime;
@synthesize userListArray;
@dynamic userList;
- (BOOL) hasAttachData {
  return !!hasAttachData_;
}
- (void) setHasAttachData:(BOOL) _value_ {
  hasAttachData_ = !!_value_;
}
@synthesize attachData;
- (instancetype) init {
  if ((self = [super init])) {
    self.userId = 0;
    self.latestUpdateTime = 0;
    self.attachData = [NSData data];
  }
  return self;
}
static IMAllFriendRsp* defaultIMAllFriendRspInstance = nil;
+ (void) initialize {
  if (self == [IMAllFriendRsp class]) {
    defaultIMAllFriendRspInstance = [[IMAllFriendRsp alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultIMAllFriendRspInstance;
}
- (instancetype) defaultInstance {
  return defaultIMAllFriendRspInstance;
}
- (NSArray *)userList {
  return userListArray;
}
- (UserInfo*)userListAtIndex:(NSUInteger)index {
  return [userListArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  if (!self.hasUserId) {
    return NO;
  }
  if (!self.hasLatestUpdateTime) {
    return NO;
  }
  __block BOOL isInituserList = YES;
   [self.userList enumerateObjectsUsingBlock:^(UserInfo *element, NSUInteger idx, BOOL *stop) {
    if (!element.isInitialized) {
      isInituserList = NO;
      *stop = YES;
    }
  }];
  if (!isInituserList) return isInituserList;
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasUserId) {
    [output writeUInt32:1 value:self.userId];
  }
  if (self.hasLatestUpdateTime) {
    [output writeUInt32:2 value:self.latestUpdateTime];
  }
  [self.userListArray enumerateObjectsUsingBlock:^(UserInfo *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:3 value:element];
  }];
  if (self.hasAttachData) {
    [output writeData:20 value:self.attachData];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasUserId) {
    size_ += computeUInt32Size(1, self.userId);
  }
  if (self.hasLatestUpdateTime) {
    size_ += computeUInt32Size(2, self.latestUpdateTime);
  }
  [self.userListArray enumerateObjectsUsingBlock:^(UserInfo *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(3, element);
  }];
  if (self.hasAttachData) {
    size_ += computeDataSize(20, self.attachData);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (IMAllFriendRsp*) parseFromData:(NSData*) data {
  return (IMAllFriendRsp*)[[[IMAllFriendRsp builder] mergeFromData:data] build];
}
+ (IMAllFriendRsp*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMAllFriendRsp*)[[[IMAllFriendRsp builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (IMAllFriendRsp*) parseFromInputStream:(NSInputStream*) input {
  return (IMAllFriendRsp*)[[[IMAllFriendRsp builder] mergeFromInputStream:input] build];
}
+ (IMAllFriendRsp*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMAllFriendRsp*)[[[IMAllFriendRsp builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (IMAllFriendRsp*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (IMAllFriendRsp*)[[[IMAllFriendRsp builder] mergeFromCodedInputStream:input] build];
}
+ (IMAllFriendRsp*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMAllFriendRsp*)[[[IMAllFriendRsp builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (IMAllFriendRspBuilder*) builder {
  return [[IMAllFriendRspBuilder alloc] init];
}
+ (IMAllFriendRspBuilder*) builderWithPrototype:(IMAllFriendRsp*) prototype {
  return [[IMAllFriendRsp builder] mergeFrom:prototype];
}
- (IMAllFriendRspBuilder*) builder {
  return [IMAllFriendRsp builder];
}
- (IMAllFriendRspBuilder*) toBuilder {
  return [IMAllFriendRsp builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasUserId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"userId", [NSNumber numberWithInteger:self.userId]];
  }
  if (self.hasLatestUpdateTime) {
    [output appendFormat:@"%@%@: %@\n", indent, @"latestUpdateTime", [NSNumber numberWithInteger:self.latestUpdateTime]];
  }
  [self.userListArray enumerateObjectsUsingBlock:^(UserInfo *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"userList"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  if (self.hasAttachData) {
    [output appendFormat:@"%@%@: %@\n", indent, @"attachData", self.attachData];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasUserId) {
    [dictionary setObject: [NSNumber numberWithInteger:self.userId] forKey: @"userId"];
  }
  if (self.hasLatestUpdateTime) {
    [dictionary setObject: [NSNumber numberWithInteger:self.latestUpdateTime] forKey: @"latestUpdateTime"];
  }
  for (UserInfo* element in self.userListArray) {
    NSMutableDictionary *elementDictionary = [NSMutableDictionary dictionary];
    [element storeInDictionary:elementDictionary];
    [dictionary setObject:[NSDictionary dictionaryWithDictionary:elementDictionary] forKey:@"userList"];
  }
  if (self.hasAttachData) {
    [dictionary setObject: self.attachData forKey: @"attachData"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[IMAllFriendRsp class]]) {
    return NO;
  }
  IMAllFriendRsp *otherMessage = other;
  return
      self.hasUserId == otherMessage.hasUserId &&
      (!self.hasUserId || self.userId == otherMessage.userId) &&
      self.hasLatestUpdateTime == otherMessage.hasLatestUpdateTime &&
      (!self.hasLatestUpdateTime || self.latestUpdateTime == otherMessage.latestUpdateTime) &&
      [self.userListArray isEqualToArray:otherMessage.userListArray] &&
      self.hasAttachData == otherMessage.hasAttachData &&
      (!self.hasAttachData || [self.attachData isEqual:otherMessage.attachData]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasUserId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.userId] hash];
  }
  if (self.hasLatestUpdateTime) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.latestUpdateTime] hash];
  }
  [self.userListArray enumerateObjectsUsingBlock:^(UserInfo *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  if (self.hasAttachData) {
    hashCode = hashCode * 31 + [self.attachData hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface IMAllFriendRspBuilder()
@property (strong) IMAllFriendRsp* resultImallFriendRsp;
@end

@implementation IMAllFriendRspBuilder
@synthesize resultImallFriendRsp;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultImallFriendRsp = [[IMAllFriendRsp alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultImallFriendRsp;
}
- (IMAllFriendRspBuilder*) clear {
  self.resultImallFriendRsp = [[IMAllFriendRsp alloc] init];
  return self;
}
- (IMAllFriendRspBuilder*) clone {
  return [IMAllFriendRsp builderWithPrototype:resultImallFriendRsp];
}
- (IMAllFriendRsp*) defaultInstance {
  return [IMAllFriendRsp defaultInstance];
}
- (IMAllFriendRsp*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (IMAllFriendRsp*) buildPartial {
  IMAllFriendRsp* returnMe = resultImallFriendRsp;
  self.resultImallFriendRsp = nil;
  return returnMe;
}
- (IMAllFriendRspBuilder*) mergeFrom:(IMAllFriendRsp*) other {
  if (other == [IMAllFriendRsp defaultInstance]) {
    return self;
  }
  if (other.hasUserId) {
    [self setUserId:other.userId];
  }
  if (other.hasLatestUpdateTime) {
    [self setLatestUpdateTime:other.latestUpdateTime];
  }
  if (other.userListArray.count > 0) {
    if (resultImallFriendRsp.userListArray == nil) {
      resultImallFriendRsp.userListArray = [[NSMutableArray alloc] initWithArray:other.userListArray];
    } else {
      [resultImallFriendRsp.userListArray addObjectsFromArray:other.userListArray];
    }
  }
  if (other.hasAttachData) {
    [self setAttachData:other.attachData];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (IMAllFriendRspBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (IMAllFriendRspBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setUserId:[input readUInt32]];
        break;
      }
      case 16: {
        [self setLatestUpdateTime:[input readUInt32]];
        break;
      }
      case 26: {
        UserInfoBuilder* subBuilder = [UserInfo builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addUserList:[subBuilder buildPartial]];
        break;
      }
      case 162: {
        [self setAttachData:[input readData]];
        break;
      }
    }
  }
}
- (BOOL) hasUserId {
  return resultImallFriendRsp.hasUserId;
}
- (UInt32) userId {
  return resultImallFriendRsp.userId;
}
- (IMAllFriendRspBuilder*) setUserId:(UInt32) value {
  resultImallFriendRsp.hasUserId = YES;
  resultImallFriendRsp.userId = value;
  return self;
}
- (IMAllFriendRspBuilder*) clearUserId {
  resultImallFriendRsp.hasUserId = NO;
  resultImallFriendRsp.userId = 0;
  return self;
}
- (BOOL) hasLatestUpdateTime {
  return resultImallFriendRsp.hasLatestUpdateTime;
}
- (UInt32) latestUpdateTime {
  return resultImallFriendRsp.latestUpdateTime;
}
- (IMAllFriendRspBuilder*) setLatestUpdateTime:(UInt32) value {
  resultImallFriendRsp.hasLatestUpdateTime = YES;
  resultImallFriendRsp.latestUpdateTime = value;
  return self;
}
- (IMAllFriendRspBuilder*) clearLatestUpdateTime {
  resultImallFriendRsp.hasLatestUpdateTime = NO;
  resultImallFriendRsp.latestUpdateTime = 0;
  return self;
}
- (NSMutableArray *)userList {
  return resultImallFriendRsp.userListArray;
}
- (UserInfo*)userListAtIndex:(NSUInteger)index {
  return [resultImallFriendRsp userListAtIndex:index];
}
- (IMAllFriendRspBuilder *)addUserList:(UserInfo*)value {
  if (resultImallFriendRsp.userListArray == nil) {
    resultImallFriendRsp.userListArray = [[NSMutableArray alloc]init];
  }
  [resultImallFriendRsp.userListArray addObject:value];
  return self;
}
- (IMAllFriendRspBuilder *)setUserListArray:(NSArray *)array {
  resultImallFriendRsp.userListArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (IMAllFriendRspBuilder *)clearUserList {
  resultImallFriendRsp.userListArray = nil;
  return self;
}
- (BOOL) hasAttachData {
  return resultImallFriendRsp.hasAttachData;
}
- (NSData*) attachData {
  return resultImallFriendRsp.attachData;
}
- (IMAllFriendRspBuilder*) setAttachData:(NSData*) value {
  resultImallFriendRsp.hasAttachData = YES;
  resultImallFriendRsp.attachData = value;
  return self;
}
- (IMAllFriendRspBuilder*) clearAttachData {
  resultImallFriendRsp.hasAttachData = NO;
  resultImallFriendRsp.attachData = [NSData data];
  return self;
}
@end

@interface IMUsersStatReq ()
@property UInt32 userId;
@property (strong) PBAppendableArray * userIdListArray;
@property (strong) NSData* attachData;
@end

@implementation IMUsersStatReq

- (BOOL) hasUserId {
  return !!hasUserId_;
}
- (void) setHasUserId:(BOOL) _value_ {
  hasUserId_ = !!_value_;
}
@synthesize userId;
@synthesize userIdListArray;
@dynamic userIdList;
- (BOOL) hasAttachData {
  return !!hasAttachData_;
}
- (void) setHasAttachData:(BOOL) _value_ {
  hasAttachData_ = !!_value_;
}
@synthesize attachData;
- (instancetype) init {
  if ((self = [super init])) {
    self.userId = 0;
    self.attachData = [NSData data];
  }
  return self;
}
static IMUsersStatReq* defaultIMUsersStatReqInstance = nil;
+ (void) initialize {
  if (self == [IMUsersStatReq class]) {
    defaultIMUsersStatReqInstance = [[IMUsersStatReq alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultIMUsersStatReqInstance;
}
- (instancetype) defaultInstance {
  return defaultIMUsersStatReqInstance;
}
- (PBArray *)userIdList {
  return userIdListArray;
}
- (UInt32)userIdListAtIndex:(NSUInteger)index {
  return [userIdListArray uint32AtIndex:index];
}
- (BOOL) isInitialized {
  if (!self.hasUserId) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasUserId) {
    [output writeUInt32:1 value:self.userId];
  }
  const NSUInteger userIdListArrayCount = self.userIdListArray.count;
  if (userIdListArrayCount > 0) {
    const UInt32 *values = (const UInt32 *)self.userIdListArray.data;
    for (NSUInteger i = 0; i < userIdListArrayCount; ++i) {
      [output writeUInt32:2 value:values[i]];
    }
  }
  if (self.hasAttachData) {
    [output writeData:20 value:self.attachData];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasUserId) {
    size_ += computeUInt32Size(1, self.userId);
  }
  {
    __block SInt32 dataSize = 0;
    const NSUInteger count = self.userIdListArray.count;
    const UInt32 *values = (const UInt32 *)self.userIdListArray.data;
    for (NSUInteger i = 0; i < count; ++i) {
      dataSize += computeUInt32SizeNoTag(values[i]);
    }
    size_ += dataSize;
    size_ += (SInt32)(1 * count);
  }
  if (self.hasAttachData) {
    size_ += computeDataSize(20, self.attachData);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (IMUsersStatReq*) parseFromData:(NSData*) data {
  return (IMUsersStatReq*)[[[IMUsersStatReq builder] mergeFromData:data] build];
}
+ (IMUsersStatReq*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMUsersStatReq*)[[[IMUsersStatReq builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (IMUsersStatReq*) parseFromInputStream:(NSInputStream*) input {
  return (IMUsersStatReq*)[[[IMUsersStatReq builder] mergeFromInputStream:input] build];
}
+ (IMUsersStatReq*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMUsersStatReq*)[[[IMUsersStatReq builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (IMUsersStatReq*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (IMUsersStatReq*)[[[IMUsersStatReq builder] mergeFromCodedInputStream:input] build];
}
+ (IMUsersStatReq*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMUsersStatReq*)[[[IMUsersStatReq builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (IMUsersStatReqBuilder*) builder {
  return [[IMUsersStatReqBuilder alloc] init];
}
+ (IMUsersStatReqBuilder*) builderWithPrototype:(IMUsersStatReq*) prototype {
  return [[IMUsersStatReq builder] mergeFrom:prototype];
}
- (IMUsersStatReqBuilder*) builder {
  return [IMUsersStatReq builder];
}
- (IMUsersStatReqBuilder*) toBuilder {
  return [IMUsersStatReq builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasUserId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"userId", [NSNumber numberWithInteger:self.userId]];
  }
  [self.userIdListArray enumerateObjectsUsingBlock:^(id obj, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@: %@\n", indent, @"userIdList", obj];
  }];
  if (self.hasAttachData) {
    [output appendFormat:@"%@%@: %@\n", indent, @"attachData", self.attachData];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasUserId) {
    [dictionary setObject: [NSNumber numberWithInteger:self.userId] forKey: @"userId"];
  }
  NSMutableArray * userIdListArrayArray = [NSMutableArray new];
  NSUInteger userIdListArrayCount=self.userIdListArray.count;
  for(int i=0;i<userIdListArrayCount;i++){
    [userIdListArrayArray addObject: @([self.userIdListArray uint32AtIndex:i])];
  }
  [dictionary setObject: userIdListArrayArray forKey: @"userIdList"];
  if (self.hasAttachData) {
    [dictionary setObject: self.attachData forKey: @"attachData"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[IMUsersStatReq class]]) {
    return NO;
  }
  IMUsersStatReq *otherMessage = other;
  return
      self.hasUserId == otherMessage.hasUserId &&
      (!self.hasUserId || self.userId == otherMessage.userId) &&
      [self.userIdListArray isEqualToArray:otherMessage.userIdListArray] &&
      self.hasAttachData == otherMessage.hasAttachData &&
      (!self.hasAttachData || [self.attachData isEqual:otherMessage.attachData]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasUserId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.userId] hash];
  }
  [self.userIdListArray enumerateObjectsUsingBlock:^(NSNumber *obj, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [obj longValue];
  }];
  if (self.hasAttachData) {
    hashCode = hashCode * 31 + [self.attachData hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface IMUsersStatReqBuilder()
@property (strong) IMUsersStatReq* resultImusersStatReq;
@end

@implementation IMUsersStatReqBuilder
@synthesize resultImusersStatReq;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultImusersStatReq = [[IMUsersStatReq alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultImusersStatReq;
}
- (IMUsersStatReqBuilder*) clear {
  self.resultImusersStatReq = [[IMUsersStatReq alloc] init];
  return self;
}
- (IMUsersStatReqBuilder*) clone {
  return [IMUsersStatReq builderWithPrototype:resultImusersStatReq];
}
- (IMUsersStatReq*) defaultInstance {
  return [IMUsersStatReq defaultInstance];
}
- (IMUsersStatReq*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (IMUsersStatReq*) buildPartial {
  IMUsersStatReq* returnMe = resultImusersStatReq;
  self.resultImusersStatReq = nil;
  return returnMe;
}
- (IMUsersStatReqBuilder*) mergeFrom:(IMUsersStatReq*) other {
  if (other == [IMUsersStatReq defaultInstance]) {
    return self;
  }
  if (other.hasUserId) {
    [self setUserId:other.userId];
  }
  if (other.userIdListArray.count > 0) {
    if (resultImusersStatReq.userIdListArray == nil) {
      resultImusersStatReq.userIdListArray = [other.userIdListArray copy];
    } else {
      [resultImusersStatReq.userIdListArray appendArray:other.userIdListArray];
    }
  }
  if (other.hasAttachData) {
    [self setAttachData:other.attachData];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (IMUsersStatReqBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (IMUsersStatReqBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setUserId:[input readUInt32]];
        break;
      }
      case 16: {
        [self addUserIdList:[input readUInt32]];
        break;
      }
      case 162: {
        [self setAttachData:[input readData]];
        break;
      }
    }
  }
}
- (BOOL) hasUserId {
  return resultImusersStatReq.hasUserId;
}
- (UInt32) userId {
  return resultImusersStatReq.userId;
}
- (IMUsersStatReqBuilder*) setUserId:(UInt32) value {
  resultImusersStatReq.hasUserId = YES;
  resultImusersStatReq.userId = value;
  return self;
}
- (IMUsersStatReqBuilder*) clearUserId {
  resultImusersStatReq.hasUserId = NO;
  resultImusersStatReq.userId = 0;
  return self;
}
- (PBAppendableArray *)userIdList {
  return resultImusersStatReq.userIdListArray;
}
- (UInt32)userIdListAtIndex:(NSUInteger)index {
  return [resultImusersStatReq userIdListAtIndex:index];
}
- (IMUsersStatReqBuilder *)addUserIdList:(UInt32)value {
  if (resultImusersStatReq.userIdListArray == nil) {
    resultImusersStatReq.userIdListArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeUInt32];
  }
  [resultImusersStatReq.userIdListArray addUint32:value];
  return self;
}
- (IMUsersStatReqBuilder *)setUserIdListArray:(NSArray *)array {
  resultImusersStatReq.userIdListArray = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeUInt32];
  return self;
}
- (IMUsersStatReqBuilder *)setUserIdListValues:(const UInt32 *)values count:(NSUInteger)count {
  resultImusersStatReq.userIdListArray = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeUInt32];
  return self;
}
- (IMUsersStatReqBuilder *)clearUserIdList {
  resultImusersStatReq.userIdListArray = nil;
  return self;
}
- (BOOL) hasAttachData {
  return resultImusersStatReq.hasAttachData;
}
- (NSData*) attachData {
  return resultImusersStatReq.attachData;
}
- (IMUsersStatReqBuilder*) setAttachData:(NSData*) value {
  resultImusersStatReq.hasAttachData = YES;
  resultImusersStatReq.attachData = value;
  return self;
}
- (IMUsersStatReqBuilder*) clearAttachData {
  resultImusersStatReq.hasAttachData = NO;
  resultImusersStatReq.attachData = [NSData data];
  return self;
}
@end

@interface IMUsersStatRsp ()
@property UInt32 userId;
@property (strong) NSMutableArray * userStatListArray;
@property (strong) NSData* attachData;
@end

@implementation IMUsersStatRsp

- (BOOL) hasUserId {
  return !!hasUserId_;
}
- (void) setHasUserId:(BOOL) _value_ {
  hasUserId_ = !!_value_;
}
@synthesize userId;
@synthesize userStatListArray;
@dynamic userStatList;
- (BOOL) hasAttachData {
  return !!hasAttachData_;
}
- (void) setHasAttachData:(BOOL) _value_ {
  hasAttachData_ = !!_value_;
}
@synthesize attachData;
- (instancetype) init {
  if ((self = [super init])) {
    self.userId = 0;
    self.attachData = [NSData data];
  }
  return self;
}
static IMUsersStatRsp* defaultIMUsersStatRspInstance = nil;
+ (void) initialize {
  if (self == [IMUsersStatRsp class]) {
    defaultIMUsersStatRspInstance = [[IMUsersStatRsp alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultIMUsersStatRspInstance;
}
- (instancetype) defaultInstance {
  return defaultIMUsersStatRspInstance;
}
- (NSArray *)userStatList {
  return userStatListArray;
}
- (UserStat*)userStatListAtIndex:(NSUInteger)index {
  return [userStatListArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  if (!self.hasUserId) {
    return NO;
  }
  __block BOOL isInituserStatList = YES;
   [self.userStatList enumerateObjectsUsingBlock:^(UserStat *element, NSUInteger idx, BOOL *stop) {
    if (!element.isInitialized) {
      isInituserStatList = NO;
      *stop = YES;
    }
  }];
  if (!isInituserStatList) return isInituserStatList;
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasUserId) {
    [output writeUInt32:1 value:self.userId];
  }
  [self.userStatListArray enumerateObjectsUsingBlock:^(UserStat *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:2 value:element];
  }];
  if (self.hasAttachData) {
    [output writeData:20 value:self.attachData];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasUserId) {
    size_ += computeUInt32Size(1, self.userId);
  }
  [self.userStatListArray enumerateObjectsUsingBlock:^(UserStat *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(2, element);
  }];
  if (self.hasAttachData) {
    size_ += computeDataSize(20, self.attachData);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (IMUsersStatRsp*) parseFromData:(NSData*) data {
  return (IMUsersStatRsp*)[[[IMUsersStatRsp builder] mergeFromData:data] build];
}
+ (IMUsersStatRsp*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMUsersStatRsp*)[[[IMUsersStatRsp builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (IMUsersStatRsp*) parseFromInputStream:(NSInputStream*) input {
  return (IMUsersStatRsp*)[[[IMUsersStatRsp builder] mergeFromInputStream:input] build];
}
+ (IMUsersStatRsp*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMUsersStatRsp*)[[[IMUsersStatRsp builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (IMUsersStatRsp*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (IMUsersStatRsp*)[[[IMUsersStatRsp builder] mergeFromCodedInputStream:input] build];
}
+ (IMUsersStatRsp*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMUsersStatRsp*)[[[IMUsersStatRsp builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (IMUsersStatRspBuilder*) builder {
  return [[IMUsersStatRspBuilder alloc] init];
}
+ (IMUsersStatRspBuilder*) builderWithPrototype:(IMUsersStatRsp*) prototype {
  return [[IMUsersStatRsp builder] mergeFrom:prototype];
}
- (IMUsersStatRspBuilder*) builder {
  return [IMUsersStatRsp builder];
}
- (IMUsersStatRspBuilder*) toBuilder {
  return [IMUsersStatRsp builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasUserId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"userId", [NSNumber numberWithInteger:self.userId]];
  }
  [self.userStatListArray enumerateObjectsUsingBlock:^(UserStat *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"userStatList"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  if (self.hasAttachData) {
    [output appendFormat:@"%@%@: %@\n", indent, @"attachData", self.attachData];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasUserId) {
    [dictionary setObject: [NSNumber numberWithInteger:self.userId] forKey: @"userId"];
  }
  for (UserStat* element in self.userStatListArray) {
    NSMutableDictionary *elementDictionary = [NSMutableDictionary dictionary];
    [element storeInDictionary:elementDictionary];
    [dictionary setObject:[NSDictionary dictionaryWithDictionary:elementDictionary] forKey:@"userStatList"];
  }
  if (self.hasAttachData) {
    [dictionary setObject: self.attachData forKey: @"attachData"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[IMUsersStatRsp class]]) {
    return NO;
  }
  IMUsersStatRsp *otherMessage = other;
  return
      self.hasUserId == otherMessage.hasUserId &&
      (!self.hasUserId || self.userId == otherMessage.userId) &&
      [self.userStatListArray isEqualToArray:otherMessage.userStatListArray] &&
      self.hasAttachData == otherMessage.hasAttachData &&
      (!self.hasAttachData || [self.attachData isEqual:otherMessage.attachData]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasUserId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.userId] hash];
  }
  [self.userStatListArray enumerateObjectsUsingBlock:^(UserStat *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  if (self.hasAttachData) {
    hashCode = hashCode * 31 + [self.attachData hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface IMUsersStatRspBuilder()
@property (strong) IMUsersStatRsp* resultImusersStatRsp;
@end

@implementation IMUsersStatRspBuilder
@synthesize resultImusersStatRsp;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultImusersStatRsp = [[IMUsersStatRsp alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultImusersStatRsp;
}
- (IMUsersStatRspBuilder*) clear {
  self.resultImusersStatRsp = [[IMUsersStatRsp alloc] init];
  return self;
}
- (IMUsersStatRspBuilder*) clone {
  return [IMUsersStatRsp builderWithPrototype:resultImusersStatRsp];
}
- (IMUsersStatRsp*) defaultInstance {
  return [IMUsersStatRsp defaultInstance];
}
- (IMUsersStatRsp*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (IMUsersStatRsp*) buildPartial {
  IMUsersStatRsp* returnMe = resultImusersStatRsp;
  self.resultImusersStatRsp = nil;
  return returnMe;
}
- (IMUsersStatRspBuilder*) mergeFrom:(IMUsersStatRsp*) other {
  if (other == [IMUsersStatRsp defaultInstance]) {
    return self;
  }
  if (other.hasUserId) {
    [self setUserId:other.userId];
  }
  if (other.userStatListArray.count > 0) {
    if (resultImusersStatRsp.userStatListArray == nil) {
      resultImusersStatRsp.userStatListArray = [[NSMutableArray alloc] initWithArray:other.userStatListArray];
    } else {
      [resultImusersStatRsp.userStatListArray addObjectsFromArray:other.userStatListArray];
    }
  }
  if (other.hasAttachData) {
    [self setAttachData:other.attachData];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (IMUsersStatRspBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (IMUsersStatRspBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setUserId:[input readUInt32]];
        break;
      }
      case 18: {
        UserStatBuilder* subBuilder = [UserStat builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addUserStatList:[subBuilder buildPartial]];
        break;
      }
      case 162: {
        [self setAttachData:[input readData]];
        break;
      }
    }
  }
}
- (BOOL) hasUserId {
  return resultImusersStatRsp.hasUserId;
}
- (UInt32) userId {
  return resultImusersStatRsp.userId;
}
- (IMUsersStatRspBuilder*) setUserId:(UInt32) value {
  resultImusersStatRsp.hasUserId = YES;
  resultImusersStatRsp.userId = value;
  return self;
}
- (IMUsersStatRspBuilder*) clearUserId {
  resultImusersStatRsp.hasUserId = NO;
  resultImusersStatRsp.userId = 0;
  return self;
}
- (NSMutableArray *)userStatList {
  return resultImusersStatRsp.userStatListArray;
}
- (UserStat*)userStatListAtIndex:(NSUInteger)index {
  return [resultImusersStatRsp userStatListAtIndex:index];
}
- (IMUsersStatRspBuilder *)addUserStatList:(UserStat*)value {
  if (resultImusersStatRsp.userStatListArray == nil) {
    resultImusersStatRsp.userStatListArray = [[NSMutableArray alloc]init];
  }
  [resultImusersStatRsp.userStatListArray addObject:value];
  return self;
}
- (IMUsersStatRspBuilder *)setUserStatListArray:(NSArray *)array {
  resultImusersStatRsp.userStatListArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (IMUsersStatRspBuilder *)clearUserStatList {
  resultImusersStatRsp.userStatListArray = nil;
  return self;
}
- (BOOL) hasAttachData {
  return resultImusersStatRsp.hasAttachData;
}
- (NSData*) attachData {
  return resultImusersStatRsp.attachData;
}
- (IMUsersStatRspBuilder*) setAttachData:(NSData*) value {
  resultImusersStatRsp.hasAttachData = YES;
  resultImusersStatRsp.attachData = value;
  return self;
}
- (IMUsersStatRspBuilder*) clearAttachData {
  resultImusersStatRsp.hasAttachData = NO;
  resultImusersStatRsp.attachData = [NSData data];
  return self;
}
@end

@interface IMChangeAvatarReq ()
@property UInt32 userId;
@property (strong) NSString* avatarUrl;
@property (strong) NSData* attachData;
@end

@implementation IMChangeAvatarReq

- (BOOL) hasUserId {
  return !!hasUserId_;
}
- (void) setHasUserId:(BOOL) _value_ {
  hasUserId_ = !!_value_;
}
@synthesize userId;
- (BOOL) hasAvatarUrl {
  return !!hasAvatarUrl_;
}
- (void) setHasAvatarUrl:(BOOL) _value_ {
  hasAvatarUrl_ = !!_value_;
}
@synthesize avatarUrl;
- (BOOL) hasAttachData {
  return !!hasAttachData_;
}
- (void) setHasAttachData:(BOOL) _value_ {
  hasAttachData_ = !!_value_;
}
@synthesize attachData;
- (instancetype) init {
  if ((self = [super init])) {
    self.userId = 0;
    self.avatarUrl = @"";
    self.attachData = [NSData data];
  }
  return self;
}
static IMChangeAvatarReq* defaultIMChangeAvatarReqInstance = nil;
+ (void) initialize {
  if (self == [IMChangeAvatarReq class]) {
    defaultIMChangeAvatarReqInstance = [[IMChangeAvatarReq alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultIMChangeAvatarReqInstance;
}
- (instancetype) defaultInstance {
  return defaultIMChangeAvatarReqInstance;
}
- (BOOL) isInitialized {
  if (!self.hasUserId) {
    return NO;
  }
  if (!self.hasAvatarUrl) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasUserId) {
    [output writeUInt32:1 value:self.userId];
  }
  if (self.hasAvatarUrl) {
    [output writeString:2 value:self.avatarUrl];
  }
  if (self.hasAttachData) {
    [output writeData:20 value:self.attachData];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasUserId) {
    size_ += computeUInt32Size(1, self.userId);
  }
  if (self.hasAvatarUrl) {
    size_ += computeStringSize(2, self.avatarUrl);
  }
  if (self.hasAttachData) {
    size_ += computeDataSize(20, self.attachData);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (IMChangeAvatarReq*) parseFromData:(NSData*) data {
  return (IMChangeAvatarReq*)[[[IMChangeAvatarReq builder] mergeFromData:data] build];
}
+ (IMChangeAvatarReq*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMChangeAvatarReq*)[[[IMChangeAvatarReq builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (IMChangeAvatarReq*) parseFromInputStream:(NSInputStream*) input {
  return (IMChangeAvatarReq*)[[[IMChangeAvatarReq builder] mergeFromInputStream:input] build];
}
+ (IMChangeAvatarReq*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMChangeAvatarReq*)[[[IMChangeAvatarReq builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (IMChangeAvatarReq*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (IMChangeAvatarReq*)[[[IMChangeAvatarReq builder] mergeFromCodedInputStream:input] build];
}
+ (IMChangeAvatarReq*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMChangeAvatarReq*)[[[IMChangeAvatarReq builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (IMChangeAvatarReqBuilder*) builder {
  return [[IMChangeAvatarReqBuilder alloc] init];
}
+ (IMChangeAvatarReqBuilder*) builderWithPrototype:(IMChangeAvatarReq*) prototype {
  return [[IMChangeAvatarReq builder] mergeFrom:prototype];
}
- (IMChangeAvatarReqBuilder*) builder {
  return [IMChangeAvatarReq builder];
}
- (IMChangeAvatarReqBuilder*) toBuilder {
  return [IMChangeAvatarReq builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasUserId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"userId", [NSNumber numberWithInteger:self.userId]];
  }
  if (self.hasAvatarUrl) {
    [output appendFormat:@"%@%@: %@\n", indent, @"avatarUrl", self.avatarUrl];
  }
  if (self.hasAttachData) {
    [output appendFormat:@"%@%@: %@\n", indent, @"attachData", self.attachData];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasUserId) {
    [dictionary setObject: [NSNumber numberWithInteger:self.userId] forKey: @"userId"];
  }
  if (self.hasAvatarUrl) {
    [dictionary setObject: self.avatarUrl forKey: @"avatarUrl"];
  }
  if (self.hasAttachData) {
    [dictionary setObject: self.attachData forKey: @"attachData"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[IMChangeAvatarReq class]]) {
    return NO;
  }
  IMChangeAvatarReq *otherMessage = other;
  return
      self.hasUserId == otherMessage.hasUserId &&
      (!self.hasUserId || self.userId == otherMessage.userId) &&
      self.hasAvatarUrl == otherMessage.hasAvatarUrl &&
      (!self.hasAvatarUrl || [self.avatarUrl isEqual:otherMessage.avatarUrl]) &&
      self.hasAttachData == otherMessage.hasAttachData &&
      (!self.hasAttachData || [self.attachData isEqual:otherMessage.attachData]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasUserId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.userId] hash];
  }
  if (self.hasAvatarUrl) {
    hashCode = hashCode * 31 + [self.avatarUrl hash];
  }
  if (self.hasAttachData) {
    hashCode = hashCode * 31 + [self.attachData hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface IMChangeAvatarReqBuilder()
@property (strong) IMChangeAvatarReq* resultImchangeAvatarReq;
@end

@implementation IMChangeAvatarReqBuilder
@synthesize resultImchangeAvatarReq;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultImchangeAvatarReq = [[IMChangeAvatarReq alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultImchangeAvatarReq;
}
- (IMChangeAvatarReqBuilder*) clear {
  self.resultImchangeAvatarReq = [[IMChangeAvatarReq alloc] init];
  return self;
}
- (IMChangeAvatarReqBuilder*) clone {
  return [IMChangeAvatarReq builderWithPrototype:resultImchangeAvatarReq];
}
- (IMChangeAvatarReq*) defaultInstance {
  return [IMChangeAvatarReq defaultInstance];
}
- (IMChangeAvatarReq*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (IMChangeAvatarReq*) buildPartial {
  IMChangeAvatarReq* returnMe = resultImchangeAvatarReq;
  self.resultImchangeAvatarReq = nil;
  return returnMe;
}
- (IMChangeAvatarReqBuilder*) mergeFrom:(IMChangeAvatarReq*) other {
  if (other == [IMChangeAvatarReq defaultInstance]) {
    return self;
  }
  if (other.hasUserId) {
    [self setUserId:other.userId];
  }
  if (other.hasAvatarUrl) {
    [self setAvatarUrl:other.avatarUrl];
  }
  if (other.hasAttachData) {
    [self setAttachData:other.attachData];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (IMChangeAvatarReqBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (IMChangeAvatarReqBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setUserId:[input readUInt32]];
        break;
      }
      case 18: {
        [self setAvatarUrl:[input readString]];
        break;
      }
      case 162: {
        [self setAttachData:[input readData]];
        break;
      }
    }
  }
}
- (BOOL) hasUserId {
  return resultImchangeAvatarReq.hasUserId;
}
- (UInt32) userId {
  return resultImchangeAvatarReq.userId;
}
- (IMChangeAvatarReqBuilder*) setUserId:(UInt32) value {
  resultImchangeAvatarReq.hasUserId = YES;
  resultImchangeAvatarReq.userId = value;
  return self;
}
- (IMChangeAvatarReqBuilder*) clearUserId {
  resultImchangeAvatarReq.hasUserId = NO;
  resultImchangeAvatarReq.userId = 0;
  return self;
}
- (BOOL) hasAvatarUrl {
  return resultImchangeAvatarReq.hasAvatarUrl;
}
- (NSString*) avatarUrl {
  return resultImchangeAvatarReq.avatarUrl;
}
- (IMChangeAvatarReqBuilder*) setAvatarUrl:(NSString*) value {
  resultImchangeAvatarReq.hasAvatarUrl = YES;
  resultImchangeAvatarReq.avatarUrl = value;
  return self;
}
- (IMChangeAvatarReqBuilder*) clearAvatarUrl {
  resultImchangeAvatarReq.hasAvatarUrl = NO;
  resultImchangeAvatarReq.avatarUrl = @"";
  return self;
}
- (BOOL) hasAttachData {
  return resultImchangeAvatarReq.hasAttachData;
}
- (NSData*) attachData {
  return resultImchangeAvatarReq.attachData;
}
- (IMChangeAvatarReqBuilder*) setAttachData:(NSData*) value {
  resultImchangeAvatarReq.hasAttachData = YES;
  resultImchangeAvatarReq.attachData = value;
  return self;
}
- (IMChangeAvatarReqBuilder*) clearAttachData {
  resultImchangeAvatarReq.hasAttachData = NO;
  resultImchangeAvatarReq.attachData = [NSData data];
  return self;
}
@end

@interface IMChangeAvatarRsp ()
@property UInt32 userId;
@property UInt32 resultCode;
@property (strong) NSData* attachData;
@end

@implementation IMChangeAvatarRsp

- (BOOL) hasUserId {
  return !!hasUserId_;
}
- (void) setHasUserId:(BOOL) _value_ {
  hasUserId_ = !!_value_;
}
@synthesize userId;
- (BOOL) hasResultCode {
  return !!hasResultCode_;
}
- (void) setHasResultCode:(BOOL) _value_ {
  hasResultCode_ = !!_value_;
}
@synthesize resultCode;
- (BOOL) hasAttachData {
  return !!hasAttachData_;
}
- (void) setHasAttachData:(BOOL) _value_ {
  hasAttachData_ = !!_value_;
}
@synthesize attachData;
- (instancetype) init {
  if ((self = [super init])) {
    self.userId = 0;
    self.resultCode = 0;
    self.attachData = [NSData data];
  }
  return self;
}
static IMChangeAvatarRsp* defaultIMChangeAvatarRspInstance = nil;
+ (void) initialize {
  if (self == [IMChangeAvatarRsp class]) {
    defaultIMChangeAvatarRspInstance = [[IMChangeAvatarRsp alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultIMChangeAvatarRspInstance;
}
- (instancetype) defaultInstance {
  return defaultIMChangeAvatarRspInstance;
}
- (BOOL) isInitialized {
  if (!self.hasUserId) {
    return NO;
  }
  if (!self.hasResultCode) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasUserId) {
    [output writeUInt32:1 value:self.userId];
  }
  if (self.hasResultCode) {
    [output writeUInt32:2 value:self.resultCode];
  }
  if (self.hasAttachData) {
    [output writeData:20 value:self.attachData];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasUserId) {
    size_ += computeUInt32Size(1, self.userId);
  }
  if (self.hasResultCode) {
    size_ += computeUInt32Size(2, self.resultCode);
  }
  if (self.hasAttachData) {
    size_ += computeDataSize(20, self.attachData);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (IMChangeAvatarRsp*) parseFromData:(NSData*) data {
  return (IMChangeAvatarRsp*)[[[IMChangeAvatarRsp builder] mergeFromData:data] build];
}
+ (IMChangeAvatarRsp*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMChangeAvatarRsp*)[[[IMChangeAvatarRsp builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (IMChangeAvatarRsp*) parseFromInputStream:(NSInputStream*) input {
  return (IMChangeAvatarRsp*)[[[IMChangeAvatarRsp builder] mergeFromInputStream:input] build];
}
+ (IMChangeAvatarRsp*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMChangeAvatarRsp*)[[[IMChangeAvatarRsp builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (IMChangeAvatarRsp*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (IMChangeAvatarRsp*)[[[IMChangeAvatarRsp builder] mergeFromCodedInputStream:input] build];
}
+ (IMChangeAvatarRsp*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMChangeAvatarRsp*)[[[IMChangeAvatarRsp builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (IMChangeAvatarRspBuilder*) builder {
  return [[IMChangeAvatarRspBuilder alloc] init];
}
+ (IMChangeAvatarRspBuilder*) builderWithPrototype:(IMChangeAvatarRsp*) prototype {
  return [[IMChangeAvatarRsp builder] mergeFrom:prototype];
}
- (IMChangeAvatarRspBuilder*) builder {
  return [IMChangeAvatarRsp builder];
}
- (IMChangeAvatarRspBuilder*) toBuilder {
  return [IMChangeAvatarRsp builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasUserId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"userId", [NSNumber numberWithInteger:self.userId]];
  }
  if (self.hasResultCode) {
    [output appendFormat:@"%@%@: %@\n", indent, @"resultCode", [NSNumber numberWithInteger:self.resultCode]];
  }
  if (self.hasAttachData) {
    [output appendFormat:@"%@%@: %@\n", indent, @"attachData", self.attachData];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasUserId) {
    [dictionary setObject: [NSNumber numberWithInteger:self.userId] forKey: @"userId"];
  }
  if (self.hasResultCode) {
    [dictionary setObject: [NSNumber numberWithInteger:self.resultCode] forKey: @"resultCode"];
  }
  if (self.hasAttachData) {
    [dictionary setObject: self.attachData forKey: @"attachData"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[IMChangeAvatarRsp class]]) {
    return NO;
  }
  IMChangeAvatarRsp *otherMessage = other;
  return
      self.hasUserId == otherMessage.hasUserId &&
      (!self.hasUserId || self.userId == otherMessage.userId) &&
      self.hasResultCode == otherMessage.hasResultCode &&
      (!self.hasResultCode || self.resultCode == otherMessage.resultCode) &&
      self.hasAttachData == otherMessage.hasAttachData &&
      (!self.hasAttachData || [self.attachData isEqual:otherMessage.attachData]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasUserId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.userId] hash];
  }
  if (self.hasResultCode) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.resultCode] hash];
  }
  if (self.hasAttachData) {
    hashCode = hashCode * 31 + [self.attachData hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface IMChangeAvatarRspBuilder()
@property (strong) IMChangeAvatarRsp* resultImchangeAvatarRsp;
@end

@implementation IMChangeAvatarRspBuilder
@synthesize resultImchangeAvatarRsp;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultImchangeAvatarRsp = [[IMChangeAvatarRsp alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultImchangeAvatarRsp;
}
- (IMChangeAvatarRspBuilder*) clear {
  self.resultImchangeAvatarRsp = [[IMChangeAvatarRsp alloc] init];
  return self;
}
- (IMChangeAvatarRspBuilder*) clone {
  return [IMChangeAvatarRsp builderWithPrototype:resultImchangeAvatarRsp];
}
- (IMChangeAvatarRsp*) defaultInstance {
  return [IMChangeAvatarRsp defaultInstance];
}
- (IMChangeAvatarRsp*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (IMChangeAvatarRsp*) buildPartial {
  IMChangeAvatarRsp* returnMe = resultImchangeAvatarRsp;
  self.resultImchangeAvatarRsp = nil;
  return returnMe;
}
- (IMChangeAvatarRspBuilder*) mergeFrom:(IMChangeAvatarRsp*) other {
  if (other == [IMChangeAvatarRsp defaultInstance]) {
    return self;
  }
  if (other.hasUserId) {
    [self setUserId:other.userId];
  }
  if (other.hasResultCode) {
    [self setResultCode:other.resultCode];
  }
  if (other.hasAttachData) {
    [self setAttachData:other.attachData];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (IMChangeAvatarRspBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (IMChangeAvatarRspBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setUserId:[input readUInt32]];
        break;
      }
      case 16: {
        [self setResultCode:[input readUInt32]];
        break;
      }
      case 162: {
        [self setAttachData:[input readData]];
        break;
      }
    }
  }
}
- (BOOL) hasUserId {
  return resultImchangeAvatarRsp.hasUserId;
}
- (UInt32) userId {
  return resultImchangeAvatarRsp.userId;
}
- (IMChangeAvatarRspBuilder*) setUserId:(UInt32) value {
  resultImchangeAvatarRsp.hasUserId = YES;
  resultImchangeAvatarRsp.userId = value;
  return self;
}
- (IMChangeAvatarRspBuilder*) clearUserId {
  resultImchangeAvatarRsp.hasUserId = NO;
  resultImchangeAvatarRsp.userId = 0;
  return self;
}
- (BOOL) hasResultCode {
  return resultImchangeAvatarRsp.hasResultCode;
}
- (UInt32) resultCode {
  return resultImchangeAvatarRsp.resultCode;
}
- (IMChangeAvatarRspBuilder*) setResultCode:(UInt32) value {
  resultImchangeAvatarRsp.hasResultCode = YES;
  resultImchangeAvatarRsp.resultCode = value;
  return self;
}
- (IMChangeAvatarRspBuilder*) clearResultCode {
  resultImchangeAvatarRsp.hasResultCode = NO;
  resultImchangeAvatarRsp.resultCode = 0;
  return self;
}
- (BOOL) hasAttachData {
  return resultImchangeAvatarRsp.hasAttachData;
}
- (NSData*) attachData {
  return resultImchangeAvatarRsp.attachData;
}
- (IMChangeAvatarRspBuilder*) setAttachData:(NSData*) value {
  resultImchangeAvatarRsp.hasAttachData = YES;
  resultImchangeAvatarRsp.attachData = value;
  return self;
}
- (IMChangeAvatarRspBuilder*) clearAttachData {
  resultImchangeAvatarRsp.hasAttachData = NO;
  resultImchangeAvatarRsp.attachData = [NSData data];
  return self;
}
@end

@interface IMPCLoginStatusNotify ()
@property UInt32 userId;
@property UserStatType loginStat;
@end

@implementation IMPCLoginStatusNotify

- (BOOL) hasUserId {
  return !!hasUserId_;
}
- (void) setHasUserId:(BOOL) _value_ {
  hasUserId_ = !!_value_;
}
@synthesize userId;
- (BOOL) hasLoginStat {
  return !!hasLoginStat_;
}
- (void) setHasLoginStat:(BOOL) _value_ {
  hasLoginStat_ = !!_value_;
}
@synthesize loginStat;
- (instancetype) init {
  if ((self = [super init])) {
    self.userId = 0;
    self.loginStat = UserStatTypeUserStatusOnline;
  }
  return self;
}
static IMPCLoginStatusNotify* defaultIMPCLoginStatusNotifyInstance = nil;
+ (void) initialize {
  if (self == [IMPCLoginStatusNotify class]) {
    defaultIMPCLoginStatusNotifyInstance = [[IMPCLoginStatusNotify alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultIMPCLoginStatusNotifyInstance;
}
- (instancetype) defaultInstance {
  return defaultIMPCLoginStatusNotifyInstance;
}
- (BOOL) isInitialized {
  if (!self.hasUserId) {
    return NO;
  }
  if (!self.hasLoginStat) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasUserId) {
    [output writeUInt32:1 value:self.userId];
  }
  if (self.hasLoginStat) {
    [output writeEnum:2 value:self.loginStat];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasUserId) {
    size_ += computeUInt32Size(1, self.userId);
  }
  if (self.hasLoginStat) {
    size_ += computeEnumSize(2, self.loginStat);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (IMPCLoginStatusNotify*) parseFromData:(NSData*) data {
  return (IMPCLoginStatusNotify*)[[[IMPCLoginStatusNotify builder] mergeFromData:data] build];
}
+ (IMPCLoginStatusNotify*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMPCLoginStatusNotify*)[[[IMPCLoginStatusNotify builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (IMPCLoginStatusNotify*) parseFromInputStream:(NSInputStream*) input {
  return (IMPCLoginStatusNotify*)[[[IMPCLoginStatusNotify builder] mergeFromInputStream:input] build];
}
+ (IMPCLoginStatusNotify*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMPCLoginStatusNotify*)[[[IMPCLoginStatusNotify builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (IMPCLoginStatusNotify*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (IMPCLoginStatusNotify*)[[[IMPCLoginStatusNotify builder] mergeFromCodedInputStream:input] build];
}
+ (IMPCLoginStatusNotify*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMPCLoginStatusNotify*)[[[IMPCLoginStatusNotify builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (IMPCLoginStatusNotifyBuilder*) builder {
  return [[IMPCLoginStatusNotifyBuilder alloc] init];
}
+ (IMPCLoginStatusNotifyBuilder*) builderWithPrototype:(IMPCLoginStatusNotify*) prototype {
  return [[IMPCLoginStatusNotify builder] mergeFrom:prototype];
}
- (IMPCLoginStatusNotifyBuilder*) builder {
  return [IMPCLoginStatusNotify builder];
}
- (IMPCLoginStatusNotifyBuilder*) toBuilder {
  return [IMPCLoginStatusNotify builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasUserId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"userId", [NSNumber numberWithInteger:self.userId]];
  }
  if (self.hasLoginStat) {
    [output appendFormat:@"%@%@: %@\n", indent, @"loginStat", NSStringFromUserStatType(self.loginStat)];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasUserId) {
    [dictionary setObject: [NSNumber numberWithInteger:self.userId] forKey: @"userId"];
  }
  if (self.hasLoginStat) {
    [dictionary setObject: @(self.loginStat) forKey: @"loginStat"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[IMPCLoginStatusNotify class]]) {
    return NO;
  }
  IMPCLoginStatusNotify *otherMessage = other;
  return
      self.hasUserId == otherMessage.hasUserId &&
      (!self.hasUserId || self.userId == otherMessage.userId) &&
      self.hasLoginStat == otherMessage.hasLoginStat &&
      (!self.hasLoginStat || self.loginStat == otherMessage.loginStat) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasUserId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.userId] hash];
  }
  if (self.hasLoginStat) {
    hashCode = hashCode * 31 + self.loginStat;
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface IMPCLoginStatusNotifyBuilder()
@property (strong) IMPCLoginStatusNotify* resultImpcloginStatusNotify;
@end

@implementation IMPCLoginStatusNotifyBuilder
@synthesize resultImpcloginStatusNotify;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultImpcloginStatusNotify = [[IMPCLoginStatusNotify alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultImpcloginStatusNotify;
}
- (IMPCLoginStatusNotifyBuilder*) clear {
  self.resultImpcloginStatusNotify = [[IMPCLoginStatusNotify alloc] init];
  return self;
}
- (IMPCLoginStatusNotifyBuilder*) clone {
  return [IMPCLoginStatusNotify builderWithPrototype:resultImpcloginStatusNotify];
}
- (IMPCLoginStatusNotify*) defaultInstance {
  return [IMPCLoginStatusNotify defaultInstance];
}
- (IMPCLoginStatusNotify*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (IMPCLoginStatusNotify*) buildPartial {
  IMPCLoginStatusNotify* returnMe = resultImpcloginStatusNotify;
  self.resultImpcloginStatusNotify = nil;
  return returnMe;
}
- (IMPCLoginStatusNotifyBuilder*) mergeFrom:(IMPCLoginStatusNotify*) other {
  if (other == [IMPCLoginStatusNotify defaultInstance]) {
    return self;
  }
  if (other.hasUserId) {
    [self setUserId:other.userId];
  }
  if (other.hasLoginStat) {
    [self setLoginStat:other.loginStat];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (IMPCLoginStatusNotifyBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (IMPCLoginStatusNotifyBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setUserId:[input readUInt32]];
        break;
      }
      case 16: {
        UserStatType value = (UserStatType)[input readEnum];
        if (UserStatTypeIsValidValue(value)) {
          [self setLoginStat:value];
        } else {
          [unknownFields mergeVarintField:2 value:value];
        }
        break;
      }
    }
  }
}
- (BOOL) hasUserId {
  return resultImpcloginStatusNotify.hasUserId;
}
- (UInt32) userId {
  return resultImpcloginStatusNotify.userId;
}
- (IMPCLoginStatusNotifyBuilder*) setUserId:(UInt32) value {
  resultImpcloginStatusNotify.hasUserId = YES;
  resultImpcloginStatusNotify.userId = value;
  return self;
}
- (IMPCLoginStatusNotifyBuilder*) clearUserId {
  resultImpcloginStatusNotify.hasUserId = NO;
  resultImpcloginStatusNotify.userId = 0;
  return self;
}
- (BOOL) hasLoginStat {
  return resultImpcloginStatusNotify.hasLoginStat;
}
- (UserStatType) loginStat {
  return resultImpcloginStatusNotify.loginStat;
}
- (IMPCLoginStatusNotifyBuilder*) setLoginStat:(UserStatType) value {
  resultImpcloginStatusNotify.hasLoginStat = YES;
  resultImpcloginStatusNotify.loginStat = value;
  return self;
}
- (IMPCLoginStatusNotifyBuilder*) clearLoginStat {
  resultImpcloginStatusNotify.hasLoginStat = NO;
  resultImpcloginStatusNotify.loginStat = UserStatTypeUserStatusOnline;
  return self;
}
@end

@interface IMRemoveSessionNotify ()
@property UInt32 userId;
@property SessionType sessionType;
@property UInt32 sessionId;
@end

@implementation IMRemoveSessionNotify

- (BOOL) hasUserId {
  return !!hasUserId_;
}
- (void) setHasUserId:(BOOL) _value_ {
  hasUserId_ = !!_value_;
}
@synthesize userId;
- (BOOL) hasSessionType {
  return !!hasSessionType_;
}
- (void) setHasSessionType:(BOOL) _value_ {
  hasSessionType_ = !!_value_;
}
@synthesize sessionType;
- (BOOL) hasSessionId {
  return !!hasSessionId_;
}
- (void) setHasSessionId:(BOOL) _value_ {
  hasSessionId_ = !!_value_;
}
@synthesize sessionId;
- (instancetype) init {
  if ((self = [super init])) {
    self.userId = 0;
    self.sessionType = SessionTypeSessionTypeSingle;
    self.sessionId = 0;
  }
  return self;
}
static IMRemoveSessionNotify* defaultIMRemoveSessionNotifyInstance = nil;
+ (void) initialize {
  if (self == [IMRemoveSessionNotify class]) {
    defaultIMRemoveSessionNotifyInstance = [[IMRemoveSessionNotify alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultIMRemoveSessionNotifyInstance;
}
- (instancetype) defaultInstance {
  return defaultIMRemoveSessionNotifyInstance;
}
- (BOOL) isInitialized {
  if (!self.hasUserId) {
    return NO;
  }
  if (!self.hasSessionType) {
    return NO;
  }
  if (!self.hasSessionId) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasUserId) {
    [output writeUInt32:1 value:self.userId];
  }
  if (self.hasSessionType) {
    [output writeEnum:2 value:self.sessionType];
  }
  if (self.hasSessionId) {
    [output writeUInt32:3 value:self.sessionId];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasUserId) {
    size_ += computeUInt32Size(1, self.userId);
  }
  if (self.hasSessionType) {
    size_ += computeEnumSize(2, self.sessionType);
  }
  if (self.hasSessionId) {
    size_ += computeUInt32Size(3, self.sessionId);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (IMRemoveSessionNotify*) parseFromData:(NSData*) data {
  return (IMRemoveSessionNotify*)[[[IMRemoveSessionNotify builder] mergeFromData:data] build];
}
+ (IMRemoveSessionNotify*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMRemoveSessionNotify*)[[[IMRemoveSessionNotify builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (IMRemoveSessionNotify*) parseFromInputStream:(NSInputStream*) input {
  return (IMRemoveSessionNotify*)[[[IMRemoveSessionNotify builder] mergeFromInputStream:input] build];
}
+ (IMRemoveSessionNotify*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMRemoveSessionNotify*)[[[IMRemoveSessionNotify builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (IMRemoveSessionNotify*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (IMRemoveSessionNotify*)[[[IMRemoveSessionNotify builder] mergeFromCodedInputStream:input] build];
}
+ (IMRemoveSessionNotify*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMRemoveSessionNotify*)[[[IMRemoveSessionNotify builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (IMRemoveSessionNotifyBuilder*) builder {
  return [[IMRemoveSessionNotifyBuilder alloc] init];
}
+ (IMRemoveSessionNotifyBuilder*) builderWithPrototype:(IMRemoveSessionNotify*) prototype {
  return [[IMRemoveSessionNotify builder] mergeFrom:prototype];
}
- (IMRemoveSessionNotifyBuilder*) builder {
  return [IMRemoveSessionNotify builder];
}
- (IMRemoveSessionNotifyBuilder*) toBuilder {
  return [IMRemoveSessionNotify builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasUserId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"userId", [NSNumber numberWithInteger:self.userId]];
  }
  if (self.hasSessionType) {
    [output appendFormat:@"%@%@: %@\n", indent, @"sessionType", NSStringFromSessionType(self.sessionType)];
  }
  if (self.hasSessionId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"sessionId", [NSNumber numberWithInteger:self.sessionId]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasUserId) {
    [dictionary setObject: [NSNumber numberWithInteger:self.userId] forKey: @"userId"];
  }
  if (self.hasSessionType) {
    [dictionary setObject: @(self.sessionType) forKey: @"sessionType"];
  }
  if (self.hasSessionId) {
    [dictionary setObject: [NSNumber numberWithInteger:self.sessionId] forKey: @"sessionId"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[IMRemoveSessionNotify class]]) {
    return NO;
  }
  IMRemoveSessionNotify *otherMessage = other;
  return
      self.hasUserId == otherMessage.hasUserId &&
      (!self.hasUserId || self.userId == otherMessage.userId) &&
      self.hasSessionType == otherMessage.hasSessionType &&
      (!self.hasSessionType || self.sessionType == otherMessage.sessionType) &&
      self.hasSessionId == otherMessage.hasSessionId &&
      (!self.hasSessionId || self.sessionId == otherMessage.sessionId) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasUserId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.userId] hash];
  }
  if (self.hasSessionType) {
    hashCode = hashCode * 31 + self.sessionType;
  }
  if (self.hasSessionId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.sessionId] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface IMRemoveSessionNotifyBuilder()
@property (strong) IMRemoveSessionNotify* resultImremoveSessionNotify;
@end

@implementation IMRemoveSessionNotifyBuilder
@synthesize resultImremoveSessionNotify;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultImremoveSessionNotify = [[IMRemoveSessionNotify alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultImremoveSessionNotify;
}
- (IMRemoveSessionNotifyBuilder*) clear {
  self.resultImremoveSessionNotify = [[IMRemoveSessionNotify alloc] init];
  return self;
}
- (IMRemoveSessionNotifyBuilder*) clone {
  return [IMRemoveSessionNotify builderWithPrototype:resultImremoveSessionNotify];
}
- (IMRemoveSessionNotify*) defaultInstance {
  return [IMRemoveSessionNotify defaultInstance];
}
- (IMRemoveSessionNotify*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (IMRemoveSessionNotify*) buildPartial {
  IMRemoveSessionNotify* returnMe = resultImremoveSessionNotify;
  self.resultImremoveSessionNotify = nil;
  return returnMe;
}
- (IMRemoveSessionNotifyBuilder*) mergeFrom:(IMRemoveSessionNotify*) other {
  if (other == [IMRemoveSessionNotify defaultInstance]) {
    return self;
  }
  if (other.hasUserId) {
    [self setUserId:other.userId];
  }
  if (other.hasSessionType) {
    [self setSessionType:other.sessionType];
  }
  if (other.hasSessionId) {
    [self setSessionId:other.sessionId];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (IMRemoveSessionNotifyBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (IMRemoveSessionNotifyBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setUserId:[input readUInt32]];
        break;
      }
      case 16: {
        SessionType value = (SessionType)[input readEnum];
        if (SessionTypeIsValidValue(value)) {
          [self setSessionType:value];
        } else {
          [unknownFields mergeVarintField:2 value:value];
        }
        break;
      }
      case 24: {
        [self setSessionId:[input readUInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasUserId {
  return resultImremoveSessionNotify.hasUserId;
}
- (UInt32) userId {
  return resultImremoveSessionNotify.userId;
}
- (IMRemoveSessionNotifyBuilder*) setUserId:(UInt32) value {
  resultImremoveSessionNotify.hasUserId = YES;
  resultImremoveSessionNotify.userId = value;
  return self;
}
- (IMRemoveSessionNotifyBuilder*) clearUserId {
  resultImremoveSessionNotify.hasUserId = NO;
  resultImremoveSessionNotify.userId = 0;
  return self;
}
- (BOOL) hasSessionType {
  return resultImremoveSessionNotify.hasSessionType;
}
- (SessionType) sessionType {
  return resultImremoveSessionNotify.sessionType;
}
- (IMRemoveSessionNotifyBuilder*) setSessionType:(SessionType) value {
  resultImremoveSessionNotify.hasSessionType = YES;
  resultImremoveSessionNotify.sessionType = value;
  return self;
}
- (IMRemoveSessionNotifyBuilder*) clearSessionType {
  resultImremoveSessionNotify.hasSessionType = NO;
  resultImremoveSessionNotify.sessionType = SessionTypeSessionTypeSingle;
  return self;
}
- (BOOL) hasSessionId {
  return resultImremoveSessionNotify.hasSessionId;
}
- (UInt32) sessionId {
  return resultImremoveSessionNotify.sessionId;
}
- (IMRemoveSessionNotifyBuilder*) setSessionId:(UInt32) value {
  resultImremoveSessionNotify.hasSessionId = YES;
  resultImremoveSessionNotify.sessionId = value;
  return self;
}
- (IMRemoveSessionNotifyBuilder*) clearSessionId {
  resultImremoveSessionNotify.hasSessionId = NO;
  resultImremoveSessionNotify.sessionId = 0;
  return self;
}
@end

@interface IMDepartmentReq ()
@property UInt32 userId;
@property UInt32 latestUpdateTime;
@property (strong) NSData* attachData;
@end

@implementation IMDepartmentReq

- (BOOL) hasUserId {
  return !!hasUserId_;
}
- (void) setHasUserId:(BOOL) _value_ {
  hasUserId_ = !!_value_;
}
@synthesize userId;
- (BOOL) hasLatestUpdateTime {
  return !!hasLatestUpdateTime_;
}
- (void) setHasLatestUpdateTime:(BOOL) _value_ {
  hasLatestUpdateTime_ = !!_value_;
}
@synthesize latestUpdateTime;
- (BOOL) hasAttachData {
  return !!hasAttachData_;
}
- (void) setHasAttachData:(BOOL) _value_ {
  hasAttachData_ = !!_value_;
}
@synthesize attachData;
- (instancetype) init {
  if ((self = [super init])) {
    self.userId = 0;
    self.latestUpdateTime = 0;
    self.attachData = [NSData data];
  }
  return self;
}
static IMDepartmentReq* defaultIMDepartmentReqInstance = nil;
+ (void) initialize {
  if (self == [IMDepartmentReq class]) {
    defaultIMDepartmentReqInstance = [[IMDepartmentReq alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultIMDepartmentReqInstance;
}
- (instancetype) defaultInstance {
  return defaultIMDepartmentReqInstance;
}
- (BOOL) isInitialized {
  if (!self.hasUserId) {
    return NO;
  }
  if (!self.hasLatestUpdateTime) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasUserId) {
    [output writeUInt32:1 value:self.userId];
  }
  if (self.hasLatestUpdateTime) {
    [output writeUInt32:2 value:self.latestUpdateTime];
  }
  if (self.hasAttachData) {
    [output writeData:20 value:self.attachData];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasUserId) {
    size_ += computeUInt32Size(1, self.userId);
  }
  if (self.hasLatestUpdateTime) {
    size_ += computeUInt32Size(2, self.latestUpdateTime);
  }
  if (self.hasAttachData) {
    size_ += computeDataSize(20, self.attachData);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (IMDepartmentReq*) parseFromData:(NSData*) data {
  return (IMDepartmentReq*)[[[IMDepartmentReq builder] mergeFromData:data] build];
}
+ (IMDepartmentReq*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMDepartmentReq*)[[[IMDepartmentReq builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (IMDepartmentReq*) parseFromInputStream:(NSInputStream*) input {
  return (IMDepartmentReq*)[[[IMDepartmentReq builder] mergeFromInputStream:input] build];
}
+ (IMDepartmentReq*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMDepartmentReq*)[[[IMDepartmentReq builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (IMDepartmentReq*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (IMDepartmentReq*)[[[IMDepartmentReq builder] mergeFromCodedInputStream:input] build];
}
+ (IMDepartmentReq*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMDepartmentReq*)[[[IMDepartmentReq builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (IMDepartmentReqBuilder*) builder {
  return [[IMDepartmentReqBuilder alloc] init];
}
+ (IMDepartmentReqBuilder*) builderWithPrototype:(IMDepartmentReq*) prototype {
  return [[IMDepartmentReq builder] mergeFrom:prototype];
}
- (IMDepartmentReqBuilder*) builder {
  return [IMDepartmentReq builder];
}
- (IMDepartmentReqBuilder*) toBuilder {
  return [IMDepartmentReq builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasUserId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"userId", [NSNumber numberWithInteger:self.userId]];
  }
  if (self.hasLatestUpdateTime) {
    [output appendFormat:@"%@%@: %@\n", indent, @"latestUpdateTime", [NSNumber numberWithInteger:self.latestUpdateTime]];
  }
  if (self.hasAttachData) {
    [output appendFormat:@"%@%@: %@\n", indent, @"attachData", self.attachData];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasUserId) {
    [dictionary setObject: [NSNumber numberWithInteger:self.userId] forKey: @"userId"];
  }
  if (self.hasLatestUpdateTime) {
    [dictionary setObject: [NSNumber numberWithInteger:self.latestUpdateTime] forKey: @"latestUpdateTime"];
  }
  if (self.hasAttachData) {
    [dictionary setObject: self.attachData forKey: @"attachData"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[IMDepartmentReq class]]) {
    return NO;
  }
  IMDepartmentReq *otherMessage = other;
  return
      self.hasUserId == otherMessage.hasUserId &&
      (!self.hasUserId || self.userId == otherMessage.userId) &&
      self.hasLatestUpdateTime == otherMessage.hasLatestUpdateTime &&
      (!self.hasLatestUpdateTime || self.latestUpdateTime == otherMessage.latestUpdateTime) &&
      self.hasAttachData == otherMessage.hasAttachData &&
      (!self.hasAttachData || [self.attachData isEqual:otherMessage.attachData]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasUserId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.userId] hash];
  }
  if (self.hasLatestUpdateTime) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.latestUpdateTime] hash];
  }
  if (self.hasAttachData) {
    hashCode = hashCode * 31 + [self.attachData hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface IMDepartmentReqBuilder()
@property (strong) IMDepartmentReq* resultImdepartmentReq;
@end

@implementation IMDepartmentReqBuilder
@synthesize resultImdepartmentReq;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultImdepartmentReq = [[IMDepartmentReq alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultImdepartmentReq;
}
- (IMDepartmentReqBuilder*) clear {
  self.resultImdepartmentReq = [[IMDepartmentReq alloc] init];
  return self;
}
- (IMDepartmentReqBuilder*) clone {
  return [IMDepartmentReq builderWithPrototype:resultImdepartmentReq];
}
- (IMDepartmentReq*) defaultInstance {
  return [IMDepartmentReq defaultInstance];
}
- (IMDepartmentReq*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (IMDepartmentReq*) buildPartial {
  IMDepartmentReq* returnMe = resultImdepartmentReq;
  self.resultImdepartmentReq = nil;
  return returnMe;
}
- (IMDepartmentReqBuilder*) mergeFrom:(IMDepartmentReq*) other {
  if (other == [IMDepartmentReq defaultInstance]) {
    return self;
  }
  if (other.hasUserId) {
    [self setUserId:other.userId];
  }
  if (other.hasLatestUpdateTime) {
    [self setLatestUpdateTime:other.latestUpdateTime];
  }
  if (other.hasAttachData) {
    [self setAttachData:other.attachData];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (IMDepartmentReqBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (IMDepartmentReqBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setUserId:[input readUInt32]];
        break;
      }
      case 16: {
        [self setLatestUpdateTime:[input readUInt32]];
        break;
      }
      case 162: {
        [self setAttachData:[input readData]];
        break;
      }
    }
  }
}
- (BOOL) hasUserId {
  return resultImdepartmentReq.hasUserId;
}
- (UInt32) userId {
  return resultImdepartmentReq.userId;
}
- (IMDepartmentReqBuilder*) setUserId:(UInt32) value {
  resultImdepartmentReq.hasUserId = YES;
  resultImdepartmentReq.userId = value;
  return self;
}
- (IMDepartmentReqBuilder*) clearUserId {
  resultImdepartmentReq.hasUserId = NO;
  resultImdepartmentReq.userId = 0;
  return self;
}
- (BOOL) hasLatestUpdateTime {
  return resultImdepartmentReq.hasLatestUpdateTime;
}
- (UInt32) latestUpdateTime {
  return resultImdepartmentReq.latestUpdateTime;
}
- (IMDepartmentReqBuilder*) setLatestUpdateTime:(UInt32) value {
  resultImdepartmentReq.hasLatestUpdateTime = YES;
  resultImdepartmentReq.latestUpdateTime = value;
  return self;
}
- (IMDepartmentReqBuilder*) clearLatestUpdateTime {
  resultImdepartmentReq.hasLatestUpdateTime = NO;
  resultImdepartmentReq.latestUpdateTime = 0;
  return self;
}
- (BOOL) hasAttachData {
  return resultImdepartmentReq.hasAttachData;
}
- (NSData*) attachData {
  return resultImdepartmentReq.attachData;
}
- (IMDepartmentReqBuilder*) setAttachData:(NSData*) value {
  resultImdepartmentReq.hasAttachData = YES;
  resultImdepartmentReq.attachData = value;
  return self;
}
- (IMDepartmentReqBuilder*) clearAttachData {
  resultImdepartmentReq.hasAttachData = NO;
  resultImdepartmentReq.attachData = [NSData data];
  return self;
}
@end

@interface IMDepartmentRsp ()
@property UInt32 userId;
@property UInt32 latestUpdateTime;
@property (strong) NSMutableArray * deptListArray;
@property (strong) NSData* attachData;
@end

@implementation IMDepartmentRsp

- (BOOL) hasUserId {
  return !!hasUserId_;
}
- (void) setHasUserId:(BOOL) _value_ {
  hasUserId_ = !!_value_;
}
@synthesize userId;
- (BOOL) hasLatestUpdateTime {
  return !!hasLatestUpdateTime_;
}
- (void) setHasLatestUpdateTime:(BOOL) _value_ {
  hasLatestUpdateTime_ = !!_value_;
}
@synthesize latestUpdateTime;
@synthesize deptListArray;
@dynamic deptList;
- (BOOL) hasAttachData {
  return !!hasAttachData_;
}
- (void) setHasAttachData:(BOOL) _value_ {
  hasAttachData_ = !!_value_;
}
@synthesize attachData;
- (instancetype) init {
  if ((self = [super init])) {
    self.userId = 0;
    self.latestUpdateTime = 0;
    self.attachData = [NSData data];
  }
  return self;
}
static IMDepartmentRsp* defaultIMDepartmentRspInstance = nil;
+ (void) initialize {
  if (self == [IMDepartmentRsp class]) {
    defaultIMDepartmentRspInstance = [[IMDepartmentRsp alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultIMDepartmentRspInstance;
}
- (instancetype) defaultInstance {
  return defaultIMDepartmentRspInstance;
}
- (NSArray *)deptList {
  return deptListArray;
}
- (DepartInfo*)deptListAtIndex:(NSUInteger)index {
  return [deptListArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  if (!self.hasUserId) {
    return NO;
  }
  if (!self.hasLatestUpdateTime) {
    return NO;
  }
  __block BOOL isInitdeptList = YES;
   [self.deptList enumerateObjectsUsingBlock:^(DepartInfo *element, NSUInteger idx, BOOL *stop) {
    if (!element.isInitialized) {
      isInitdeptList = NO;
      *stop = YES;
    }
  }];
  if (!isInitdeptList) return isInitdeptList;
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasUserId) {
    [output writeUInt32:1 value:self.userId];
  }
  if (self.hasLatestUpdateTime) {
    [output writeUInt32:2 value:self.latestUpdateTime];
  }
  [self.deptListArray enumerateObjectsUsingBlock:^(DepartInfo *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:3 value:element];
  }];
  if (self.hasAttachData) {
    [output writeData:20 value:self.attachData];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasUserId) {
    size_ += computeUInt32Size(1, self.userId);
  }
  if (self.hasLatestUpdateTime) {
    size_ += computeUInt32Size(2, self.latestUpdateTime);
  }
  [self.deptListArray enumerateObjectsUsingBlock:^(DepartInfo *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(3, element);
  }];
  if (self.hasAttachData) {
    size_ += computeDataSize(20, self.attachData);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (IMDepartmentRsp*) parseFromData:(NSData*) data {
  return (IMDepartmentRsp*)[[[IMDepartmentRsp builder] mergeFromData:data] build];
}
+ (IMDepartmentRsp*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMDepartmentRsp*)[[[IMDepartmentRsp builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (IMDepartmentRsp*) parseFromInputStream:(NSInputStream*) input {
  return (IMDepartmentRsp*)[[[IMDepartmentRsp builder] mergeFromInputStream:input] build];
}
+ (IMDepartmentRsp*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMDepartmentRsp*)[[[IMDepartmentRsp builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (IMDepartmentRsp*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (IMDepartmentRsp*)[[[IMDepartmentRsp builder] mergeFromCodedInputStream:input] build];
}
+ (IMDepartmentRsp*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMDepartmentRsp*)[[[IMDepartmentRsp builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (IMDepartmentRspBuilder*) builder {
  return [[IMDepartmentRspBuilder alloc] init];
}
+ (IMDepartmentRspBuilder*) builderWithPrototype:(IMDepartmentRsp*) prototype {
  return [[IMDepartmentRsp builder] mergeFrom:prototype];
}
- (IMDepartmentRspBuilder*) builder {
  return [IMDepartmentRsp builder];
}
- (IMDepartmentRspBuilder*) toBuilder {
  return [IMDepartmentRsp builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasUserId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"userId", [NSNumber numberWithInteger:self.userId]];
  }
  if (self.hasLatestUpdateTime) {
    [output appendFormat:@"%@%@: %@\n", indent, @"latestUpdateTime", [NSNumber numberWithInteger:self.latestUpdateTime]];
  }
  [self.deptListArray enumerateObjectsUsingBlock:^(DepartInfo *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"deptList"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  if (self.hasAttachData) {
    [output appendFormat:@"%@%@: %@\n", indent, @"attachData", self.attachData];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasUserId) {
    [dictionary setObject: [NSNumber numberWithInteger:self.userId] forKey: @"userId"];
  }
  if (self.hasLatestUpdateTime) {
    [dictionary setObject: [NSNumber numberWithInteger:self.latestUpdateTime] forKey: @"latestUpdateTime"];
  }
  for (DepartInfo* element in self.deptListArray) {
    NSMutableDictionary *elementDictionary = [NSMutableDictionary dictionary];
    [element storeInDictionary:elementDictionary];
    [dictionary setObject:[NSDictionary dictionaryWithDictionary:elementDictionary] forKey:@"deptList"];
  }
  if (self.hasAttachData) {
    [dictionary setObject: self.attachData forKey: @"attachData"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[IMDepartmentRsp class]]) {
    return NO;
  }
  IMDepartmentRsp *otherMessage = other;
  return
      self.hasUserId == otherMessage.hasUserId &&
      (!self.hasUserId || self.userId == otherMessage.userId) &&
      self.hasLatestUpdateTime == otherMessage.hasLatestUpdateTime &&
      (!self.hasLatestUpdateTime || self.latestUpdateTime == otherMessage.latestUpdateTime) &&
      [self.deptListArray isEqualToArray:otherMessage.deptListArray] &&
      self.hasAttachData == otherMessage.hasAttachData &&
      (!self.hasAttachData || [self.attachData isEqual:otherMessage.attachData]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasUserId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.userId] hash];
  }
  if (self.hasLatestUpdateTime) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.latestUpdateTime] hash];
  }
  [self.deptListArray enumerateObjectsUsingBlock:^(DepartInfo *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  if (self.hasAttachData) {
    hashCode = hashCode * 31 + [self.attachData hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface IMDepartmentRspBuilder()
@property (strong) IMDepartmentRsp* resultImdepartmentRsp;
@end

@implementation IMDepartmentRspBuilder
@synthesize resultImdepartmentRsp;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultImdepartmentRsp = [[IMDepartmentRsp alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultImdepartmentRsp;
}
- (IMDepartmentRspBuilder*) clear {
  self.resultImdepartmentRsp = [[IMDepartmentRsp alloc] init];
  return self;
}
- (IMDepartmentRspBuilder*) clone {
  return [IMDepartmentRsp builderWithPrototype:resultImdepartmentRsp];
}
- (IMDepartmentRsp*) defaultInstance {
  return [IMDepartmentRsp defaultInstance];
}
- (IMDepartmentRsp*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (IMDepartmentRsp*) buildPartial {
  IMDepartmentRsp* returnMe = resultImdepartmentRsp;
  self.resultImdepartmentRsp = nil;
  return returnMe;
}
- (IMDepartmentRspBuilder*) mergeFrom:(IMDepartmentRsp*) other {
  if (other == [IMDepartmentRsp defaultInstance]) {
    return self;
  }
  if (other.hasUserId) {
    [self setUserId:other.userId];
  }
  if (other.hasLatestUpdateTime) {
    [self setLatestUpdateTime:other.latestUpdateTime];
  }
  if (other.deptListArray.count > 0) {
    if (resultImdepartmentRsp.deptListArray == nil) {
      resultImdepartmentRsp.deptListArray = [[NSMutableArray alloc] initWithArray:other.deptListArray];
    } else {
      [resultImdepartmentRsp.deptListArray addObjectsFromArray:other.deptListArray];
    }
  }
  if (other.hasAttachData) {
    [self setAttachData:other.attachData];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (IMDepartmentRspBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (IMDepartmentRspBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setUserId:[input readUInt32]];
        break;
      }
      case 16: {
        [self setLatestUpdateTime:[input readUInt32]];
        break;
      }
      case 26: {
        DepartInfoBuilder* subBuilder = [DepartInfo builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addDeptList:[subBuilder buildPartial]];
        break;
      }
      case 162: {
        [self setAttachData:[input readData]];
        break;
      }
    }
  }
}
- (BOOL) hasUserId {
  return resultImdepartmentRsp.hasUserId;
}
- (UInt32) userId {
  return resultImdepartmentRsp.userId;
}
- (IMDepartmentRspBuilder*) setUserId:(UInt32) value {
  resultImdepartmentRsp.hasUserId = YES;
  resultImdepartmentRsp.userId = value;
  return self;
}
- (IMDepartmentRspBuilder*) clearUserId {
  resultImdepartmentRsp.hasUserId = NO;
  resultImdepartmentRsp.userId = 0;
  return self;
}
- (BOOL) hasLatestUpdateTime {
  return resultImdepartmentRsp.hasLatestUpdateTime;
}
- (UInt32) latestUpdateTime {
  return resultImdepartmentRsp.latestUpdateTime;
}
- (IMDepartmentRspBuilder*) setLatestUpdateTime:(UInt32) value {
  resultImdepartmentRsp.hasLatestUpdateTime = YES;
  resultImdepartmentRsp.latestUpdateTime = value;
  return self;
}
- (IMDepartmentRspBuilder*) clearLatestUpdateTime {
  resultImdepartmentRsp.hasLatestUpdateTime = NO;
  resultImdepartmentRsp.latestUpdateTime = 0;
  return self;
}
- (NSMutableArray *)deptList {
  return resultImdepartmentRsp.deptListArray;
}
- (DepartInfo*)deptListAtIndex:(NSUInteger)index {
  return [resultImdepartmentRsp deptListAtIndex:index];
}
- (IMDepartmentRspBuilder *)addDeptList:(DepartInfo*)value {
  if (resultImdepartmentRsp.deptListArray == nil) {
    resultImdepartmentRsp.deptListArray = [[NSMutableArray alloc]init];
  }
  [resultImdepartmentRsp.deptListArray addObject:value];
  return self;
}
- (IMDepartmentRspBuilder *)setDeptListArray:(NSArray *)array {
  resultImdepartmentRsp.deptListArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (IMDepartmentRspBuilder *)clearDeptList {
  resultImdepartmentRsp.deptListArray = nil;
  return self;
}
- (BOOL) hasAttachData {
  return resultImdepartmentRsp.hasAttachData;
}
- (NSData*) attachData {
  return resultImdepartmentRsp.attachData;
}
- (IMDepartmentRspBuilder*) setAttachData:(NSData*) value {
  resultImdepartmentRsp.hasAttachData = YES;
  resultImdepartmentRsp.attachData = value;
  return self;
}
- (IMDepartmentRspBuilder*) clearAttachData {
  resultImdepartmentRsp.hasAttachData = NO;
  resultImdepartmentRsp.attachData = [NSData data];
  return self;
}
@end

@interface IMAvatarChangedNotify ()
@property UInt32 changedUserId;
@property (strong) NSString* avatarUrl;
@end

@implementation IMAvatarChangedNotify

- (BOOL) hasChangedUserId {
  return !!hasChangedUserId_;
}
- (void) setHasChangedUserId:(BOOL) _value_ {
  hasChangedUserId_ = !!_value_;
}
@synthesize changedUserId;
- (BOOL) hasAvatarUrl {
  return !!hasAvatarUrl_;
}
- (void) setHasAvatarUrl:(BOOL) _value_ {
  hasAvatarUrl_ = !!_value_;
}
@synthesize avatarUrl;
- (instancetype) init {
  if ((self = [super init])) {
    self.changedUserId = 0;
    self.avatarUrl = @"";
  }
  return self;
}
static IMAvatarChangedNotify* defaultIMAvatarChangedNotifyInstance = nil;
+ (void) initialize {
  if (self == [IMAvatarChangedNotify class]) {
    defaultIMAvatarChangedNotifyInstance = [[IMAvatarChangedNotify alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultIMAvatarChangedNotifyInstance;
}
- (instancetype) defaultInstance {
  return defaultIMAvatarChangedNotifyInstance;
}
- (BOOL) isInitialized {
  if (!self.hasChangedUserId) {
    return NO;
  }
  if (!self.hasAvatarUrl) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasChangedUserId) {
    [output writeUInt32:1 value:self.changedUserId];
  }
  if (self.hasAvatarUrl) {
    [output writeString:2 value:self.avatarUrl];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasChangedUserId) {
    size_ += computeUInt32Size(1, self.changedUserId);
  }
  if (self.hasAvatarUrl) {
    size_ += computeStringSize(2, self.avatarUrl);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (IMAvatarChangedNotify*) parseFromData:(NSData*) data {
  return (IMAvatarChangedNotify*)[[[IMAvatarChangedNotify builder] mergeFromData:data] build];
}
+ (IMAvatarChangedNotify*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMAvatarChangedNotify*)[[[IMAvatarChangedNotify builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (IMAvatarChangedNotify*) parseFromInputStream:(NSInputStream*) input {
  return (IMAvatarChangedNotify*)[[[IMAvatarChangedNotify builder] mergeFromInputStream:input] build];
}
+ (IMAvatarChangedNotify*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMAvatarChangedNotify*)[[[IMAvatarChangedNotify builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (IMAvatarChangedNotify*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (IMAvatarChangedNotify*)[[[IMAvatarChangedNotify builder] mergeFromCodedInputStream:input] build];
}
+ (IMAvatarChangedNotify*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMAvatarChangedNotify*)[[[IMAvatarChangedNotify builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (IMAvatarChangedNotifyBuilder*) builder {
  return [[IMAvatarChangedNotifyBuilder alloc] init];
}
+ (IMAvatarChangedNotifyBuilder*) builderWithPrototype:(IMAvatarChangedNotify*) prototype {
  return [[IMAvatarChangedNotify builder] mergeFrom:prototype];
}
- (IMAvatarChangedNotifyBuilder*) builder {
  return [IMAvatarChangedNotify builder];
}
- (IMAvatarChangedNotifyBuilder*) toBuilder {
  return [IMAvatarChangedNotify builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasChangedUserId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"changedUserId", [NSNumber numberWithInteger:self.changedUserId]];
  }
  if (self.hasAvatarUrl) {
    [output appendFormat:@"%@%@: %@\n", indent, @"avatarUrl", self.avatarUrl];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasChangedUserId) {
    [dictionary setObject: [NSNumber numberWithInteger:self.changedUserId] forKey: @"changedUserId"];
  }
  if (self.hasAvatarUrl) {
    [dictionary setObject: self.avatarUrl forKey: @"avatarUrl"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[IMAvatarChangedNotify class]]) {
    return NO;
  }
  IMAvatarChangedNotify *otherMessage = other;
  return
      self.hasChangedUserId == otherMessage.hasChangedUserId &&
      (!self.hasChangedUserId || self.changedUserId == otherMessage.changedUserId) &&
      self.hasAvatarUrl == otherMessage.hasAvatarUrl &&
      (!self.hasAvatarUrl || [self.avatarUrl isEqual:otherMessage.avatarUrl]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasChangedUserId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.changedUserId] hash];
  }
  if (self.hasAvatarUrl) {
    hashCode = hashCode * 31 + [self.avatarUrl hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface IMAvatarChangedNotifyBuilder()
@property (strong) IMAvatarChangedNotify* resultImavatarChangedNotify;
@end

@implementation IMAvatarChangedNotifyBuilder
@synthesize resultImavatarChangedNotify;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultImavatarChangedNotify = [[IMAvatarChangedNotify alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultImavatarChangedNotify;
}
- (IMAvatarChangedNotifyBuilder*) clear {
  self.resultImavatarChangedNotify = [[IMAvatarChangedNotify alloc] init];
  return self;
}
- (IMAvatarChangedNotifyBuilder*) clone {
  return [IMAvatarChangedNotify builderWithPrototype:resultImavatarChangedNotify];
}
- (IMAvatarChangedNotify*) defaultInstance {
  return [IMAvatarChangedNotify defaultInstance];
}
- (IMAvatarChangedNotify*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (IMAvatarChangedNotify*) buildPartial {
  IMAvatarChangedNotify* returnMe = resultImavatarChangedNotify;
  self.resultImavatarChangedNotify = nil;
  return returnMe;
}
- (IMAvatarChangedNotifyBuilder*) mergeFrom:(IMAvatarChangedNotify*) other {
  if (other == [IMAvatarChangedNotify defaultInstance]) {
    return self;
  }
  if (other.hasChangedUserId) {
    [self setChangedUserId:other.changedUserId];
  }
  if (other.hasAvatarUrl) {
    [self setAvatarUrl:other.avatarUrl];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (IMAvatarChangedNotifyBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (IMAvatarChangedNotifyBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setChangedUserId:[input readUInt32]];
        break;
      }
      case 18: {
        [self setAvatarUrl:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasChangedUserId {
  return resultImavatarChangedNotify.hasChangedUserId;
}
- (UInt32) changedUserId {
  return resultImavatarChangedNotify.changedUserId;
}
- (IMAvatarChangedNotifyBuilder*) setChangedUserId:(UInt32) value {
  resultImavatarChangedNotify.hasChangedUserId = YES;
  resultImavatarChangedNotify.changedUserId = value;
  return self;
}
- (IMAvatarChangedNotifyBuilder*) clearChangedUserId {
  resultImavatarChangedNotify.hasChangedUserId = NO;
  resultImavatarChangedNotify.changedUserId = 0;
  return self;
}
- (BOOL) hasAvatarUrl {
  return resultImavatarChangedNotify.hasAvatarUrl;
}
- (NSString*) avatarUrl {
  return resultImavatarChangedNotify.avatarUrl;
}
- (IMAvatarChangedNotifyBuilder*) setAvatarUrl:(NSString*) value {
  resultImavatarChangedNotify.hasAvatarUrl = YES;
  resultImavatarChangedNotify.avatarUrl = value;
  return self;
}
- (IMAvatarChangedNotifyBuilder*) clearAvatarUrl {
  resultImavatarChangedNotify.hasAvatarUrl = NO;
  resultImavatarChangedNotify.avatarUrl = @"";
  return self;
}
@end

@interface IMChangeSignInfoReq ()
@property UInt32 userId;
@property (strong) NSString* signInfo;
@property (strong) NSData* attachData;
@end

@implementation IMChangeSignInfoReq

- (BOOL) hasUserId {
  return !!hasUserId_;
}
- (void) setHasUserId:(BOOL) _value_ {
  hasUserId_ = !!_value_;
}
@synthesize userId;
- (BOOL) hasSignInfo {
  return !!hasSignInfo_;
}
- (void) setHasSignInfo:(BOOL) _value_ {
  hasSignInfo_ = !!_value_;
}
@synthesize signInfo;
- (BOOL) hasAttachData {
  return !!hasAttachData_;
}
- (void) setHasAttachData:(BOOL) _value_ {
  hasAttachData_ = !!_value_;
}
@synthesize attachData;
- (instancetype) init {
  if ((self = [super init])) {
    self.userId = 0;
    self.signInfo = @"";
    self.attachData = [NSData data];
  }
  return self;
}
static IMChangeSignInfoReq* defaultIMChangeSignInfoReqInstance = nil;
+ (void) initialize {
  if (self == [IMChangeSignInfoReq class]) {
    defaultIMChangeSignInfoReqInstance = [[IMChangeSignInfoReq alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultIMChangeSignInfoReqInstance;
}
- (instancetype) defaultInstance {
  return defaultIMChangeSignInfoReqInstance;
}
- (BOOL) isInitialized {
  if (!self.hasUserId) {
    return NO;
  }
  if (!self.hasSignInfo) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasUserId) {
    [output writeUInt32:1 value:self.userId];
  }
  if (self.hasSignInfo) {
    [output writeString:2 value:self.signInfo];
  }
  if (self.hasAttachData) {
    [output writeData:20 value:self.attachData];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasUserId) {
    size_ += computeUInt32Size(1, self.userId);
  }
  if (self.hasSignInfo) {
    size_ += computeStringSize(2, self.signInfo);
  }
  if (self.hasAttachData) {
    size_ += computeDataSize(20, self.attachData);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (IMChangeSignInfoReq*) parseFromData:(NSData*) data {
  return (IMChangeSignInfoReq*)[[[IMChangeSignInfoReq builder] mergeFromData:data] build];
}
+ (IMChangeSignInfoReq*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMChangeSignInfoReq*)[[[IMChangeSignInfoReq builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (IMChangeSignInfoReq*) parseFromInputStream:(NSInputStream*) input {
  return (IMChangeSignInfoReq*)[[[IMChangeSignInfoReq builder] mergeFromInputStream:input] build];
}
+ (IMChangeSignInfoReq*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMChangeSignInfoReq*)[[[IMChangeSignInfoReq builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (IMChangeSignInfoReq*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (IMChangeSignInfoReq*)[[[IMChangeSignInfoReq builder] mergeFromCodedInputStream:input] build];
}
+ (IMChangeSignInfoReq*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMChangeSignInfoReq*)[[[IMChangeSignInfoReq builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (IMChangeSignInfoReqBuilder*) builder {
  return [[IMChangeSignInfoReqBuilder alloc] init];
}
+ (IMChangeSignInfoReqBuilder*) builderWithPrototype:(IMChangeSignInfoReq*) prototype {
  return [[IMChangeSignInfoReq builder] mergeFrom:prototype];
}
- (IMChangeSignInfoReqBuilder*) builder {
  return [IMChangeSignInfoReq builder];
}
- (IMChangeSignInfoReqBuilder*) toBuilder {
  return [IMChangeSignInfoReq builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasUserId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"userId", [NSNumber numberWithInteger:self.userId]];
  }
  if (self.hasSignInfo) {
    [output appendFormat:@"%@%@: %@\n", indent, @"signInfo", self.signInfo];
  }
  if (self.hasAttachData) {
    [output appendFormat:@"%@%@: %@\n", indent, @"attachData", self.attachData];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasUserId) {
    [dictionary setObject: [NSNumber numberWithInteger:self.userId] forKey: @"userId"];
  }
  if (self.hasSignInfo) {
    [dictionary setObject: self.signInfo forKey: @"signInfo"];
  }
  if (self.hasAttachData) {
    [dictionary setObject: self.attachData forKey: @"attachData"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[IMChangeSignInfoReq class]]) {
    return NO;
  }
  IMChangeSignInfoReq *otherMessage = other;
  return
      self.hasUserId == otherMessage.hasUserId &&
      (!self.hasUserId || self.userId == otherMessage.userId) &&
      self.hasSignInfo == otherMessage.hasSignInfo &&
      (!self.hasSignInfo || [self.signInfo isEqual:otherMessage.signInfo]) &&
      self.hasAttachData == otherMessage.hasAttachData &&
      (!self.hasAttachData || [self.attachData isEqual:otherMessage.attachData]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasUserId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.userId] hash];
  }
  if (self.hasSignInfo) {
    hashCode = hashCode * 31 + [self.signInfo hash];
  }
  if (self.hasAttachData) {
    hashCode = hashCode * 31 + [self.attachData hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface IMChangeSignInfoReqBuilder()
@property (strong) IMChangeSignInfoReq* resultImchangeSignInfoReq;
@end

@implementation IMChangeSignInfoReqBuilder
@synthesize resultImchangeSignInfoReq;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultImchangeSignInfoReq = [[IMChangeSignInfoReq alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultImchangeSignInfoReq;
}
- (IMChangeSignInfoReqBuilder*) clear {
  self.resultImchangeSignInfoReq = [[IMChangeSignInfoReq alloc] init];
  return self;
}
- (IMChangeSignInfoReqBuilder*) clone {
  return [IMChangeSignInfoReq builderWithPrototype:resultImchangeSignInfoReq];
}
- (IMChangeSignInfoReq*) defaultInstance {
  return [IMChangeSignInfoReq defaultInstance];
}
- (IMChangeSignInfoReq*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (IMChangeSignInfoReq*) buildPartial {
  IMChangeSignInfoReq* returnMe = resultImchangeSignInfoReq;
  self.resultImchangeSignInfoReq = nil;
  return returnMe;
}
- (IMChangeSignInfoReqBuilder*) mergeFrom:(IMChangeSignInfoReq*) other {
  if (other == [IMChangeSignInfoReq defaultInstance]) {
    return self;
  }
  if (other.hasUserId) {
    [self setUserId:other.userId];
  }
  if (other.hasSignInfo) {
    [self setSignInfo:other.signInfo];
  }
  if (other.hasAttachData) {
    [self setAttachData:other.attachData];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (IMChangeSignInfoReqBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (IMChangeSignInfoReqBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setUserId:[input readUInt32]];
        break;
      }
      case 18: {
        [self setSignInfo:[input readString]];
        break;
      }
      case 162: {
        [self setAttachData:[input readData]];
        break;
      }
    }
  }
}
- (BOOL) hasUserId {
  return resultImchangeSignInfoReq.hasUserId;
}
- (UInt32) userId {
  return resultImchangeSignInfoReq.userId;
}
- (IMChangeSignInfoReqBuilder*) setUserId:(UInt32) value {
  resultImchangeSignInfoReq.hasUserId = YES;
  resultImchangeSignInfoReq.userId = value;
  return self;
}
- (IMChangeSignInfoReqBuilder*) clearUserId {
  resultImchangeSignInfoReq.hasUserId = NO;
  resultImchangeSignInfoReq.userId = 0;
  return self;
}
- (BOOL) hasSignInfo {
  return resultImchangeSignInfoReq.hasSignInfo;
}
- (NSString*) signInfo {
  return resultImchangeSignInfoReq.signInfo;
}
- (IMChangeSignInfoReqBuilder*) setSignInfo:(NSString*) value {
  resultImchangeSignInfoReq.hasSignInfo = YES;
  resultImchangeSignInfoReq.signInfo = value;
  return self;
}
- (IMChangeSignInfoReqBuilder*) clearSignInfo {
  resultImchangeSignInfoReq.hasSignInfo = NO;
  resultImchangeSignInfoReq.signInfo = @"";
  return self;
}
- (BOOL) hasAttachData {
  return resultImchangeSignInfoReq.hasAttachData;
}
- (NSData*) attachData {
  return resultImchangeSignInfoReq.attachData;
}
- (IMChangeSignInfoReqBuilder*) setAttachData:(NSData*) value {
  resultImchangeSignInfoReq.hasAttachData = YES;
  resultImchangeSignInfoReq.attachData = value;
  return self;
}
- (IMChangeSignInfoReqBuilder*) clearAttachData {
  resultImchangeSignInfoReq.hasAttachData = NO;
  resultImchangeSignInfoReq.attachData = [NSData data];
  return self;
}
@end

@interface IMChangeSignInfoRsp ()
@property UInt32 userId;
@property UInt32 resultCode;
@property (strong) NSString* signInfo;
@property (strong) NSData* attachData;
@end

@implementation IMChangeSignInfoRsp

- (BOOL) hasUserId {
  return !!hasUserId_;
}
- (void) setHasUserId:(BOOL) _value_ {
  hasUserId_ = !!_value_;
}
@synthesize userId;
- (BOOL) hasResultCode {
  return !!hasResultCode_;
}
- (void) setHasResultCode:(BOOL) _value_ {
  hasResultCode_ = !!_value_;
}
@synthesize resultCode;
- (BOOL) hasSignInfo {
  return !!hasSignInfo_;
}
- (void) setHasSignInfo:(BOOL) _value_ {
  hasSignInfo_ = !!_value_;
}
@synthesize signInfo;
- (BOOL) hasAttachData {
  return !!hasAttachData_;
}
- (void) setHasAttachData:(BOOL) _value_ {
  hasAttachData_ = !!_value_;
}
@synthesize attachData;
- (instancetype) init {
  if ((self = [super init])) {
    self.userId = 0;
    self.resultCode = 0;
    self.signInfo = @"";
    self.attachData = [NSData data];
  }
  return self;
}
static IMChangeSignInfoRsp* defaultIMChangeSignInfoRspInstance = nil;
+ (void) initialize {
  if (self == [IMChangeSignInfoRsp class]) {
    defaultIMChangeSignInfoRspInstance = [[IMChangeSignInfoRsp alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultIMChangeSignInfoRspInstance;
}
- (instancetype) defaultInstance {
  return defaultIMChangeSignInfoRspInstance;
}
- (BOOL) isInitialized {
  if (!self.hasUserId) {
    return NO;
  }
  if (!self.hasResultCode) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasUserId) {
    [output writeUInt32:1 value:self.userId];
  }
  if (self.hasResultCode) {
    [output writeUInt32:2 value:self.resultCode];
  }
  if (self.hasSignInfo) {
    [output writeString:3 value:self.signInfo];
  }
  if (self.hasAttachData) {
    [output writeData:20 value:self.attachData];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasUserId) {
    size_ += computeUInt32Size(1, self.userId);
  }
  if (self.hasResultCode) {
    size_ += computeUInt32Size(2, self.resultCode);
  }
  if (self.hasSignInfo) {
    size_ += computeStringSize(3, self.signInfo);
  }
  if (self.hasAttachData) {
    size_ += computeDataSize(20, self.attachData);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (IMChangeSignInfoRsp*) parseFromData:(NSData*) data {
  return (IMChangeSignInfoRsp*)[[[IMChangeSignInfoRsp builder] mergeFromData:data] build];
}
+ (IMChangeSignInfoRsp*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMChangeSignInfoRsp*)[[[IMChangeSignInfoRsp builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (IMChangeSignInfoRsp*) parseFromInputStream:(NSInputStream*) input {
  return (IMChangeSignInfoRsp*)[[[IMChangeSignInfoRsp builder] mergeFromInputStream:input] build];
}
+ (IMChangeSignInfoRsp*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMChangeSignInfoRsp*)[[[IMChangeSignInfoRsp builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (IMChangeSignInfoRsp*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (IMChangeSignInfoRsp*)[[[IMChangeSignInfoRsp builder] mergeFromCodedInputStream:input] build];
}
+ (IMChangeSignInfoRsp*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMChangeSignInfoRsp*)[[[IMChangeSignInfoRsp builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (IMChangeSignInfoRspBuilder*) builder {
  return [[IMChangeSignInfoRspBuilder alloc] init];
}
+ (IMChangeSignInfoRspBuilder*) builderWithPrototype:(IMChangeSignInfoRsp*) prototype {
  return [[IMChangeSignInfoRsp builder] mergeFrom:prototype];
}
- (IMChangeSignInfoRspBuilder*) builder {
  return [IMChangeSignInfoRsp builder];
}
- (IMChangeSignInfoRspBuilder*) toBuilder {
  return [IMChangeSignInfoRsp builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasUserId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"userId", [NSNumber numberWithInteger:self.userId]];
  }
  if (self.hasResultCode) {
    [output appendFormat:@"%@%@: %@\n", indent, @"resultCode", [NSNumber numberWithInteger:self.resultCode]];
  }
  if (self.hasSignInfo) {
    [output appendFormat:@"%@%@: %@\n", indent, @"signInfo", self.signInfo];
  }
  if (self.hasAttachData) {
    [output appendFormat:@"%@%@: %@\n", indent, @"attachData", self.attachData];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasUserId) {
    [dictionary setObject: [NSNumber numberWithInteger:self.userId] forKey: @"userId"];
  }
  if (self.hasResultCode) {
    [dictionary setObject: [NSNumber numberWithInteger:self.resultCode] forKey: @"resultCode"];
  }
  if (self.hasSignInfo) {
    [dictionary setObject: self.signInfo forKey: @"signInfo"];
  }
  if (self.hasAttachData) {
    [dictionary setObject: self.attachData forKey: @"attachData"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[IMChangeSignInfoRsp class]]) {
    return NO;
  }
  IMChangeSignInfoRsp *otherMessage = other;
  return
      self.hasUserId == otherMessage.hasUserId &&
      (!self.hasUserId || self.userId == otherMessage.userId) &&
      self.hasResultCode == otherMessage.hasResultCode &&
      (!self.hasResultCode || self.resultCode == otherMessage.resultCode) &&
      self.hasSignInfo == otherMessage.hasSignInfo &&
      (!self.hasSignInfo || [self.signInfo isEqual:otherMessage.signInfo]) &&
      self.hasAttachData == otherMessage.hasAttachData &&
      (!self.hasAttachData || [self.attachData isEqual:otherMessage.attachData]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasUserId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.userId] hash];
  }
  if (self.hasResultCode) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.resultCode] hash];
  }
  if (self.hasSignInfo) {
    hashCode = hashCode * 31 + [self.signInfo hash];
  }
  if (self.hasAttachData) {
    hashCode = hashCode * 31 + [self.attachData hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface IMChangeSignInfoRspBuilder()
@property (strong) IMChangeSignInfoRsp* resultImchangeSignInfoRsp;
@end

@implementation IMChangeSignInfoRspBuilder
@synthesize resultImchangeSignInfoRsp;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultImchangeSignInfoRsp = [[IMChangeSignInfoRsp alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultImchangeSignInfoRsp;
}
- (IMChangeSignInfoRspBuilder*) clear {
  self.resultImchangeSignInfoRsp = [[IMChangeSignInfoRsp alloc] init];
  return self;
}
- (IMChangeSignInfoRspBuilder*) clone {
  return [IMChangeSignInfoRsp builderWithPrototype:resultImchangeSignInfoRsp];
}
- (IMChangeSignInfoRsp*) defaultInstance {
  return [IMChangeSignInfoRsp defaultInstance];
}
- (IMChangeSignInfoRsp*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (IMChangeSignInfoRsp*) buildPartial {
  IMChangeSignInfoRsp* returnMe = resultImchangeSignInfoRsp;
  self.resultImchangeSignInfoRsp = nil;
  return returnMe;
}
- (IMChangeSignInfoRspBuilder*) mergeFrom:(IMChangeSignInfoRsp*) other {
  if (other == [IMChangeSignInfoRsp defaultInstance]) {
    return self;
  }
  if (other.hasUserId) {
    [self setUserId:other.userId];
  }
  if (other.hasResultCode) {
    [self setResultCode:other.resultCode];
  }
  if (other.hasSignInfo) {
    [self setSignInfo:other.signInfo];
  }
  if (other.hasAttachData) {
    [self setAttachData:other.attachData];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (IMChangeSignInfoRspBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (IMChangeSignInfoRspBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setUserId:[input readUInt32]];
        break;
      }
      case 16: {
        [self setResultCode:[input readUInt32]];
        break;
      }
      case 26: {
        [self setSignInfo:[input readString]];
        break;
      }
      case 162: {
        [self setAttachData:[input readData]];
        break;
      }
    }
  }
}
- (BOOL) hasUserId {
  return resultImchangeSignInfoRsp.hasUserId;
}
- (UInt32) userId {
  return resultImchangeSignInfoRsp.userId;
}
- (IMChangeSignInfoRspBuilder*) setUserId:(UInt32) value {
  resultImchangeSignInfoRsp.hasUserId = YES;
  resultImchangeSignInfoRsp.userId = value;
  return self;
}
- (IMChangeSignInfoRspBuilder*) clearUserId {
  resultImchangeSignInfoRsp.hasUserId = NO;
  resultImchangeSignInfoRsp.userId = 0;
  return self;
}
- (BOOL) hasResultCode {
  return resultImchangeSignInfoRsp.hasResultCode;
}
- (UInt32) resultCode {
  return resultImchangeSignInfoRsp.resultCode;
}
- (IMChangeSignInfoRspBuilder*) setResultCode:(UInt32) value {
  resultImchangeSignInfoRsp.hasResultCode = YES;
  resultImchangeSignInfoRsp.resultCode = value;
  return self;
}
- (IMChangeSignInfoRspBuilder*) clearResultCode {
  resultImchangeSignInfoRsp.hasResultCode = NO;
  resultImchangeSignInfoRsp.resultCode = 0;
  return self;
}
- (BOOL) hasSignInfo {
  return resultImchangeSignInfoRsp.hasSignInfo;
}
- (NSString*) signInfo {
  return resultImchangeSignInfoRsp.signInfo;
}
- (IMChangeSignInfoRspBuilder*) setSignInfo:(NSString*) value {
  resultImchangeSignInfoRsp.hasSignInfo = YES;
  resultImchangeSignInfoRsp.signInfo = value;
  return self;
}
- (IMChangeSignInfoRspBuilder*) clearSignInfo {
  resultImchangeSignInfoRsp.hasSignInfo = NO;
  resultImchangeSignInfoRsp.signInfo = @"";
  return self;
}
- (BOOL) hasAttachData {
  return resultImchangeSignInfoRsp.hasAttachData;
}
- (NSData*) attachData {
  return resultImchangeSignInfoRsp.attachData;
}
- (IMChangeSignInfoRspBuilder*) setAttachData:(NSData*) value {
  resultImchangeSignInfoRsp.hasAttachData = YES;
  resultImchangeSignInfoRsp.attachData = value;
  return self;
}
- (IMChangeSignInfoRspBuilder*) clearAttachData {
  resultImchangeSignInfoRsp.hasAttachData = NO;
  resultImchangeSignInfoRsp.attachData = [NSData data];
  return self;
}
@end

@interface IMSignInfoChangedNotify ()
@property UInt32 changedUserId;
@property (strong) NSString* signInfo;
@end

@implementation IMSignInfoChangedNotify

- (BOOL) hasChangedUserId {
  return !!hasChangedUserId_;
}
- (void) setHasChangedUserId:(BOOL) _value_ {
  hasChangedUserId_ = !!_value_;
}
@synthesize changedUserId;
- (BOOL) hasSignInfo {
  return !!hasSignInfo_;
}
- (void) setHasSignInfo:(BOOL) _value_ {
  hasSignInfo_ = !!_value_;
}
@synthesize signInfo;
- (instancetype) init {
  if ((self = [super init])) {
    self.changedUserId = 0;
    self.signInfo = @"";
  }
  return self;
}
static IMSignInfoChangedNotify* defaultIMSignInfoChangedNotifyInstance = nil;
+ (void) initialize {
  if (self == [IMSignInfoChangedNotify class]) {
    defaultIMSignInfoChangedNotifyInstance = [[IMSignInfoChangedNotify alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultIMSignInfoChangedNotifyInstance;
}
- (instancetype) defaultInstance {
  return defaultIMSignInfoChangedNotifyInstance;
}
- (BOOL) isInitialized {
  if (!self.hasChangedUserId) {
    return NO;
  }
  if (!self.hasSignInfo) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasChangedUserId) {
    [output writeUInt32:1 value:self.changedUserId];
  }
  if (self.hasSignInfo) {
    [output writeString:2 value:self.signInfo];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasChangedUserId) {
    size_ += computeUInt32Size(1, self.changedUserId);
  }
  if (self.hasSignInfo) {
    size_ += computeStringSize(2, self.signInfo);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (IMSignInfoChangedNotify*) parseFromData:(NSData*) data {
  return (IMSignInfoChangedNotify*)[[[IMSignInfoChangedNotify builder] mergeFromData:data] build];
}
+ (IMSignInfoChangedNotify*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMSignInfoChangedNotify*)[[[IMSignInfoChangedNotify builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (IMSignInfoChangedNotify*) parseFromInputStream:(NSInputStream*) input {
  return (IMSignInfoChangedNotify*)[[[IMSignInfoChangedNotify builder] mergeFromInputStream:input] build];
}
+ (IMSignInfoChangedNotify*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMSignInfoChangedNotify*)[[[IMSignInfoChangedNotify builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (IMSignInfoChangedNotify*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (IMSignInfoChangedNotify*)[[[IMSignInfoChangedNotify builder] mergeFromCodedInputStream:input] build];
}
+ (IMSignInfoChangedNotify*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMSignInfoChangedNotify*)[[[IMSignInfoChangedNotify builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (IMSignInfoChangedNotifyBuilder*) builder {
  return [[IMSignInfoChangedNotifyBuilder alloc] init];
}
+ (IMSignInfoChangedNotifyBuilder*) builderWithPrototype:(IMSignInfoChangedNotify*) prototype {
  return [[IMSignInfoChangedNotify builder] mergeFrom:prototype];
}
- (IMSignInfoChangedNotifyBuilder*) builder {
  return [IMSignInfoChangedNotify builder];
}
- (IMSignInfoChangedNotifyBuilder*) toBuilder {
  return [IMSignInfoChangedNotify builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasChangedUserId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"changedUserId", [NSNumber numberWithInteger:self.changedUserId]];
  }
  if (self.hasSignInfo) {
    [output appendFormat:@"%@%@: %@\n", indent, @"signInfo", self.signInfo];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasChangedUserId) {
    [dictionary setObject: [NSNumber numberWithInteger:self.changedUserId] forKey: @"changedUserId"];
  }
  if (self.hasSignInfo) {
    [dictionary setObject: self.signInfo forKey: @"signInfo"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[IMSignInfoChangedNotify class]]) {
    return NO;
  }
  IMSignInfoChangedNotify *otherMessage = other;
  return
      self.hasChangedUserId == otherMessage.hasChangedUserId &&
      (!self.hasChangedUserId || self.changedUserId == otherMessage.changedUserId) &&
      self.hasSignInfo == otherMessage.hasSignInfo &&
      (!self.hasSignInfo || [self.signInfo isEqual:otherMessage.signInfo]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasChangedUserId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.changedUserId] hash];
  }
  if (self.hasSignInfo) {
    hashCode = hashCode * 31 + [self.signInfo hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface IMSignInfoChangedNotifyBuilder()
@property (strong) IMSignInfoChangedNotify* resultImsignInfoChangedNotify;
@end

@implementation IMSignInfoChangedNotifyBuilder
@synthesize resultImsignInfoChangedNotify;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultImsignInfoChangedNotify = [[IMSignInfoChangedNotify alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultImsignInfoChangedNotify;
}
- (IMSignInfoChangedNotifyBuilder*) clear {
  self.resultImsignInfoChangedNotify = [[IMSignInfoChangedNotify alloc] init];
  return self;
}
- (IMSignInfoChangedNotifyBuilder*) clone {
  return [IMSignInfoChangedNotify builderWithPrototype:resultImsignInfoChangedNotify];
}
- (IMSignInfoChangedNotify*) defaultInstance {
  return [IMSignInfoChangedNotify defaultInstance];
}
- (IMSignInfoChangedNotify*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (IMSignInfoChangedNotify*) buildPartial {
  IMSignInfoChangedNotify* returnMe = resultImsignInfoChangedNotify;
  self.resultImsignInfoChangedNotify = nil;
  return returnMe;
}
- (IMSignInfoChangedNotifyBuilder*) mergeFrom:(IMSignInfoChangedNotify*) other {
  if (other == [IMSignInfoChangedNotify defaultInstance]) {
    return self;
  }
  if (other.hasChangedUserId) {
    [self setChangedUserId:other.changedUserId];
  }
  if (other.hasSignInfo) {
    [self setSignInfo:other.signInfo];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (IMSignInfoChangedNotifyBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (IMSignInfoChangedNotifyBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setChangedUserId:[input readUInt32]];
        break;
      }
      case 18: {
        [self setSignInfo:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasChangedUserId {
  return resultImsignInfoChangedNotify.hasChangedUserId;
}
- (UInt32) changedUserId {
  return resultImsignInfoChangedNotify.changedUserId;
}
- (IMSignInfoChangedNotifyBuilder*) setChangedUserId:(UInt32) value {
  resultImsignInfoChangedNotify.hasChangedUserId = YES;
  resultImsignInfoChangedNotify.changedUserId = value;
  return self;
}
- (IMSignInfoChangedNotifyBuilder*) clearChangedUserId {
  resultImsignInfoChangedNotify.hasChangedUserId = NO;
  resultImsignInfoChangedNotify.changedUserId = 0;
  return self;
}
- (BOOL) hasSignInfo {
  return resultImsignInfoChangedNotify.hasSignInfo;
}
- (NSString*) signInfo {
  return resultImsignInfoChangedNotify.signInfo;
}
- (IMSignInfoChangedNotifyBuilder*) setSignInfo:(NSString*) value {
  resultImsignInfoChangedNotify.hasSignInfo = YES;
  resultImsignInfoChangedNotify.signInfo = value;
  return self;
}
- (IMSignInfoChangedNotifyBuilder*) clearSignInfo {
  resultImsignInfoChangedNotify.hasSignInfo = NO;
  resultImsignInfoChangedNotify.signInfo = @"";
  return self;
}
@end

@interface IMGetuiTokenReq ()
@property UInt32 userId;
@property (strong) NSString* clientId;
@property ClientType clientType;
@property (strong) NSString* deviceToken;
@property (strong) NSData* attachData;
@end

@implementation IMGetuiTokenReq

- (BOOL) hasUserId {
  return !!hasUserId_;
}
- (void) setHasUserId:(BOOL) _value_ {
  hasUserId_ = !!_value_;
}
@synthesize userId;
- (BOOL) hasClientId {
  return !!hasClientId_;
}
- (void) setHasClientId:(BOOL) _value_ {
  hasClientId_ = !!_value_;
}
@synthesize clientId;
- (BOOL) hasClientType {
  return !!hasClientType_;
}
- (void) setHasClientType:(BOOL) _value_ {
  hasClientType_ = !!_value_;
}
@synthesize clientType;
- (BOOL) hasDeviceToken {
  return !!hasDeviceToken_;
}
- (void) setHasDeviceToken:(BOOL) _value_ {
  hasDeviceToken_ = !!_value_;
}
@synthesize deviceToken;
- (BOOL) hasAttachData {
  return !!hasAttachData_;
}
- (void) setHasAttachData:(BOOL) _value_ {
  hasAttachData_ = !!_value_;
}
@synthesize attachData;
- (instancetype) init {
  if ((self = [super init])) {
    self.userId = 0;
    self.clientId = @"";
    self.clientType = ClientTypeClientTypeWindows;
    self.deviceToken = @"";
    self.attachData = [NSData data];
  }
  return self;
}
static IMGetuiTokenReq* defaultIMGetuiTokenReqInstance = nil;
+ (void) initialize {
  if (self == [IMGetuiTokenReq class]) {
    defaultIMGetuiTokenReqInstance = [[IMGetuiTokenReq alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultIMGetuiTokenReqInstance;
}
- (instancetype) defaultInstance {
  return defaultIMGetuiTokenReqInstance;
}
- (BOOL) isInitialized {
  if (!self.hasUserId) {
    return NO;
  }
  if (!self.hasClientId) {
    return NO;
  }
  if (!self.hasClientType) {
    return NO;
  }
  if (!self.hasDeviceToken) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasUserId) {
    [output writeUInt32:1 value:self.userId];
  }
  if (self.hasClientId) {
    [output writeString:2 value:self.clientId];
  }
  if (self.hasClientType) {
    [output writeEnum:3 value:self.clientType];
  }
  if (self.hasDeviceToken) {
    [output writeString:4 value:self.deviceToken];
  }
  if (self.hasAttachData) {
    [output writeData:20 value:self.attachData];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasUserId) {
    size_ += computeUInt32Size(1, self.userId);
  }
  if (self.hasClientId) {
    size_ += computeStringSize(2, self.clientId);
  }
  if (self.hasClientType) {
    size_ += computeEnumSize(3, self.clientType);
  }
  if (self.hasDeviceToken) {
    size_ += computeStringSize(4, self.deviceToken);
  }
  if (self.hasAttachData) {
    size_ += computeDataSize(20, self.attachData);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (IMGetuiTokenReq*) parseFromData:(NSData*) data {
  return (IMGetuiTokenReq*)[[[IMGetuiTokenReq builder] mergeFromData:data] build];
}
+ (IMGetuiTokenReq*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMGetuiTokenReq*)[[[IMGetuiTokenReq builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (IMGetuiTokenReq*) parseFromInputStream:(NSInputStream*) input {
  return (IMGetuiTokenReq*)[[[IMGetuiTokenReq builder] mergeFromInputStream:input] build];
}
+ (IMGetuiTokenReq*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMGetuiTokenReq*)[[[IMGetuiTokenReq builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (IMGetuiTokenReq*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (IMGetuiTokenReq*)[[[IMGetuiTokenReq builder] mergeFromCodedInputStream:input] build];
}
+ (IMGetuiTokenReq*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMGetuiTokenReq*)[[[IMGetuiTokenReq builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (IMGetuiTokenReqBuilder*) builder {
  return [[IMGetuiTokenReqBuilder alloc] init];
}
+ (IMGetuiTokenReqBuilder*) builderWithPrototype:(IMGetuiTokenReq*) prototype {
  return [[IMGetuiTokenReq builder] mergeFrom:prototype];
}
- (IMGetuiTokenReqBuilder*) builder {
  return [IMGetuiTokenReq builder];
}
- (IMGetuiTokenReqBuilder*) toBuilder {
  return [IMGetuiTokenReq builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasUserId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"userId", [NSNumber numberWithInteger:self.userId]];
  }
  if (self.hasClientId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"clientId", self.clientId];
  }
  if (self.hasClientType) {
    [output appendFormat:@"%@%@: %@\n", indent, @"clientType", NSStringFromClientType(self.clientType)];
  }
  if (self.hasDeviceToken) {
    [output appendFormat:@"%@%@: %@\n", indent, @"deviceToken", self.deviceToken];
  }
  if (self.hasAttachData) {
    [output appendFormat:@"%@%@: %@\n", indent, @"attachData", self.attachData];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasUserId) {
    [dictionary setObject: [NSNumber numberWithInteger:self.userId] forKey: @"userId"];
  }
  if (self.hasClientId) {
    [dictionary setObject: self.clientId forKey: @"clientId"];
  }
  if (self.hasClientType) {
    [dictionary setObject: @(self.clientType) forKey: @"clientType"];
  }
  if (self.hasDeviceToken) {
    [dictionary setObject: self.deviceToken forKey: @"deviceToken"];
  }
  if (self.hasAttachData) {
    [dictionary setObject: self.attachData forKey: @"attachData"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[IMGetuiTokenReq class]]) {
    return NO;
  }
  IMGetuiTokenReq *otherMessage = other;
  return
      self.hasUserId == otherMessage.hasUserId &&
      (!self.hasUserId || self.userId == otherMessage.userId) &&
      self.hasClientId == otherMessage.hasClientId &&
      (!self.hasClientId || [self.clientId isEqual:otherMessage.clientId]) &&
      self.hasClientType == otherMessage.hasClientType &&
      (!self.hasClientType || self.clientType == otherMessage.clientType) &&
      self.hasDeviceToken == otherMessage.hasDeviceToken &&
      (!self.hasDeviceToken || [self.deviceToken isEqual:otherMessage.deviceToken]) &&
      self.hasAttachData == otherMessage.hasAttachData &&
      (!self.hasAttachData || [self.attachData isEqual:otherMessage.attachData]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasUserId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.userId] hash];
  }
  if (self.hasClientId) {
    hashCode = hashCode * 31 + [self.clientId hash];
  }
  if (self.hasClientType) {
    hashCode = hashCode * 31 + self.clientType;
  }
  if (self.hasDeviceToken) {
    hashCode = hashCode * 31 + [self.deviceToken hash];
  }
  if (self.hasAttachData) {
    hashCode = hashCode * 31 + [self.attachData hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface IMGetuiTokenReqBuilder()
@property (strong) IMGetuiTokenReq* resultImgetuiTokenReq;
@end

@implementation IMGetuiTokenReqBuilder
@synthesize resultImgetuiTokenReq;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultImgetuiTokenReq = [[IMGetuiTokenReq alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultImgetuiTokenReq;
}
- (IMGetuiTokenReqBuilder*) clear {
  self.resultImgetuiTokenReq = [[IMGetuiTokenReq alloc] init];
  return self;
}
- (IMGetuiTokenReqBuilder*) clone {
  return [IMGetuiTokenReq builderWithPrototype:resultImgetuiTokenReq];
}
- (IMGetuiTokenReq*) defaultInstance {
  return [IMGetuiTokenReq defaultInstance];
}
- (IMGetuiTokenReq*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (IMGetuiTokenReq*) buildPartial {
  IMGetuiTokenReq* returnMe = resultImgetuiTokenReq;
  self.resultImgetuiTokenReq = nil;
  return returnMe;
}
- (IMGetuiTokenReqBuilder*) mergeFrom:(IMGetuiTokenReq*) other {
  if (other == [IMGetuiTokenReq defaultInstance]) {
    return self;
  }
  if (other.hasUserId) {
    [self setUserId:other.userId];
  }
  if (other.hasClientId) {
    [self setClientId:other.clientId];
  }
  if (other.hasClientType) {
    [self setClientType:other.clientType];
  }
  if (other.hasDeviceToken) {
    [self setDeviceToken:other.deviceToken];
  }
  if (other.hasAttachData) {
    [self setAttachData:other.attachData];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (IMGetuiTokenReqBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (IMGetuiTokenReqBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setUserId:[input readUInt32]];
        break;
      }
      case 18: {
        [self setClientId:[input readString]];
        break;
      }
      case 24: {
        ClientType value = (ClientType)[input readEnum];
        if (ClientTypeIsValidValue(value)) {
          [self setClientType:value];
        } else {
          [unknownFields mergeVarintField:3 value:value];
        }
        break;
      }
      case 34: {
        [self setDeviceToken:[input readString]];
        break;
      }
      case 162: {
        [self setAttachData:[input readData]];
        break;
      }
    }
  }
}
- (BOOL) hasUserId {
  return resultImgetuiTokenReq.hasUserId;
}
- (UInt32) userId {
  return resultImgetuiTokenReq.userId;
}
- (IMGetuiTokenReqBuilder*) setUserId:(UInt32) value {
  resultImgetuiTokenReq.hasUserId = YES;
  resultImgetuiTokenReq.userId = value;
  return self;
}
- (IMGetuiTokenReqBuilder*) clearUserId {
  resultImgetuiTokenReq.hasUserId = NO;
  resultImgetuiTokenReq.userId = 0;
  return self;
}
- (BOOL) hasClientId {
  return resultImgetuiTokenReq.hasClientId;
}
- (NSString*) clientId {
  return resultImgetuiTokenReq.clientId;
}
- (IMGetuiTokenReqBuilder*) setClientId:(NSString*) value {
  resultImgetuiTokenReq.hasClientId = YES;
  resultImgetuiTokenReq.clientId = value;
  return self;
}
- (IMGetuiTokenReqBuilder*) clearClientId {
  resultImgetuiTokenReq.hasClientId = NO;
  resultImgetuiTokenReq.clientId = @"";
  return self;
}
- (BOOL) hasClientType {
  return resultImgetuiTokenReq.hasClientType;
}
- (ClientType) clientType {
  return resultImgetuiTokenReq.clientType;
}
- (IMGetuiTokenReqBuilder*) setClientType:(ClientType) value {
  resultImgetuiTokenReq.hasClientType = YES;
  resultImgetuiTokenReq.clientType = value;
  return self;
}
- (IMGetuiTokenReqBuilder*) clearClientType {
  resultImgetuiTokenReq.hasClientType = NO;
  resultImgetuiTokenReq.clientType = ClientTypeClientTypeWindows;
  return self;
}
- (BOOL) hasDeviceToken {
  return resultImgetuiTokenReq.hasDeviceToken;
}
- (NSString*) deviceToken {
  return resultImgetuiTokenReq.deviceToken;
}
- (IMGetuiTokenReqBuilder*) setDeviceToken:(NSString*) value {
  resultImgetuiTokenReq.hasDeviceToken = YES;
  resultImgetuiTokenReq.deviceToken = value;
  return self;
}
- (IMGetuiTokenReqBuilder*) clearDeviceToken {
  resultImgetuiTokenReq.hasDeviceToken = NO;
  resultImgetuiTokenReq.deviceToken = @"";
  return self;
}
- (BOOL) hasAttachData {
  return resultImgetuiTokenReq.hasAttachData;
}
- (NSData*) attachData {
  return resultImgetuiTokenReq.attachData;
}
- (IMGetuiTokenReqBuilder*) setAttachData:(NSData*) value {
  resultImgetuiTokenReq.hasAttachData = YES;
  resultImgetuiTokenReq.attachData = value;
  return self;
}
- (IMGetuiTokenReqBuilder*) clearAttachData {
  resultImgetuiTokenReq.hasAttachData = NO;
  resultImgetuiTokenReq.attachData = [NSData data];
  return self;
}
@end

@interface IMGetuiTokenRsp ()
@property UInt32 userId;
@property (strong) NSData* attachData;
@end

@implementation IMGetuiTokenRsp

- (BOOL) hasUserId {
  return !!hasUserId_;
}
- (void) setHasUserId:(BOOL) _value_ {
  hasUserId_ = !!_value_;
}
@synthesize userId;
- (BOOL) hasAttachData {
  return !!hasAttachData_;
}
- (void) setHasAttachData:(BOOL) _value_ {
  hasAttachData_ = !!_value_;
}
@synthesize attachData;
- (instancetype) init {
  if ((self = [super init])) {
    self.userId = 0;
    self.attachData = [NSData data];
  }
  return self;
}
static IMGetuiTokenRsp* defaultIMGetuiTokenRspInstance = nil;
+ (void) initialize {
  if (self == [IMGetuiTokenRsp class]) {
    defaultIMGetuiTokenRspInstance = [[IMGetuiTokenRsp alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultIMGetuiTokenRspInstance;
}
- (instancetype) defaultInstance {
  return defaultIMGetuiTokenRspInstance;
}
- (BOOL) isInitialized {
  if (!self.hasUserId) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasUserId) {
    [output writeUInt32:1 value:self.userId];
  }
  if (self.hasAttachData) {
    [output writeData:20 value:self.attachData];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasUserId) {
    size_ += computeUInt32Size(1, self.userId);
  }
  if (self.hasAttachData) {
    size_ += computeDataSize(20, self.attachData);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (IMGetuiTokenRsp*) parseFromData:(NSData*) data {
  return (IMGetuiTokenRsp*)[[[IMGetuiTokenRsp builder] mergeFromData:data] build];
}
+ (IMGetuiTokenRsp*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMGetuiTokenRsp*)[[[IMGetuiTokenRsp builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (IMGetuiTokenRsp*) parseFromInputStream:(NSInputStream*) input {
  return (IMGetuiTokenRsp*)[[[IMGetuiTokenRsp builder] mergeFromInputStream:input] build];
}
+ (IMGetuiTokenRsp*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMGetuiTokenRsp*)[[[IMGetuiTokenRsp builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (IMGetuiTokenRsp*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (IMGetuiTokenRsp*)[[[IMGetuiTokenRsp builder] mergeFromCodedInputStream:input] build];
}
+ (IMGetuiTokenRsp*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMGetuiTokenRsp*)[[[IMGetuiTokenRsp builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (IMGetuiTokenRspBuilder*) builder {
  return [[IMGetuiTokenRspBuilder alloc] init];
}
+ (IMGetuiTokenRspBuilder*) builderWithPrototype:(IMGetuiTokenRsp*) prototype {
  return [[IMGetuiTokenRsp builder] mergeFrom:prototype];
}
- (IMGetuiTokenRspBuilder*) builder {
  return [IMGetuiTokenRsp builder];
}
- (IMGetuiTokenRspBuilder*) toBuilder {
  return [IMGetuiTokenRsp builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasUserId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"userId", [NSNumber numberWithInteger:self.userId]];
  }
  if (self.hasAttachData) {
    [output appendFormat:@"%@%@: %@\n", indent, @"attachData", self.attachData];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasUserId) {
    [dictionary setObject: [NSNumber numberWithInteger:self.userId] forKey: @"userId"];
  }
  if (self.hasAttachData) {
    [dictionary setObject: self.attachData forKey: @"attachData"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[IMGetuiTokenRsp class]]) {
    return NO;
  }
  IMGetuiTokenRsp *otherMessage = other;
  return
      self.hasUserId == otherMessage.hasUserId &&
      (!self.hasUserId || self.userId == otherMessage.userId) &&
      self.hasAttachData == otherMessage.hasAttachData &&
      (!self.hasAttachData || [self.attachData isEqual:otherMessage.attachData]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasUserId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.userId] hash];
  }
  if (self.hasAttachData) {
    hashCode = hashCode * 31 + [self.attachData hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface IMGetuiTokenRspBuilder()
@property (strong) IMGetuiTokenRsp* resultImgetuiTokenRsp;
@end

@implementation IMGetuiTokenRspBuilder
@synthesize resultImgetuiTokenRsp;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultImgetuiTokenRsp = [[IMGetuiTokenRsp alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultImgetuiTokenRsp;
}
- (IMGetuiTokenRspBuilder*) clear {
  self.resultImgetuiTokenRsp = [[IMGetuiTokenRsp alloc] init];
  return self;
}
- (IMGetuiTokenRspBuilder*) clone {
  return [IMGetuiTokenRsp builderWithPrototype:resultImgetuiTokenRsp];
}
- (IMGetuiTokenRsp*) defaultInstance {
  return [IMGetuiTokenRsp defaultInstance];
}
- (IMGetuiTokenRsp*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (IMGetuiTokenRsp*) buildPartial {
  IMGetuiTokenRsp* returnMe = resultImgetuiTokenRsp;
  self.resultImgetuiTokenRsp = nil;
  return returnMe;
}
- (IMGetuiTokenRspBuilder*) mergeFrom:(IMGetuiTokenRsp*) other {
  if (other == [IMGetuiTokenRsp defaultInstance]) {
    return self;
  }
  if (other.hasUserId) {
    [self setUserId:other.userId];
  }
  if (other.hasAttachData) {
    [self setAttachData:other.attachData];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (IMGetuiTokenRspBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (IMGetuiTokenRspBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setUserId:[input readUInt32]];
        break;
      }
      case 162: {
        [self setAttachData:[input readData]];
        break;
      }
    }
  }
}
- (BOOL) hasUserId {
  return resultImgetuiTokenRsp.hasUserId;
}
- (UInt32) userId {
  return resultImgetuiTokenRsp.userId;
}
- (IMGetuiTokenRspBuilder*) setUserId:(UInt32) value {
  resultImgetuiTokenRsp.hasUserId = YES;
  resultImgetuiTokenRsp.userId = value;
  return self;
}
- (IMGetuiTokenRspBuilder*) clearUserId {
  resultImgetuiTokenRsp.hasUserId = NO;
  resultImgetuiTokenRsp.userId = 0;
  return self;
}
- (BOOL) hasAttachData {
  return resultImgetuiTokenRsp.hasAttachData;
}
- (NSData*) attachData {
  return resultImgetuiTokenRsp.attachData;
}
- (IMGetuiTokenRspBuilder*) setAttachData:(NSData*) value {
  resultImgetuiTokenRsp.hasAttachData = YES;
  resultImgetuiTokenRsp.attachData = value;
  return self;
}
- (IMGetuiTokenRspBuilder*) clearAttachData {
  resultImgetuiTokenRsp.hasAttachData = NO;
  resultImgetuiTokenRsp.attachData = [NSData data];
  return self;
}
@end


// @@protoc_insertion_point(global_scope)
