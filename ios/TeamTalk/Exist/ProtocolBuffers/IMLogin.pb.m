// Generated by the protocol buffer compiler.  DO NOT EDIT!

#import "IMLogin.pb.h"
// @@protoc_insertion_point(imports)

@implementation ImloginRoot
static PBExtensionRegistry* extensionRegistry = nil;
+ (PBExtensionRegistry*) extensionRegistry {
  return extensionRegistry;
}

+ (void) initialize {
  if (self == [ImloginRoot class]) {
    PBMutableExtensionRegistry* registry = [PBMutableExtensionRegistry registry];
    [self registerAllExtensions:registry];
    [ImbaseDefineRoot registerAllExtensions:registry];
    extensionRegistry = registry;
  }
}
+ (void) registerAllExtensions:(PBMutableExtensionRegistry*) registry {
}
@end

@interface IMMsgServReq ()
@end

@implementation IMMsgServReq

- (instancetype) init {
  if ((self = [super init])) {
  }
  return self;
}
static IMMsgServReq* defaultIMMsgServReqInstance = nil;
+ (void) initialize {
  if (self == [IMMsgServReq class]) {
    defaultIMMsgServReqInstance = [[IMMsgServReq alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultIMMsgServReqInstance;
}
- (instancetype) defaultInstance {
  return defaultIMMsgServReqInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (IMMsgServReq*) parseFromData:(NSData*) data {
  return (IMMsgServReq*)[[[IMMsgServReq builder] mergeFromData:data] build];
}
+ (IMMsgServReq*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMMsgServReq*)[[[IMMsgServReq builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (IMMsgServReq*) parseFromInputStream:(NSInputStream*) input {
  return (IMMsgServReq*)[[[IMMsgServReq builder] mergeFromInputStream:input] build];
}
+ (IMMsgServReq*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMMsgServReq*)[[[IMMsgServReq builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (IMMsgServReq*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (IMMsgServReq*)[[[IMMsgServReq builder] mergeFromCodedInputStream:input] build];
}
+ (IMMsgServReq*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMMsgServReq*)[[[IMMsgServReq builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (IMMsgServReqBuilder*) builder {
  return [[IMMsgServReqBuilder alloc] init];
}
+ (IMMsgServReqBuilder*) builderWithPrototype:(IMMsgServReq*) prototype {
  return [[IMMsgServReq builder] mergeFrom:prototype];
}
- (IMMsgServReqBuilder*) builder {
  return [IMMsgServReq builder];
}
- (IMMsgServReqBuilder*) toBuilder {
  return [IMMsgServReq builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[IMMsgServReq class]]) {
    return NO;
  }
  IMMsgServReq *otherMessage = other;
  return
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface IMMsgServReqBuilder()
@property (strong) IMMsgServReq* resultImmsgServReq;
@end

@implementation IMMsgServReqBuilder
@synthesize resultImmsgServReq;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultImmsgServReq = [[IMMsgServReq alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultImmsgServReq;
}
- (IMMsgServReqBuilder*) clear {
  self.resultImmsgServReq = [[IMMsgServReq alloc] init];
  return self;
}
- (IMMsgServReqBuilder*) clone {
  return [IMMsgServReq builderWithPrototype:resultImmsgServReq];
}
- (IMMsgServReq*) defaultInstance {
  return [IMMsgServReq defaultInstance];
}
- (IMMsgServReq*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (IMMsgServReq*) buildPartial {
  IMMsgServReq* returnMe = resultImmsgServReq;
  self.resultImmsgServReq = nil;
  return returnMe;
}
- (IMMsgServReqBuilder*) mergeFrom:(IMMsgServReq*) other {
  if (other == [IMMsgServReq defaultInstance]) {
    return self;
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (IMMsgServReqBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (IMMsgServReqBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
    }
  }
}
@end

@interface IMMsgServRsp ()
@property ResultType resultCode;
@property (strong) NSString* priorIp;
@property (strong) NSString* backipIp;
@property UInt32 port;
@end

@implementation IMMsgServRsp

- (BOOL) hasResultCode {
  return !!hasResultCode_;
}
- (void) setHasResultCode:(BOOL) _value_ {
  hasResultCode_ = !!_value_;
}
@synthesize resultCode;
- (BOOL) hasPriorIp {
  return !!hasPriorIp_;
}
- (void) setHasPriorIp:(BOOL) _value_ {
  hasPriorIp_ = !!_value_;
}
@synthesize priorIp;
- (BOOL) hasBackipIp {
  return !!hasBackipIp_;
}
- (void) setHasBackipIp:(BOOL) _value_ {
  hasBackipIp_ = !!_value_;
}
@synthesize backipIp;
- (BOOL) hasPort {
  return !!hasPort_;
}
- (void) setHasPort:(BOOL) _value_ {
  hasPort_ = !!_value_;
}
@synthesize port;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultCode = ResultTypeRefuseReasonNone;
    self.priorIp = @"";
    self.backipIp = @"";
    self.port = 0;
  }
  return self;
}
static IMMsgServRsp* defaultIMMsgServRspInstance = nil;
+ (void) initialize {
  if (self == [IMMsgServRsp class]) {
    defaultIMMsgServRspInstance = [[IMMsgServRsp alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultIMMsgServRspInstance;
}
- (instancetype) defaultInstance {
  return defaultIMMsgServRspInstance;
}
- (BOOL) isInitialized {
  if (!self.hasResultCode) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasResultCode) {
    [output writeEnum:1 value:self.resultCode];
  }
  if (self.hasPriorIp) {
    [output writeString:2 value:self.priorIp];
  }
  if (self.hasBackipIp) {
    [output writeString:3 value:self.backipIp];
  }
  if (self.hasPort) {
    [output writeUInt32:4 value:self.port];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasResultCode) {
    size_ += computeEnumSize(1, self.resultCode);
  }
  if (self.hasPriorIp) {
    size_ += computeStringSize(2, self.priorIp);
  }
  if (self.hasBackipIp) {
    size_ += computeStringSize(3, self.backipIp);
  }
  if (self.hasPort) {
    size_ += computeUInt32Size(4, self.port);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (IMMsgServRsp*) parseFromData:(NSData*) data {
  return (IMMsgServRsp*)[[[IMMsgServRsp builder] mergeFromData:data] build];
}
+ (IMMsgServRsp*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMMsgServRsp*)[[[IMMsgServRsp builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (IMMsgServRsp*) parseFromInputStream:(NSInputStream*) input {
  return (IMMsgServRsp*)[[[IMMsgServRsp builder] mergeFromInputStream:input] build];
}
+ (IMMsgServRsp*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMMsgServRsp*)[[[IMMsgServRsp builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (IMMsgServRsp*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (IMMsgServRsp*)[[[IMMsgServRsp builder] mergeFromCodedInputStream:input] build];
}
+ (IMMsgServRsp*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMMsgServRsp*)[[[IMMsgServRsp builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (IMMsgServRspBuilder*) builder {
  return [[IMMsgServRspBuilder alloc] init];
}
+ (IMMsgServRspBuilder*) builderWithPrototype:(IMMsgServRsp*) prototype {
  return [[IMMsgServRsp builder] mergeFrom:prototype];
}
- (IMMsgServRspBuilder*) builder {
  return [IMMsgServRsp builder];
}
- (IMMsgServRspBuilder*) toBuilder {
  return [IMMsgServRsp builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasResultCode) {
    [output appendFormat:@"%@%@: %@\n", indent, @"resultCode", NSStringFromResultType(self.resultCode)];
  }
  if (self.hasPriorIp) {
    [output appendFormat:@"%@%@: %@\n", indent, @"priorIp", self.priorIp];
  }
  if (self.hasBackipIp) {
    [output appendFormat:@"%@%@: %@\n", indent, @"backipIp", self.backipIp];
  }
  if (self.hasPort) {
    [output appendFormat:@"%@%@: %@\n", indent, @"port", [NSNumber numberWithInteger:self.port]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasResultCode) {
    [dictionary setObject: @(self.resultCode) forKey: @"resultCode"];
  }
  if (self.hasPriorIp) {
    [dictionary setObject: self.priorIp forKey: @"priorIp"];
  }
  if (self.hasBackipIp) {
    [dictionary setObject: self.backipIp forKey: @"backipIp"];
  }
  if (self.hasPort) {
    [dictionary setObject: [NSNumber numberWithInteger:self.port] forKey: @"port"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[IMMsgServRsp class]]) {
    return NO;
  }
  IMMsgServRsp *otherMessage = other;
  return
      self.hasResultCode == otherMessage.hasResultCode &&
      (!self.hasResultCode || self.resultCode == otherMessage.resultCode) &&
      self.hasPriorIp == otherMessage.hasPriorIp &&
      (!self.hasPriorIp || [self.priorIp isEqual:otherMessage.priorIp]) &&
      self.hasBackipIp == otherMessage.hasBackipIp &&
      (!self.hasBackipIp || [self.backipIp isEqual:otherMessage.backipIp]) &&
      self.hasPort == otherMessage.hasPort &&
      (!self.hasPort || self.port == otherMessage.port) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasResultCode) {
    hashCode = hashCode * 31 + self.resultCode;
  }
  if (self.hasPriorIp) {
    hashCode = hashCode * 31 + [self.priorIp hash];
  }
  if (self.hasBackipIp) {
    hashCode = hashCode * 31 + [self.backipIp hash];
  }
  if (self.hasPort) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.port] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface IMMsgServRspBuilder()
@property (strong) IMMsgServRsp* resultImmsgServRsp;
@end

@implementation IMMsgServRspBuilder
@synthesize resultImmsgServRsp;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultImmsgServRsp = [[IMMsgServRsp alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultImmsgServRsp;
}
- (IMMsgServRspBuilder*) clear {
  self.resultImmsgServRsp = [[IMMsgServRsp alloc] init];
  return self;
}
- (IMMsgServRspBuilder*) clone {
  return [IMMsgServRsp builderWithPrototype:resultImmsgServRsp];
}
- (IMMsgServRsp*) defaultInstance {
  return [IMMsgServRsp defaultInstance];
}
- (IMMsgServRsp*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (IMMsgServRsp*) buildPartial {
  IMMsgServRsp* returnMe = resultImmsgServRsp;
  self.resultImmsgServRsp = nil;
  return returnMe;
}
- (IMMsgServRspBuilder*) mergeFrom:(IMMsgServRsp*) other {
  if (other == [IMMsgServRsp defaultInstance]) {
    return self;
  }
  if (other.hasResultCode) {
    [self setResultCode:other.resultCode];
  }
  if (other.hasPriorIp) {
    [self setPriorIp:other.priorIp];
  }
  if (other.hasBackipIp) {
    [self setBackipIp:other.backipIp];
  }
  if (other.hasPort) {
    [self setPort:other.port];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (IMMsgServRspBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (IMMsgServRspBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        ResultType value = (ResultType)[input readEnum];
        if (ResultTypeIsValidValue(value)) {
          [self setResultCode:value];
        } else {
          [unknownFields mergeVarintField:1 value:value];
        }
        break;
      }
      case 18: {
        [self setPriorIp:[input readString]];
        break;
      }
      case 26: {
        [self setBackipIp:[input readString]];
        break;
      }
      case 32: {
        [self setPort:[input readUInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasResultCode {
  return resultImmsgServRsp.hasResultCode;
}
- (ResultType) resultCode {
  return resultImmsgServRsp.resultCode;
}
- (IMMsgServRspBuilder*) setResultCode:(ResultType) value {
  resultImmsgServRsp.hasResultCode = YES;
  resultImmsgServRsp.resultCode = value;
  return self;
}
- (IMMsgServRspBuilder*) clearResultCode {
  resultImmsgServRsp.hasResultCode = NO;
  resultImmsgServRsp.resultCode = ResultTypeRefuseReasonNone;
  return self;
}
- (BOOL) hasPriorIp {
  return resultImmsgServRsp.hasPriorIp;
}
- (NSString*) priorIp {
  return resultImmsgServRsp.priorIp;
}
- (IMMsgServRspBuilder*) setPriorIp:(NSString*) value {
  resultImmsgServRsp.hasPriorIp = YES;
  resultImmsgServRsp.priorIp = value;
  return self;
}
- (IMMsgServRspBuilder*) clearPriorIp {
  resultImmsgServRsp.hasPriorIp = NO;
  resultImmsgServRsp.priorIp = @"";
  return self;
}
- (BOOL) hasBackipIp {
  return resultImmsgServRsp.hasBackipIp;
}
- (NSString*) backipIp {
  return resultImmsgServRsp.backipIp;
}
- (IMMsgServRspBuilder*) setBackipIp:(NSString*) value {
  resultImmsgServRsp.hasBackipIp = YES;
  resultImmsgServRsp.backipIp = value;
  return self;
}
- (IMMsgServRspBuilder*) clearBackipIp {
  resultImmsgServRsp.hasBackipIp = NO;
  resultImmsgServRsp.backipIp = @"";
  return self;
}
- (BOOL) hasPort {
  return resultImmsgServRsp.hasPort;
}
- (UInt32) port {
  return resultImmsgServRsp.port;
}
- (IMMsgServRspBuilder*) setPort:(UInt32) value {
  resultImmsgServRsp.hasPort = YES;
  resultImmsgServRsp.port = value;
  return self;
}
- (IMMsgServRspBuilder*) clearPort {
  resultImmsgServRsp.hasPort = NO;
  resultImmsgServRsp.port = 0;
  return self;
}
@end

@interface IMLoginReq ()
@property (strong) NSString* userName;
@property (strong) NSString* password;
@property UserStatType onlineStatus;
@property ClientType clientType;
@property (strong) NSString* clientVersion;
@end

@implementation IMLoginReq

- (BOOL) hasUserName {
  return !!hasUserName_;
}
- (void) setHasUserName:(BOOL) _value_ {
  hasUserName_ = !!_value_;
}
@synthesize userName;
- (BOOL) hasPassword {
  return !!hasPassword_;
}
- (void) setHasPassword:(BOOL) _value_ {
  hasPassword_ = !!_value_;
}
@synthesize password;
- (BOOL) hasOnlineStatus {
  return !!hasOnlineStatus_;
}
- (void) setHasOnlineStatus:(BOOL) _value_ {
  hasOnlineStatus_ = !!_value_;
}
@synthesize onlineStatus;
- (BOOL) hasClientType {
  return !!hasClientType_;
}
- (void) setHasClientType:(BOOL) _value_ {
  hasClientType_ = !!_value_;
}
@synthesize clientType;
- (BOOL) hasClientVersion {
  return !!hasClientVersion_;
}
- (void) setHasClientVersion:(BOOL) _value_ {
  hasClientVersion_ = !!_value_;
}
@synthesize clientVersion;
- (instancetype) init {
  if ((self = [super init])) {
    self.userName = @"";
    self.password = @"";
    self.onlineStatus = UserStatTypeUserStatusOnline;
    self.clientType = ClientTypeClientTypeWindows;
    self.clientVersion = @"";
  }
  return self;
}
static IMLoginReq* defaultIMLoginReqInstance = nil;
+ (void) initialize {
  if (self == [IMLoginReq class]) {
    defaultIMLoginReqInstance = [[IMLoginReq alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultIMLoginReqInstance;
}
- (instancetype) defaultInstance {
  return defaultIMLoginReqInstance;
}
- (BOOL) isInitialized {
  if (!self.hasUserName) {
    return NO;
  }
  if (!self.hasPassword) {
    return NO;
  }
  if (!self.hasOnlineStatus) {
    return NO;
  }
  if (!self.hasClientType) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasUserName) {
    [output writeString:1 value:self.userName];
  }
  if (self.hasPassword) {
    [output writeString:2 value:self.password];
  }
  if (self.hasOnlineStatus) {
    [output writeEnum:3 value:self.onlineStatus];
  }
  if (self.hasClientType) {
    [output writeEnum:4 value:self.clientType];
  }
  if (self.hasClientVersion) {
    [output writeString:5 value:self.clientVersion];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasUserName) {
    size_ += computeStringSize(1, self.userName);
  }
  if (self.hasPassword) {
    size_ += computeStringSize(2, self.password);
  }
  if (self.hasOnlineStatus) {
    size_ += computeEnumSize(3, self.onlineStatus);
  }
  if (self.hasClientType) {
    size_ += computeEnumSize(4, self.clientType);
  }
  if (self.hasClientVersion) {
    size_ += computeStringSize(5, self.clientVersion);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (IMLoginReq*) parseFromData:(NSData*) data {
  return (IMLoginReq*)[[[IMLoginReq builder] mergeFromData:data] build];
}
+ (IMLoginReq*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMLoginReq*)[[[IMLoginReq builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (IMLoginReq*) parseFromInputStream:(NSInputStream*) input {
  return (IMLoginReq*)[[[IMLoginReq builder] mergeFromInputStream:input] build];
}
+ (IMLoginReq*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMLoginReq*)[[[IMLoginReq builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (IMLoginReq*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (IMLoginReq*)[[[IMLoginReq builder] mergeFromCodedInputStream:input] build];
}
+ (IMLoginReq*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMLoginReq*)[[[IMLoginReq builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (IMLoginReqBuilder*) builder {
  return [[IMLoginReqBuilder alloc] init];
}
+ (IMLoginReqBuilder*) builderWithPrototype:(IMLoginReq*) prototype {
  return [[IMLoginReq builder] mergeFrom:prototype];
}
- (IMLoginReqBuilder*) builder {
  return [IMLoginReq builder];
}
- (IMLoginReqBuilder*) toBuilder {
  return [IMLoginReq builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasUserName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"userName", self.userName];
  }
  if (self.hasPassword) {
    [output appendFormat:@"%@%@: %@\n", indent, @"password", self.password];
  }
  if (self.hasOnlineStatus) {
    [output appendFormat:@"%@%@: %@\n", indent, @"onlineStatus", NSStringFromUserStatType(self.onlineStatus)];
  }
  if (self.hasClientType) {
    [output appendFormat:@"%@%@: %@\n", indent, @"clientType", NSStringFromClientType(self.clientType)];
  }
  if (self.hasClientVersion) {
    [output appendFormat:@"%@%@: %@\n", indent, @"clientVersion", self.clientVersion];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasUserName) {
    [dictionary setObject: self.userName forKey: @"userName"];
  }
  if (self.hasPassword) {
    [dictionary setObject: self.password forKey: @"password"];
  }
  if (self.hasOnlineStatus) {
    [dictionary setObject: @(self.onlineStatus) forKey: @"onlineStatus"];
  }
  if (self.hasClientType) {
    [dictionary setObject: @(self.clientType) forKey: @"clientType"];
  }
  if (self.hasClientVersion) {
    [dictionary setObject: self.clientVersion forKey: @"clientVersion"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[IMLoginReq class]]) {
    return NO;
  }
  IMLoginReq *otherMessage = other;
  return
      self.hasUserName == otherMessage.hasUserName &&
      (!self.hasUserName || [self.userName isEqual:otherMessage.userName]) &&
      self.hasPassword == otherMessage.hasPassword &&
      (!self.hasPassword || [self.password isEqual:otherMessage.password]) &&
      self.hasOnlineStatus == otherMessage.hasOnlineStatus &&
      (!self.hasOnlineStatus || self.onlineStatus == otherMessage.onlineStatus) &&
      self.hasClientType == otherMessage.hasClientType &&
      (!self.hasClientType || self.clientType == otherMessage.clientType) &&
      self.hasClientVersion == otherMessage.hasClientVersion &&
      (!self.hasClientVersion || [self.clientVersion isEqual:otherMessage.clientVersion]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasUserName) {
    hashCode = hashCode * 31 + [self.userName hash];
  }
  if (self.hasPassword) {
    hashCode = hashCode * 31 + [self.password hash];
  }
  if (self.hasOnlineStatus) {
    hashCode = hashCode * 31 + self.onlineStatus;
  }
  if (self.hasClientType) {
    hashCode = hashCode * 31 + self.clientType;
  }
  if (self.hasClientVersion) {
    hashCode = hashCode * 31 + [self.clientVersion hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface IMLoginReqBuilder()
@property (strong) IMLoginReq* resultImloginReq;
@end

@implementation IMLoginReqBuilder
@synthesize resultImloginReq;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultImloginReq = [[IMLoginReq alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultImloginReq;
}
- (IMLoginReqBuilder*) clear {
  self.resultImloginReq = [[IMLoginReq alloc] init];
  return self;
}
- (IMLoginReqBuilder*) clone {
  return [IMLoginReq builderWithPrototype:resultImloginReq];
}
- (IMLoginReq*) defaultInstance {
  return [IMLoginReq defaultInstance];
}
- (IMLoginReq*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (IMLoginReq*) buildPartial {
  IMLoginReq* returnMe = resultImloginReq;
  self.resultImloginReq = nil;
  return returnMe;
}
- (IMLoginReqBuilder*) mergeFrom:(IMLoginReq*) other {
  if (other == [IMLoginReq defaultInstance]) {
    return self;
  }
  if (other.hasUserName) {
    [self setUserName:other.userName];
  }
  if (other.hasPassword) {
    [self setPassword:other.password];
  }
  if (other.hasOnlineStatus) {
    [self setOnlineStatus:other.onlineStatus];
  }
  if (other.hasClientType) {
    [self setClientType:other.clientType];
  }
  if (other.hasClientVersion) {
    [self setClientVersion:other.clientVersion];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (IMLoginReqBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (IMLoginReqBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setUserName:[input readString]];
        break;
      }
      case 18: {
        [self setPassword:[input readString]];
        break;
      }
      case 24: {
        UserStatType value = (UserStatType)[input readEnum];
        if (UserStatTypeIsValidValue(value)) {
          [self setOnlineStatus:value];
        } else {
          [unknownFields mergeVarintField:3 value:value];
        }
        break;
      }
      case 32: {
        ClientType value = (ClientType)[input readEnum];
        if (ClientTypeIsValidValue(value)) {
          [self setClientType:value];
        } else {
          [unknownFields mergeVarintField:4 value:value];
        }
        break;
      }
      case 42: {
        [self setClientVersion:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasUserName {
  return resultImloginReq.hasUserName;
}
- (NSString*) userName {
  return resultImloginReq.userName;
}
- (IMLoginReqBuilder*) setUserName:(NSString*) value {
  resultImloginReq.hasUserName = YES;
  resultImloginReq.userName = value;
  return self;
}
- (IMLoginReqBuilder*) clearUserName {
  resultImloginReq.hasUserName = NO;
  resultImloginReq.userName = @"";
  return self;
}
- (BOOL) hasPassword {
  return resultImloginReq.hasPassword;
}
- (NSString*) password {
  return resultImloginReq.password;
}
- (IMLoginReqBuilder*) setPassword:(NSString*) value {
  resultImloginReq.hasPassword = YES;
  resultImloginReq.password = value;
  return self;
}
- (IMLoginReqBuilder*) clearPassword {
  resultImloginReq.hasPassword = NO;
  resultImloginReq.password = @"";
  return self;
}
- (BOOL) hasOnlineStatus {
  return resultImloginReq.hasOnlineStatus;
}
- (UserStatType) onlineStatus {
  return resultImloginReq.onlineStatus;
}
- (IMLoginReqBuilder*) setOnlineStatus:(UserStatType) value {
  resultImloginReq.hasOnlineStatus = YES;
  resultImloginReq.onlineStatus = value;
  return self;
}
- (IMLoginReqBuilder*) clearOnlineStatus {
  resultImloginReq.hasOnlineStatus = NO;
  resultImloginReq.onlineStatus = UserStatTypeUserStatusOnline;
  return self;
}
- (BOOL) hasClientType {
  return resultImloginReq.hasClientType;
}
- (ClientType) clientType {
  return resultImloginReq.clientType;
}
- (IMLoginReqBuilder*) setClientType:(ClientType) value {
  resultImloginReq.hasClientType = YES;
  resultImloginReq.clientType = value;
  return self;
}
- (IMLoginReqBuilder*) clearClientType {
  resultImloginReq.hasClientType = NO;
  resultImloginReq.clientType = ClientTypeClientTypeWindows;
  return self;
}
- (BOOL) hasClientVersion {
  return resultImloginReq.hasClientVersion;
}
- (NSString*) clientVersion {
  return resultImloginReq.clientVersion;
}
- (IMLoginReqBuilder*) setClientVersion:(NSString*) value {
  resultImloginReq.hasClientVersion = YES;
  resultImloginReq.clientVersion = value;
  return self;
}
- (IMLoginReqBuilder*) clearClientVersion {
  resultImloginReq.hasClientVersion = NO;
  resultImloginReq.clientVersion = @"";
  return self;
}
@end

@interface IMLoginRes ()
@property UInt32 serverTime;
@property ResultType resultCode;
@property (strong) NSString* resultString;
@property UserStatType onlineStatus;
@property (strong) UserInfo* userInfo;
@end

@implementation IMLoginRes

- (BOOL) hasServerTime {
  return !!hasServerTime_;
}
- (void) setHasServerTime:(BOOL) _value_ {
  hasServerTime_ = !!_value_;
}
@synthesize serverTime;
- (BOOL) hasResultCode {
  return !!hasResultCode_;
}
- (void) setHasResultCode:(BOOL) _value_ {
  hasResultCode_ = !!_value_;
}
@synthesize resultCode;
- (BOOL) hasResultString {
  return !!hasResultString_;
}
- (void) setHasResultString:(BOOL) _value_ {
  hasResultString_ = !!_value_;
}
@synthesize resultString;
- (BOOL) hasOnlineStatus {
  return !!hasOnlineStatus_;
}
- (void) setHasOnlineStatus:(BOOL) _value_ {
  hasOnlineStatus_ = !!_value_;
}
@synthesize onlineStatus;
- (BOOL) hasUserInfo {
  return !!hasUserInfo_;
}
- (void) setHasUserInfo:(BOOL) _value_ {
  hasUserInfo_ = !!_value_;
}
@synthesize userInfo;
- (instancetype) init {
  if ((self = [super init])) {
    self.serverTime = 0;
    self.resultCode = ResultTypeRefuseReasonNone;
    self.resultString = @"";
    self.onlineStatus = UserStatTypeUserStatusOnline;
    self.userInfo = [UserInfo defaultInstance];
  }
  return self;
}
static IMLoginRes* defaultIMLoginResInstance = nil;
+ (void) initialize {
  if (self == [IMLoginRes class]) {
    defaultIMLoginResInstance = [[IMLoginRes alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultIMLoginResInstance;
}
- (instancetype) defaultInstance {
  return defaultIMLoginResInstance;
}
- (BOOL) isInitialized {
  if (!self.hasServerTime) {
    return NO;
  }
  if (!self.hasResultCode) {
    return NO;
  }
  if (self.hasUserInfo) {
    if (!self.userInfo.isInitialized) {
      return NO;
    }
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasServerTime) {
    [output writeUInt32:1 value:self.serverTime];
  }
  if (self.hasResultCode) {
    [output writeEnum:2 value:self.resultCode];
  }
  if (self.hasResultString) {
    [output writeString:3 value:self.resultString];
  }
  if (self.hasOnlineStatus) {
    [output writeEnum:4 value:self.onlineStatus];
  }
  if (self.hasUserInfo) {
    [output writeMessage:5 value:self.userInfo];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasServerTime) {
    size_ += computeUInt32Size(1, self.serverTime);
  }
  if (self.hasResultCode) {
    size_ += computeEnumSize(2, self.resultCode);
  }
  if (self.hasResultString) {
    size_ += computeStringSize(3, self.resultString);
  }
  if (self.hasOnlineStatus) {
    size_ += computeEnumSize(4, self.onlineStatus);
  }
  if (self.hasUserInfo) {
    size_ += computeMessageSize(5, self.userInfo);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (IMLoginRes*) parseFromData:(NSData*) data {
  return (IMLoginRes*)[[[IMLoginRes builder] mergeFromData:data] build];
}
+ (IMLoginRes*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMLoginRes*)[[[IMLoginRes builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (IMLoginRes*) parseFromInputStream:(NSInputStream*) input {
  return (IMLoginRes*)[[[IMLoginRes builder] mergeFromInputStream:input] build];
}
+ (IMLoginRes*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMLoginRes*)[[[IMLoginRes builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (IMLoginRes*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (IMLoginRes*)[[[IMLoginRes builder] mergeFromCodedInputStream:input] build];
}
+ (IMLoginRes*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMLoginRes*)[[[IMLoginRes builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (IMLoginResBuilder*) builder {
  return [[IMLoginResBuilder alloc] init];
}
+ (IMLoginResBuilder*) builderWithPrototype:(IMLoginRes*) prototype {
  return [[IMLoginRes builder] mergeFrom:prototype];
}
- (IMLoginResBuilder*) builder {
  return [IMLoginRes builder];
}
- (IMLoginResBuilder*) toBuilder {
  return [IMLoginRes builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasServerTime) {
    [output appendFormat:@"%@%@: %@\n", indent, @"serverTime", [NSNumber numberWithInteger:self.serverTime]];
  }
  if (self.hasResultCode) {
    [output appendFormat:@"%@%@: %@\n", indent, @"resultCode", NSStringFromResultType(self.resultCode)];
  }
  if (self.hasResultString) {
    [output appendFormat:@"%@%@: %@\n", indent, @"resultString", self.resultString];
  }
  if (self.hasOnlineStatus) {
    [output appendFormat:@"%@%@: %@\n", indent, @"onlineStatus", NSStringFromUserStatType(self.onlineStatus)];
  }
  if (self.hasUserInfo) {
    [output appendFormat:@"%@%@ {\n", indent, @"userInfo"];
    [self.userInfo writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasServerTime) {
    [dictionary setObject: [NSNumber numberWithInteger:self.serverTime] forKey: @"serverTime"];
  }
  if (self.hasResultCode) {
    [dictionary setObject: @(self.resultCode) forKey: @"resultCode"];
  }
  if (self.hasResultString) {
    [dictionary setObject: self.resultString forKey: @"resultString"];
  }
  if (self.hasOnlineStatus) {
    [dictionary setObject: @(self.onlineStatus) forKey: @"onlineStatus"];
  }
  if (self.hasUserInfo) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.userInfo storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"userInfo"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[IMLoginRes class]]) {
    return NO;
  }
  IMLoginRes *otherMessage = other;
  return
      self.hasServerTime == otherMessage.hasServerTime &&
      (!self.hasServerTime || self.serverTime == otherMessage.serverTime) &&
      self.hasResultCode == otherMessage.hasResultCode &&
      (!self.hasResultCode || self.resultCode == otherMessage.resultCode) &&
      self.hasResultString == otherMessage.hasResultString &&
      (!self.hasResultString || [self.resultString isEqual:otherMessage.resultString]) &&
      self.hasOnlineStatus == otherMessage.hasOnlineStatus &&
      (!self.hasOnlineStatus || self.onlineStatus == otherMessage.onlineStatus) &&
      self.hasUserInfo == otherMessage.hasUserInfo &&
      (!self.hasUserInfo || [self.userInfo isEqual:otherMessage.userInfo]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasServerTime) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.serverTime] hash];
  }
  if (self.hasResultCode) {
    hashCode = hashCode * 31 + self.resultCode;
  }
  if (self.hasResultString) {
    hashCode = hashCode * 31 + [self.resultString hash];
  }
  if (self.hasOnlineStatus) {
    hashCode = hashCode * 31 + self.onlineStatus;
  }
  if (self.hasUserInfo) {
    hashCode = hashCode * 31 + [self.userInfo hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface IMLoginResBuilder()
@property (strong) IMLoginRes* resultImloginRes;
@end

@implementation IMLoginResBuilder
@synthesize resultImloginRes;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultImloginRes = [[IMLoginRes alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultImloginRes;
}
- (IMLoginResBuilder*) clear {
  self.resultImloginRes = [[IMLoginRes alloc] init];
  return self;
}
- (IMLoginResBuilder*) clone {
  return [IMLoginRes builderWithPrototype:resultImloginRes];
}
- (IMLoginRes*) defaultInstance {
  return [IMLoginRes defaultInstance];
}
- (IMLoginRes*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (IMLoginRes*) buildPartial {
  IMLoginRes* returnMe = resultImloginRes;
  self.resultImloginRes = nil;
  return returnMe;
}
- (IMLoginResBuilder*) mergeFrom:(IMLoginRes*) other {
  if (other == [IMLoginRes defaultInstance]) {
    return self;
  }
  if (other.hasServerTime) {
    [self setServerTime:other.serverTime];
  }
  if (other.hasResultCode) {
    [self setResultCode:other.resultCode];
  }
  if (other.hasResultString) {
    [self setResultString:other.resultString];
  }
  if (other.hasOnlineStatus) {
    [self setOnlineStatus:other.onlineStatus];
  }
  if (other.hasUserInfo) {
    [self mergeUserInfo:other.userInfo];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (IMLoginResBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (IMLoginResBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setServerTime:[input readUInt32]];
        break;
      }
      case 16: {
        ResultType value = (ResultType)[input readEnum];
        if (ResultTypeIsValidValue(value)) {
          [self setResultCode:value];
        } else {
          [unknownFields mergeVarintField:2 value:value];
        }
        break;
      }
      case 26: {
        [self setResultString:[input readString]];
        break;
      }
      case 32: {
        UserStatType value = (UserStatType)[input readEnum];
        if (UserStatTypeIsValidValue(value)) {
          [self setOnlineStatus:value];
        } else {
          [unknownFields mergeVarintField:4 value:value];
        }
        break;
      }
      case 42: {
        UserInfoBuilder* subBuilder = [UserInfo builder];
        if (self.hasUserInfo) {
          [subBuilder mergeFrom:self.userInfo];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setUserInfo:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (BOOL) hasServerTime {
  return resultImloginRes.hasServerTime;
}
- (UInt32) serverTime {
  return resultImloginRes.serverTime;
}
- (IMLoginResBuilder*) setServerTime:(UInt32) value {
  resultImloginRes.hasServerTime = YES;
  resultImloginRes.serverTime = value;
  return self;
}
- (IMLoginResBuilder*) clearServerTime {
  resultImloginRes.hasServerTime = NO;
  resultImloginRes.serverTime = 0;
  return self;
}
- (BOOL) hasResultCode {
  return resultImloginRes.hasResultCode;
}
- (ResultType) resultCode {
  return resultImloginRes.resultCode;
}
- (IMLoginResBuilder*) setResultCode:(ResultType) value {
  resultImloginRes.hasResultCode = YES;
  resultImloginRes.resultCode = value;
  return self;
}
- (IMLoginResBuilder*) clearResultCode {
  resultImloginRes.hasResultCode = NO;
  resultImloginRes.resultCode = ResultTypeRefuseReasonNone;
  return self;
}
- (BOOL) hasResultString {
  return resultImloginRes.hasResultString;
}
- (NSString*) resultString {
  return resultImloginRes.resultString;
}
- (IMLoginResBuilder*) setResultString:(NSString*) value {
  resultImloginRes.hasResultString = YES;
  resultImloginRes.resultString = value;
  return self;
}
- (IMLoginResBuilder*) clearResultString {
  resultImloginRes.hasResultString = NO;
  resultImloginRes.resultString = @"";
  return self;
}
- (BOOL) hasOnlineStatus {
  return resultImloginRes.hasOnlineStatus;
}
- (UserStatType) onlineStatus {
  return resultImloginRes.onlineStatus;
}
- (IMLoginResBuilder*) setOnlineStatus:(UserStatType) value {
  resultImloginRes.hasOnlineStatus = YES;
  resultImloginRes.onlineStatus = value;
  return self;
}
- (IMLoginResBuilder*) clearOnlineStatus {
  resultImloginRes.hasOnlineStatus = NO;
  resultImloginRes.onlineStatus = UserStatTypeUserStatusOnline;
  return self;
}
- (BOOL) hasUserInfo {
  return resultImloginRes.hasUserInfo;
}
- (UserInfo*) userInfo {
  return resultImloginRes.userInfo;
}
- (IMLoginResBuilder*) setUserInfo:(UserInfo*) value {
  resultImloginRes.hasUserInfo = YES;
  resultImloginRes.userInfo = value;
  return self;
}
- (IMLoginResBuilder*) setUserInfoBuilder:(UserInfoBuilder*) builderForValue {
  return [self setUserInfo:[builderForValue build]];
}
- (IMLoginResBuilder*) mergeUserInfo:(UserInfo*) value {
  if (resultImloginRes.hasUserInfo &&
      resultImloginRes.userInfo != [UserInfo defaultInstance]) {
    resultImloginRes.userInfo =
      [[[UserInfo builderWithPrototype:resultImloginRes.userInfo] mergeFrom:value] buildPartial];
  } else {
    resultImloginRes.userInfo = value;
  }
  resultImloginRes.hasUserInfo = YES;
  return self;
}
- (IMLoginResBuilder*) clearUserInfo {
  resultImloginRes.hasUserInfo = NO;
  resultImloginRes.userInfo = [UserInfo defaultInstance];
  return self;
}
@end

@interface IMLogoutReq ()
@end

@implementation IMLogoutReq

- (instancetype) init {
  if ((self = [super init])) {
  }
  return self;
}
static IMLogoutReq* defaultIMLogoutReqInstance = nil;
+ (void) initialize {
  if (self == [IMLogoutReq class]) {
    defaultIMLogoutReqInstance = [[IMLogoutReq alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultIMLogoutReqInstance;
}
- (instancetype) defaultInstance {
  return defaultIMLogoutReqInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (IMLogoutReq*) parseFromData:(NSData*) data {
  return (IMLogoutReq*)[[[IMLogoutReq builder] mergeFromData:data] build];
}
+ (IMLogoutReq*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMLogoutReq*)[[[IMLogoutReq builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (IMLogoutReq*) parseFromInputStream:(NSInputStream*) input {
  return (IMLogoutReq*)[[[IMLogoutReq builder] mergeFromInputStream:input] build];
}
+ (IMLogoutReq*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMLogoutReq*)[[[IMLogoutReq builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (IMLogoutReq*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (IMLogoutReq*)[[[IMLogoutReq builder] mergeFromCodedInputStream:input] build];
}
+ (IMLogoutReq*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMLogoutReq*)[[[IMLogoutReq builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (IMLogoutReqBuilder*) builder {
  return [[IMLogoutReqBuilder alloc] init];
}
+ (IMLogoutReqBuilder*) builderWithPrototype:(IMLogoutReq*) prototype {
  return [[IMLogoutReq builder] mergeFrom:prototype];
}
- (IMLogoutReqBuilder*) builder {
  return [IMLogoutReq builder];
}
- (IMLogoutReqBuilder*) toBuilder {
  return [IMLogoutReq builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[IMLogoutReq class]]) {
    return NO;
  }
  IMLogoutReq *otherMessage = other;
  return
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface IMLogoutReqBuilder()
@property (strong) IMLogoutReq* resultImlogoutReq;
@end

@implementation IMLogoutReqBuilder
@synthesize resultImlogoutReq;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultImlogoutReq = [[IMLogoutReq alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultImlogoutReq;
}
- (IMLogoutReqBuilder*) clear {
  self.resultImlogoutReq = [[IMLogoutReq alloc] init];
  return self;
}
- (IMLogoutReqBuilder*) clone {
  return [IMLogoutReq builderWithPrototype:resultImlogoutReq];
}
- (IMLogoutReq*) defaultInstance {
  return [IMLogoutReq defaultInstance];
}
- (IMLogoutReq*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (IMLogoutReq*) buildPartial {
  IMLogoutReq* returnMe = resultImlogoutReq;
  self.resultImlogoutReq = nil;
  return returnMe;
}
- (IMLogoutReqBuilder*) mergeFrom:(IMLogoutReq*) other {
  if (other == [IMLogoutReq defaultInstance]) {
    return self;
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (IMLogoutReqBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (IMLogoutReqBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
    }
  }
}
@end

@interface IMLogoutRsp ()
@property UInt32 resultCode;
@end

@implementation IMLogoutRsp

- (BOOL) hasResultCode {
  return !!hasResultCode_;
}
- (void) setHasResultCode:(BOOL) _value_ {
  hasResultCode_ = !!_value_;
}
@synthesize resultCode;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultCode = 0;
  }
  return self;
}
static IMLogoutRsp* defaultIMLogoutRspInstance = nil;
+ (void) initialize {
  if (self == [IMLogoutRsp class]) {
    defaultIMLogoutRspInstance = [[IMLogoutRsp alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultIMLogoutRspInstance;
}
- (instancetype) defaultInstance {
  return defaultIMLogoutRspInstance;
}
- (BOOL) isInitialized {
  if (!self.hasResultCode) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasResultCode) {
    [output writeUInt32:1 value:self.resultCode];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasResultCode) {
    size_ += computeUInt32Size(1, self.resultCode);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (IMLogoutRsp*) parseFromData:(NSData*) data {
  return (IMLogoutRsp*)[[[IMLogoutRsp builder] mergeFromData:data] build];
}
+ (IMLogoutRsp*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMLogoutRsp*)[[[IMLogoutRsp builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (IMLogoutRsp*) parseFromInputStream:(NSInputStream*) input {
  return (IMLogoutRsp*)[[[IMLogoutRsp builder] mergeFromInputStream:input] build];
}
+ (IMLogoutRsp*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMLogoutRsp*)[[[IMLogoutRsp builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (IMLogoutRsp*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (IMLogoutRsp*)[[[IMLogoutRsp builder] mergeFromCodedInputStream:input] build];
}
+ (IMLogoutRsp*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMLogoutRsp*)[[[IMLogoutRsp builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (IMLogoutRspBuilder*) builder {
  return [[IMLogoutRspBuilder alloc] init];
}
+ (IMLogoutRspBuilder*) builderWithPrototype:(IMLogoutRsp*) prototype {
  return [[IMLogoutRsp builder] mergeFrom:prototype];
}
- (IMLogoutRspBuilder*) builder {
  return [IMLogoutRsp builder];
}
- (IMLogoutRspBuilder*) toBuilder {
  return [IMLogoutRsp builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasResultCode) {
    [output appendFormat:@"%@%@: %@\n", indent, @"resultCode", [NSNumber numberWithInteger:self.resultCode]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasResultCode) {
    [dictionary setObject: [NSNumber numberWithInteger:self.resultCode] forKey: @"resultCode"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[IMLogoutRsp class]]) {
    return NO;
  }
  IMLogoutRsp *otherMessage = other;
  return
      self.hasResultCode == otherMessage.hasResultCode &&
      (!self.hasResultCode || self.resultCode == otherMessage.resultCode) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasResultCode) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.resultCode] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface IMLogoutRspBuilder()
@property (strong) IMLogoutRsp* resultImlogoutRsp;
@end

@implementation IMLogoutRspBuilder
@synthesize resultImlogoutRsp;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultImlogoutRsp = [[IMLogoutRsp alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultImlogoutRsp;
}
- (IMLogoutRspBuilder*) clear {
  self.resultImlogoutRsp = [[IMLogoutRsp alloc] init];
  return self;
}
- (IMLogoutRspBuilder*) clone {
  return [IMLogoutRsp builderWithPrototype:resultImlogoutRsp];
}
- (IMLogoutRsp*) defaultInstance {
  return [IMLogoutRsp defaultInstance];
}
- (IMLogoutRsp*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (IMLogoutRsp*) buildPartial {
  IMLogoutRsp* returnMe = resultImlogoutRsp;
  self.resultImlogoutRsp = nil;
  return returnMe;
}
- (IMLogoutRspBuilder*) mergeFrom:(IMLogoutRsp*) other {
  if (other == [IMLogoutRsp defaultInstance]) {
    return self;
  }
  if (other.hasResultCode) {
    [self setResultCode:other.resultCode];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (IMLogoutRspBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (IMLogoutRspBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setResultCode:[input readUInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasResultCode {
  return resultImlogoutRsp.hasResultCode;
}
- (UInt32) resultCode {
  return resultImlogoutRsp.resultCode;
}
- (IMLogoutRspBuilder*) setResultCode:(UInt32) value {
  resultImlogoutRsp.hasResultCode = YES;
  resultImlogoutRsp.resultCode = value;
  return self;
}
- (IMLogoutRspBuilder*) clearResultCode {
  resultImlogoutRsp.hasResultCode = NO;
  resultImlogoutRsp.resultCode = 0;
  return self;
}
@end

@interface IMKickUser ()
@property UInt32 userId;
@property KickReasonType kickReason;
@end

@implementation IMKickUser

- (BOOL) hasUserId {
  return !!hasUserId_;
}
- (void) setHasUserId:(BOOL) _value_ {
  hasUserId_ = !!_value_;
}
@synthesize userId;
- (BOOL) hasKickReason {
  return !!hasKickReason_;
}
- (void) setHasKickReason:(BOOL) _value_ {
  hasKickReason_ = !!_value_;
}
@synthesize kickReason;
- (instancetype) init {
  if ((self = [super init])) {
    self.userId = 0;
    self.kickReason = KickReasonTypeKickReasonDuplicateUser;
  }
  return self;
}
static IMKickUser* defaultIMKickUserInstance = nil;
+ (void) initialize {
  if (self == [IMKickUser class]) {
    defaultIMKickUserInstance = [[IMKickUser alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultIMKickUserInstance;
}
- (instancetype) defaultInstance {
  return defaultIMKickUserInstance;
}
- (BOOL) isInitialized {
  if (!self.hasUserId) {
    return NO;
  }
  if (!self.hasKickReason) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasUserId) {
    [output writeUInt32:1 value:self.userId];
  }
  if (self.hasKickReason) {
    [output writeEnum:2 value:self.kickReason];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasUserId) {
    size_ += computeUInt32Size(1, self.userId);
  }
  if (self.hasKickReason) {
    size_ += computeEnumSize(2, self.kickReason);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (IMKickUser*) parseFromData:(NSData*) data {
  return (IMKickUser*)[[[IMKickUser builder] mergeFromData:data] build];
}
+ (IMKickUser*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMKickUser*)[[[IMKickUser builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (IMKickUser*) parseFromInputStream:(NSInputStream*) input {
  return (IMKickUser*)[[[IMKickUser builder] mergeFromInputStream:input] build];
}
+ (IMKickUser*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMKickUser*)[[[IMKickUser builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (IMKickUser*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (IMKickUser*)[[[IMKickUser builder] mergeFromCodedInputStream:input] build];
}
+ (IMKickUser*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMKickUser*)[[[IMKickUser builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (IMKickUserBuilder*) builder {
  return [[IMKickUserBuilder alloc] init];
}
+ (IMKickUserBuilder*) builderWithPrototype:(IMKickUser*) prototype {
  return [[IMKickUser builder] mergeFrom:prototype];
}
- (IMKickUserBuilder*) builder {
  return [IMKickUser builder];
}
- (IMKickUserBuilder*) toBuilder {
  return [IMKickUser builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasUserId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"userId", [NSNumber numberWithInteger:self.userId]];
  }
  if (self.hasKickReason) {
    [output appendFormat:@"%@%@: %@\n", indent, @"kickReason", NSStringFromKickReasonType(self.kickReason)];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasUserId) {
    [dictionary setObject: [NSNumber numberWithInteger:self.userId] forKey: @"userId"];
  }
  if (self.hasKickReason) {
    [dictionary setObject: @(self.kickReason) forKey: @"kickReason"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[IMKickUser class]]) {
    return NO;
  }
  IMKickUser *otherMessage = other;
  return
      self.hasUserId == otherMessage.hasUserId &&
      (!self.hasUserId || self.userId == otherMessage.userId) &&
      self.hasKickReason == otherMessage.hasKickReason &&
      (!self.hasKickReason || self.kickReason == otherMessage.kickReason) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasUserId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.userId] hash];
  }
  if (self.hasKickReason) {
    hashCode = hashCode * 31 + self.kickReason;
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface IMKickUserBuilder()
@property (strong) IMKickUser* resultImkickUser;
@end

@implementation IMKickUserBuilder
@synthesize resultImkickUser;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultImkickUser = [[IMKickUser alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultImkickUser;
}
- (IMKickUserBuilder*) clear {
  self.resultImkickUser = [[IMKickUser alloc] init];
  return self;
}
- (IMKickUserBuilder*) clone {
  return [IMKickUser builderWithPrototype:resultImkickUser];
}
- (IMKickUser*) defaultInstance {
  return [IMKickUser defaultInstance];
}
- (IMKickUser*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (IMKickUser*) buildPartial {
  IMKickUser* returnMe = resultImkickUser;
  self.resultImkickUser = nil;
  return returnMe;
}
- (IMKickUserBuilder*) mergeFrom:(IMKickUser*) other {
  if (other == [IMKickUser defaultInstance]) {
    return self;
  }
  if (other.hasUserId) {
    [self setUserId:other.userId];
  }
  if (other.hasKickReason) {
    [self setKickReason:other.kickReason];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (IMKickUserBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (IMKickUserBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setUserId:[input readUInt32]];
        break;
      }
      case 16: {
        KickReasonType value = (KickReasonType)[input readEnum];
        if (KickReasonTypeIsValidValue(value)) {
          [self setKickReason:value];
        } else {
          [unknownFields mergeVarintField:2 value:value];
        }
        break;
      }
    }
  }
}
- (BOOL) hasUserId {
  return resultImkickUser.hasUserId;
}
- (UInt32) userId {
  return resultImkickUser.userId;
}
- (IMKickUserBuilder*) setUserId:(UInt32) value {
  resultImkickUser.hasUserId = YES;
  resultImkickUser.userId = value;
  return self;
}
- (IMKickUserBuilder*) clearUserId {
  resultImkickUser.hasUserId = NO;
  resultImkickUser.userId = 0;
  return self;
}
- (BOOL) hasKickReason {
  return resultImkickUser.hasKickReason;
}
- (KickReasonType) kickReason {
  return resultImkickUser.kickReason;
}
- (IMKickUserBuilder*) setKickReason:(KickReasonType) value {
  resultImkickUser.hasKickReason = YES;
  resultImkickUser.kickReason = value;
  return self;
}
- (IMKickUserBuilder*) clearKickReason {
  resultImkickUser.hasKickReason = NO;
  resultImkickUser.kickReason = KickReasonTypeKickReasonDuplicateUser;
  return self;
}
@end

@interface IMDeviceTokenReq ()
@property UInt32 userId;
@property (strong) NSString* deviceToken;
@property ClientType clientType;
@property (strong) NSData* attachData;
@end

@implementation IMDeviceTokenReq

- (BOOL) hasUserId {
  return !!hasUserId_;
}
- (void) setHasUserId:(BOOL) _value_ {
  hasUserId_ = !!_value_;
}
@synthesize userId;
- (BOOL) hasDeviceToken {
  return !!hasDeviceToken_;
}
- (void) setHasDeviceToken:(BOOL) _value_ {
  hasDeviceToken_ = !!_value_;
}
@synthesize deviceToken;
- (BOOL) hasClientType {
  return !!hasClientType_;
}
- (void) setHasClientType:(BOOL) _value_ {
  hasClientType_ = !!_value_;
}
@synthesize clientType;
- (BOOL) hasAttachData {
  return !!hasAttachData_;
}
- (void) setHasAttachData:(BOOL) _value_ {
  hasAttachData_ = !!_value_;
}
@synthesize attachData;
- (instancetype) init {
  if ((self = [super init])) {
    self.userId = 0;
    self.deviceToken = @"";
    self.clientType = ClientTypeClientTypeWindows;
    self.attachData = [NSData data];
  }
  return self;
}
static IMDeviceTokenReq* defaultIMDeviceTokenReqInstance = nil;
+ (void) initialize {
  if (self == [IMDeviceTokenReq class]) {
    defaultIMDeviceTokenReqInstance = [[IMDeviceTokenReq alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultIMDeviceTokenReqInstance;
}
- (instancetype) defaultInstance {
  return defaultIMDeviceTokenReqInstance;
}
- (BOOL) isInitialized {
  if (!self.hasUserId) {
    return NO;
  }
  if (!self.hasDeviceToken) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasUserId) {
    [output writeUInt32:1 value:self.userId];
  }
  if (self.hasDeviceToken) {
    [output writeString:2 value:self.deviceToken];
  }
  if (self.hasClientType) {
    [output writeEnum:3 value:self.clientType];
  }
  if (self.hasAttachData) {
    [output writeData:20 value:self.attachData];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasUserId) {
    size_ += computeUInt32Size(1, self.userId);
  }
  if (self.hasDeviceToken) {
    size_ += computeStringSize(2, self.deviceToken);
  }
  if (self.hasClientType) {
    size_ += computeEnumSize(3, self.clientType);
  }
  if (self.hasAttachData) {
    size_ += computeDataSize(20, self.attachData);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (IMDeviceTokenReq*) parseFromData:(NSData*) data {
  return (IMDeviceTokenReq*)[[[IMDeviceTokenReq builder] mergeFromData:data] build];
}
+ (IMDeviceTokenReq*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMDeviceTokenReq*)[[[IMDeviceTokenReq builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (IMDeviceTokenReq*) parseFromInputStream:(NSInputStream*) input {
  return (IMDeviceTokenReq*)[[[IMDeviceTokenReq builder] mergeFromInputStream:input] build];
}
+ (IMDeviceTokenReq*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMDeviceTokenReq*)[[[IMDeviceTokenReq builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (IMDeviceTokenReq*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (IMDeviceTokenReq*)[[[IMDeviceTokenReq builder] mergeFromCodedInputStream:input] build];
}
+ (IMDeviceTokenReq*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMDeviceTokenReq*)[[[IMDeviceTokenReq builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (IMDeviceTokenReqBuilder*) builder {
  return [[IMDeviceTokenReqBuilder alloc] init];
}
+ (IMDeviceTokenReqBuilder*) builderWithPrototype:(IMDeviceTokenReq*) prototype {
  return [[IMDeviceTokenReq builder] mergeFrom:prototype];
}
- (IMDeviceTokenReqBuilder*) builder {
  return [IMDeviceTokenReq builder];
}
- (IMDeviceTokenReqBuilder*) toBuilder {
  return [IMDeviceTokenReq builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasUserId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"userId", [NSNumber numberWithInteger:self.userId]];
  }
  if (self.hasDeviceToken) {
    [output appendFormat:@"%@%@: %@\n", indent, @"deviceToken", self.deviceToken];
  }
  if (self.hasClientType) {
    [output appendFormat:@"%@%@: %@\n", indent, @"clientType", NSStringFromClientType(self.clientType)];
  }
  if (self.hasAttachData) {
    [output appendFormat:@"%@%@: %@\n", indent, @"attachData", self.attachData];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasUserId) {
    [dictionary setObject: [NSNumber numberWithInteger:self.userId] forKey: @"userId"];
  }
  if (self.hasDeviceToken) {
    [dictionary setObject: self.deviceToken forKey: @"deviceToken"];
  }
  if (self.hasClientType) {
    [dictionary setObject: @(self.clientType) forKey: @"clientType"];
  }
  if (self.hasAttachData) {
    [dictionary setObject: self.attachData forKey: @"attachData"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[IMDeviceTokenReq class]]) {
    return NO;
  }
  IMDeviceTokenReq *otherMessage = other;
  return
      self.hasUserId == otherMessage.hasUserId &&
      (!self.hasUserId || self.userId == otherMessage.userId) &&
      self.hasDeviceToken == otherMessage.hasDeviceToken &&
      (!self.hasDeviceToken || [self.deviceToken isEqual:otherMessage.deviceToken]) &&
      self.hasClientType == otherMessage.hasClientType &&
      (!self.hasClientType || self.clientType == otherMessage.clientType) &&
      self.hasAttachData == otherMessage.hasAttachData &&
      (!self.hasAttachData || [self.attachData isEqual:otherMessage.attachData]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasUserId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.userId] hash];
  }
  if (self.hasDeviceToken) {
    hashCode = hashCode * 31 + [self.deviceToken hash];
  }
  if (self.hasClientType) {
    hashCode = hashCode * 31 + self.clientType;
  }
  if (self.hasAttachData) {
    hashCode = hashCode * 31 + [self.attachData hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface IMDeviceTokenReqBuilder()
@property (strong) IMDeviceTokenReq* resultImdeviceTokenReq;
@end

@implementation IMDeviceTokenReqBuilder
@synthesize resultImdeviceTokenReq;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultImdeviceTokenReq = [[IMDeviceTokenReq alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultImdeviceTokenReq;
}
- (IMDeviceTokenReqBuilder*) clear {
  self.resultImdeviceTokenReq = [[IMDeviceTokenReq alloc] init];
  return self;
}
- (IMDeviceTokenReqBuilder*) clone {
  return [IMDeviceTokenReq builderWithPrototype:resultImdeviceTokenReq];
}
- (IMDeviceTokenReq*) defaultInstance {
  return [IMDeviceTokenReq defaultInstance];
}
- (IMDeviceTokenReq*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (IMDeviceTokenReq*) buildPartial {
  IMDeviceTokenReq* returnMe = resultImdeviceTokenReq;
  self.resultImdeviceTokenReq = nil;
  return returnMe;
}
- (IMDeviceTokenReqBuilder*) mergeFrom:(IMDeviceTokenReq*) other {
  if (other == [IMDeviceTokenReq defaultInstance]) {
    return self;
  }
  if (other.hasUserId) {
    [self setUserId:other.userId];
  }
  if (other.hasDeviceToken) {
    [self setDeviceToken:other.deviceToken];
  }
  if (other.hasClientType) {
    [self setClientType:other.clientType];
  }
  if (other.hasAttachData) {
    [self setAttachData:other.attachData];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (IMDeviceTokenReqBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (IMDeviceTokenReqBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setUserId:[input readUInt32]];
        break;
      }
      case 18: {
        [self setDeviceToken:[input readString]];
        break;
      }
      case 24: {
        ClientType value = (ClientType)[input readEnum];
        if (ClientTypeIsValidValue(value)) {
          [self setClientType:value];
        } else {
          [unknownFields mergeVarintField:3 value:value];
        }
        break;
      }
      case 162: {
        [self setAttachData:[input readData]];
        break;
      }
    }
  }
}
- (BOOL) hasUserId {
  return resultImdeviceTokenReq.hasUserId;
}
- (UInt32) userId {
  return resultImdeviceTokenReq.userId;
}
- (IMDeviceTokenReqBuilder*) setUserId:(UInt32) value {
  resultImdeviceTokenReq.hasUserId = YES;
  resultImdeviceTokenReq.userId = value;
  return self;
}
- (IMDeviceTokenReqBuilder*) clearUserId {
  resultImdeviceTokenReq.hasUserId = NO;
  resultImdeviceTokenReq.userId = 0;
  return self;
}
- (BOOL) hasDeviceToken {
  return resultImdeviceTokenReq.hasDeviceToken;
}
- (NSString*) deviceToken {
  return resultImdeviceTokenReq.deviceToken;
}
- (IMDeviceTokenReqBuilder*) setDeviceToken:(NSString*) value {
  resultImdeviceTokenReq.hasDeviceToken = YES;
  resultImdeviceTokenReq.deviceToken = value;
  return self;
}
- (IMDeviceTokenReqBuilder*) clearDeviceToken {
  resultImdeviceTokenReq.hasDeviceToken = NO;
  resultImdeviceTokenReq.deviceToken = @"";
  return self;
}
- (BOOL) hasClientType {
  return resultImdeviceTokenReq.hasClientType;
}
- (ClientType) clientType {
  return resultImdeviceTokenReq.clientType;
}
- (IMDeviceTokenReqBuilder*) setClientType:(ClientType) value {
  resultImdeviceTokenReq.hasClientType = YES;
  resultImdeviceTokenReq.clientType = value;
  return self;
}
- (IMDeviceTokenReqBuilder*) clearClientType {
  resultImdeviceTokenReq.hasClientType = NO;
  resultImdeviceTokenReq.clientType = ClientTypeClientTypeWindows;
  return self;
}
- (BOOL) hasAttachData {
  return resultImdeviceTokenReq.hasAttachData;
}
- (NSData*) attachData {
  return resultImdeviceTokenReq.attachData;
}
- (IMDeviceTokenReqBuilder*) setAttachData:(NSData*) value {
  resultImdeviceTokenReq.hasAttachData = YES;
  resultImdeviceTokenReq.attachData = value;
  return self;
}
- (IMDeviceTokenReqBuilder*) clearAttachData {
  resultImdeviceTokenReq.hasAttachData = NO;
  resultImdeviceTokenReq.attachData = [NSData data];
  return self;
}
@end

@interface IMDeviceTokenRsp ()
@property UInt32 userId;
@property (strong) NSData* attachData;
@end

@implementation IMDeviceTokenRsp

- (BOOL) hasUserId {
  return !!hasUserId_;
}
- (void) setHasUserId:(BOOL) _value_ {
  hasUserId_ = !!_value_;
}
@synthesize userId;
- (BOOL) hasAttachData {
  return !!hasAttachData_;
}
- (void) setHasAttachData:(BOOL) _value_ {
  hasAttachData_ = !!_value_;
}
@synthesize attachData;
- (instancetype) init {
  if ((self = [super init])) {
    self.userId = 0;
    self.attachData = [NSData data];
  }
  return self;
}
static IMDeviceTokenRsp* defaultIMDeviceTokenRspInstance = nil;
+ (void) initialize {
  if (self == [IMDeviceTokenRsp class]) {
    defaultIMDeviceTokenRspInstance = [[IMDeviceTokenRsp alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultIMDeviceTokenRspInstance;
}
- (instancetype) defaultInstance {
  return defaultIMDeviceTokenRspInstance;
}
- (BOOL) isInitialized {
  if (!self.hasUserId) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasUserId) {
    [output writeUInt32:1 value:self.userId];
  }
  if (self.hasAttachData) {
    [output writeData:20 value:self.attachData];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasUserId) {
    size_ += computeUInt32Size(1, self.userId);
  }
  if (self.hasAttachData) {
    size_ += computeDataSize(20, self.attachData);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (IMDeviceTokenRsp*) parseFromData:(NSData*) data {
  return (IMDeviceTokenRsp*)[[[IMDeviceTokenRsp builder] mergeFromData:data] build];
}
+ (IMDeviceTokenRsp*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMDeviceTokenRsp*)[[[IMDeviceTokenRsp builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (IMDeviceTokenRsp*) parseFromInputStream:(NSInputStream*) input {
  return (IMDeviceTokenRsp*)[[[IMDeviceTokenRsp builder] mergeFromInputStream:input] build];
}
+ (IMDeviceTokenRsp*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMDeviceTokenRsp*)[[[IMDeviceTokenRsp builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (IMDeviceTokenRsp*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (IMDeviceTokenRsp*)[[[IMDeviceTokenRsp builder] mergeFromCodedInputStream:input] build];
}
+ (IMDeviceTokenRsp*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMDeviceTokenRsp*)[[[IMDeviceTokenRsp builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (IMDeviceTokenRspBuilder*) builder {
  return [[IMDeviceTokenRspBuilder alloc] init];
}
+ (IMDeviceTokenRspBuilder*) builderWithPrototype:(IMDeviceTokenRsp*) prototype {
  return [[IMDeviceTokenRsp builder] mergeFrom:prototype];
}
- (IMDeviceTokenRspBuilder*) builder {
  return [IMDeviceTokenRsp builder];
}
- (IMDeviceTokenRspBuilder*) toBuilder {
  return [IMDeviceTokenRsp builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasUserId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"userId", [NSNumber numberWithInteger:self.userId]];
  }
  if (self.hasAttachData) {
    [output appendFormat:@"%@%@: %@\n", indent, @"attachData", self.attachData];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasUserId) {
    [dictionary setObject: [NSNumber numberWithInteger:self.userId] forKey: @"userId"];
  }
  if (self.hasAttachData) {
    [dictionary setObject: self.attachData forKey: @"attachData"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[IMDeviceTokenRsp class]]) {
    return NO;
  }
  IMDeviceTokenRsp *otherMessage = other;
  return
      self.hasUserId == otherMessage.hasUserId &&
      (!self.hasUserId || self.userId == otherMessage.userId) &&
      self.hasAttachData == otherMessage.hasAttachData &&
      (!self.hasAttachData || [self.attachData isEqual:otherMessage.attachData]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasUserId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.userId] hash];
  }
  if (self.hasAttachData) {
    hashCode = hashCode * 31 + [self.attachData hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface IMDeviceTokenRspBuilder()
@property (strong) IMDeviceTokenRsp* resultImdeviceTokenRsp;
@end

@implementation IMDeviceTokenRspBuilder
@synthesize resultImdeviceTokenRsp;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultImdeviceTokenRsp = [[IMDeviceTokenRsp alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultImdeviceTokenRsp;
}
- (IMDeviceTokenRspBuilder*) clear {
  self.resultImdeviceTokenRsp = [[IMDeviceTokenRsp alloc] init];
  return self;
}
- (IMDeviceTokenRspBuilder*) clone {
  return [IMDeviceTokenRsp builderWithPrototype:resultImdeviceTokenRsp];
}
- (IMDeviceTokenRsp*) defaultInstance {
  return [IMDeviceTokenRsp defaultInstance];
}
- (IMDeviceTokenRsp*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (IMDeviceTokenRsp*) buildPartial {
  IMDeviceTokenRsp* returnMe = resultImdeviceTokenRsp;
  self.resultImdeviceTokenRsp = nil;
  return returnMe;
}
- (IMDeviceTokenRspBuilder*) mergeFrom:(IMDeviceTokenRsp*) other {
  if (other == [IMDeviceTokenRsp defaultInstance]) {
    return self;
  }
  if (other.hasUserId) {
    [self setUserId:other.userId];
  }
  if (other.hasAttachData) {
    [self setAttachData:other.attachData];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (IMDeviceTokenRspBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (IMDeviceTokenRspBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setUserId:[input readUInt32]];
        break;
      }
      case 162: {
        [self setAttachData:[input readData]];
        break;
      }
    }
  }
}
- (BOOL) hasUserId {
  return resultImdeviceTokenRsp.hasUserId;
}
- (UInt32) userId {
  return resultImdeviceTokenRsp.userId;
}
- (IMDeviceTokenRspBuilder*) setUserId:(UInt32) value {
  resultImdeviceTokenRsp.hasUserId = YES;
  resultImdeviceTokenRsp.userId = value;
  return self;
}
- (IMDeviceTokenRspBuilder*) clearUserId {
  resultImdeviceTokenRsp.hasUserId = NO;
  resultImdeviceTokenRsp.userId = 0;
  return self;
}
- (BOOL) hasAttachData {
  return resultImdeviceTokenRsp.hasAttachData;
}
- (NSData*) attachData {
  return resultImdeviceTokenRsp.attachData;
}
- (IMDeviceTokenRspBuilder*) setAttachData:(NSData*) value {
  resultImdeviceTokenRsp.hasAttachData = YES;
  resultImdeviceTokenRsp.attachData = value;
  return self;
}
- (IMDeviceTokenRspBuilder*) clearAttachData {
  resultImdeviceTokenRsp.hasAttachData = NO;
  resultImdeviceTokenRsp.attachData = [NSData data];
  return self;
}
@end

@interface IMKickPCClientReq ()
@property UInt32 userId;
@end

@implementation IMKickPCClientReq

- (BOOL) hasUserId {
  return !!hasUserId_;
}
- (void) setHasUserId:(BOOL) _value_ {
  hasUserId_ = !!_value_;
}
@synthesize userId;
- (instancetype) init {
  if ((self = [super init])) {
    self.userId = 0;
  }
  return self;
}
static IMKickPCClientReq* defaultIMKickPCClientReqInstance = nil;
+ (void) initialize {
  if (self == [IMKickPCClientReq class]) {
    defaultIMKickPCClientReqInstance = [[IMKickPCClientReq alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultIMKickPCClientReqInstance;
}
- (instancetype) defaultInstance {
  return defaultIMKickPCClientReqInstance;
}
- (BOOL) isInitialized {
  if (!self.hasUserId) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasUserId) {
    [output writeUInt32:1 value:self.userId];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasUserId) {
    size_ += computeUInt32Size(1, self.userId);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (IMKickPCClientReq*) parseFromData:(NSData*) data {
  return (IMKickPCClientReq*)[[[IMKickPCClientReq builder] mergeFromData:data] build];
}
+ (IMKickPCClientReq*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMKickPCClientReq*)[[[IMKickPCClientReq builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (IMKickPCClientReq*) parseFromInputStream:(NSInputStream*) input {
  return (IMKickPCClientReq*)[[[IMKickPCClientReq builder] mergeFromInputStream:input] build];
}
+ (IMKickPCClientReq*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMKickPCClientReq*)[[[IMKickPCClientReq builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (IMKickPCClientReq*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (IMKickPCClientReq*)[[[IMKickPCClientReq builder] mergeFromCodedInputStream:input] build];
}
+ (IMKickPCClientReq*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMKickPCClientReq*)[[[IMKickPCClientReq builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (IMKickPCClientReqBuilder*) builder {
  return [[IMKickPCClientReqBuilder alloc] init];
}
+ (IMKickPCClientReqBuilder*) builderWithPrototype:(IMKickPCClientReq*) prototype {
  return [[IMKickPCClientReq builder] mergeFrom:prototype];
}
- (IMKickPCClientReqBuilder*) builder {
  return [IMKickPCClientReq builder];
}
- (IMKickPCClientReqBuilder*) toBuilder {
  return [IMKickPCClientReq builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasUserId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"userId", [NSNumber numberWithInteger:self.userId]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasUserId) {
    [dictionary setObject: [NSNumber numberWithInteger:self.userId] forKey: @"userId"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[IMKickPCClientReq class]]) {
    return NO;
  }
  IMKickPCClientReq *otherMessage = other;
  return
      self.hasUserId == otherMessage.hasUserId &&
      (!self.hasUserId || self.userId == otherMessage.userId) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasUserId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.userId] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface IMKickPCClientReqBuilder()
@property (strong) IMKickPCClientReq* resultImkickPcclientReq;
@end

@implementation IMKickPCClientReqBuilder
@synthesize resultImkickPcclientReq;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultImkickPcclientReq = [[IMKickPCClientReq alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultImkickPcclientReq;
}
- (IMKickPCClientReqBuilder*) clear {
  self.resultImkickPcclientReq = [[IMKickPCClientReq alloc] init];
  return self;
}
- (IMKickPCClientReqBuilder*) clone {
  return [IMKickPCClientReq builderWithPrototype:resultImkickPcclientReq];
}
- (IMKickPCClientReq*) defaultInstance {
  return [IMKickPCClientReq defaultInstance];
}
- (IMKickPCClientReq*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (IMKickPCClientReq*) buildPartial {
  IMKickPCClientReq* returnMe = resultImkickPcclientReq;
  self.resultImkickPcclientReq = nil;
  return returnMe;
}
- (IMKickPCClientReqBuilder*) mergeFrom:(IMKickPCClientReq*) other {
  if (other == [IMKickPCClientReq defaultInstance]) {
    return self;
  }
  if (other.hasUserId) {
    [self setUserId:other.userId];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (IMKickPCClientReqBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (IMKickPCClientReqBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setUserId:[input readUInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasUserId {
  return resultImkickPcclientReq.hasUserId;
}
- (UInt32) userId {
  return resultImkickPcclientReq.userId;
}
- (IMKickPCClientReqBuilder*) setUserId:(UInt32) value {
  resultImkickPcclientReq.hasUserId = YES;
  resultImkickPcclientReq.userId = value;
  return self;
}
- (IMKickPCClientReqBuilder*) clearUserId {
  resultImkickPcclientReq.hasUserId = NO;
  resultImkickPcclientReq.userId = 0;
  return self;
}
@end

@interface IMKickPCClientRsp ()
@property UInt32 userId;
@property UInt32 resultCode;
@end

@implementation IMKickPCClientRsp

- (BOOL) hasUserId {
  return !!hasUserId_;
}
- (void) setHasUserId:(BOOL) _value_ {
  hasUserId_ = !!_value_;
}
@synthesize userId;
- (BOOL) hasResultCode {
  return !!hasResultCode_;
}
- (void) setHasResultCode:(BOOL) _value_ {
  hasResultCode_ = !!_value_;
}
@synthesize resultCode;
- (instancetype) init {
  if ((self = [super init])) {
    self.userId = 0;
    self.resultCode = 0;
  }
  return self;
}
static IMKickPCClientRsp* defaultIMKickPCClientRspInstance = nil;
+ (void) initialize {
  if (self == [IMKickPCClientRsp class]) {
    defaultIMKickPCClientRspInstance = [[IMKickPCClientRsp alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultIMKickPCClientRspInstance;
}
- (instancetype) defaultInstance {
  return defaultIMKickPCClientRspInstance;
}
- (BOOL) isInitialized {
  if (!self.hasUserId) {
    return NO;
  }
  if (!self.hasResultCode) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasUserId) {
    [output writeUInt32:1 value:self.userId];
  }
  if (self.hasResultCode) {
    [output writeUInt32:2 value:self.resultCode];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasUserId) {
    size_ += computeUInt32Size(1, self.userId);
  }
  if (self.hasResultCode) {
    size_ += computeUInt32Size(2, self.resultCode);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (IMKickPCClientRsp*) parseFromData:(NSData*) data {
  return (IMKickPCClientRsp*)[[[IMKickPCClientRsp builder] mergeFromData:data] build];
}
+ (IMKickPCClientRsp*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMKickPCClientRsp*)[[[IMKickPCClientRsp builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (IMKickPCClientRsp*) parseFromInputStream:(NSInputStream*) input {
  return (IMKickPCClientRsp*)[[[IMKickPCClientRsp builder] mergeFromInputStream:input] build];
}
+ (IMKickPCClientRsp*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMKickPCClientRsp*)[[[IMKickPCClientRsp builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (IMKickPCClientRsp*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (IMKickPCClientRsp*)[[[IMKickPCClientRsp builder] mergeFromCodedInputStream:input] build];
}
+ (IMKickPCClientRsp*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMKickPCClientRsp*)[[[IMKickPCClientRsp builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (IMKickPCClientRspBuilder*) builder {
  return [[IMKickPCClientRspBuilder alloc] init];
}
+ (IMKickPCClientRspBuilder*) builderWithPrototype:(IMKickPCClientRsp*) prototype {
  return [[IMKickPCClientRsp builder] mergeFrom:prototype];
}
- (IMKickPCClientRspBuilder*) builder {
  return [IMKickPCClientRsp builder];
}
- (IMKickPCClientRspBuilder*) toBuilder {
  return [IMKickPCClientRsp builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasUserId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"userId", [NSNumber numberWithInteger:self.userId]];
  }
  if (self.hasResultCode) {
    [output appendFormat:@"%@%@: %@\n", indent, @"resultCode", [NSNumber numberWithInteger:self.resultCode]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasUserId) {
    [dictionary setObject: [NSNumber numberWithInteger:self.userId] forKey: @"userId"];
  }
  if (self.hasResultCode) {
    [dictionary setObject: [NSNumber numberWithInteger:self.resultCode] forKey: @"resultCode"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[IMKickPCClientRsp class]]) {
    return NO;
  }
  IMKickPCClientRsp *otherMessage = other;
  return
      self.hasUserId == otherMessage.hasUserId &&
      (!self.hasUserId || self.userId == otherMessage.userId) &&
      self.hasResultCode == otherMessage.hasResultCode &&
      (!self.hasResultCode || self.resultCode == otherMessage.resultCode) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasUserId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.userId] hash];
  }
  if (self.hasResultCode) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.resultCode] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface IMKickPCClientRspBuilder()
@property (strong) IMKickPCClientRsp* resultImkickPcclientRsp;
@end

@implementation IMKickPCClientRspBuilder
@synthesize resultImkickPcclientRsp;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultImkickPcclientRsp = [[IMKickPCClientRsp alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultImkickPcclientRsp;
}
- (IMKickPCClientRspBuilder*) clear {
  self.resultImkickPcclientRsp = [[IMKickPCClientRsp alloc] init];
  return self;
}
- (IMKickPCClientRspBuilder*) clone {
  return [IMKickPCClientRsp builderWithPrototype:resultImkickPcclientRsp];
}
- (IMKickPCClientRsp*) defaultInstance {
  return [IMKickPCClientRsp defaultInstance];
}
- (IMKickPCClientRsp*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (IMKickPCClientRsp*) buildPartial {
  IMKickPCClientRsp* returnMe = resultImkickPcclientRsp;
  self.resultImkickPcclientRsp = nil;
  return returnMe;
}
- (IMKickPCClientRspBuilder*) mergeFrom:(IMKickPCClientRsp*) other {
  if (other == [IMKickPCClientRsp defaultInstance]) {
    return self;
  }
  if (other.hasUserId) {
    [self setUserId:other.userId];
  }
  if (other.hasResultCode) {
    [self setResultCode:other.resultCode];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (IMKickPCClientRspBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (IMKickPCClientRspBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setUserId:[input readUInt32]];
        break;
      }
      case 16: {
        [self setResultCode:[input readUInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasUserId {
  return resultImkickPcclientRsp.hasUserId;
}
- (UInt32) userId {
  return resultImkickPcclientRsp.userId;
}
- (IMKickPCClientRspBuilder*) setUserId:(UInt32) value {
  resultImkickPcclientRsp.hasUserId = YES;
  resultImkickPcclientRsp.userId = value;
  return self;
}
- (IMKickPCClientRspBuilder*) clearUserId {
  resultImkickPcclientRsp.hasUserId = NO;
  resultImkickPcclientRsp.userId = 0;
  return self;
}
- (BOOL) hasResultCode {
  return resultImkickPcclientRsp.hasResultCode;
}
- (UInt32) resultCode {
  return resultImkickPcclientRsp.resultCode;
}
- (IMKickPCClientRspBuilder*) setResultCode:(UInt32) value {
  resultImkickPcclientRsp.hasResultCode = YES;
  resultImkickPcclientRsp.resultCode = value;
  return self;
}
- (IMKickPCClientRspBuilder*) clearResultCode {
  resultImkickPcclientRsp.hasResultCode = NO;
  resultImkickPcclientRsp.resultCode = 0;
  return self;
}
@end

@interface IMPushShieldReq ()
@property UInt32 userId;
@property UInt32 shieldStatus;
@property (strong) NSData* attachData;
@end

@implementation IMPushShieldReq

- (BOOL) hasUserId {
  return !!hasUserId_;
}
- (void) setHasUserId:(BOOL) _value_ {
  hasUserId_ = !!_value_;
}
@synthesize userId;
- (BOOL) hasShieldStatus {
  return !!hasShieldStatus_;
}
- (void) setHasShieldStatus:(BOOL) _value_ {
  hasShieldStatus_ = !!_value_;
}
@synthesize shieldStatus;
- (BOOL) hasAttachData {
  return !!hasAttachData_;
}
- (void) setHasAttachData:(BOOL) _value_ {
  hasAttachData_ = !!_value_;
}
@synthesize attachData;
- (instancetype) init {
  if ((self = [super init])) {
    self.userId = 0;
    self.shieldStatus = 0;
    self.attachData = [NSData data];
  }
  return self;
}
static IMPushShieldReq* defaultIMPushShieldReqInstance = nil;
+ (void) initialize {
  if (self == [IMPushShieldReq class]) {
    defaultIMPushShieldReqInstance = [[IMPushShieldReq alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultIMPushShieldReqInstance;
}
- (instancetype) defaultInstance {
  return defaultIMPushShieldReqInstance;
}
- (BOOL) isInitialized {
  if (!self.hasUserId) {
    return NO;
  }
  if (!self.hasShieldStatus) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasUserId) {
    [output writeUInt32:1 value:self.userId];
  }
  if (self.hasShieldStatus) {
    [output writeUInt32:2 value:self.shieldStatus];
  }
  if (self.hasAttachData) {
    [output writeData:20 value:self.attachData];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasUserId) {
    size_ += computeUInt32Size(1, self.userId);
  }
  if (self.hasShieldStatus) {
    size_ += computeUInt32Size(2, self.shieldStatus);
  }
  if (self.hasAttachData) {
    size_ += computeDataSize(20, self.attachData);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (IMPushShieldReq*) parseFromData:(NSData*) data {
  return (IMPushShieldReq*)[[[IMPushShieldReq builder] mergeFromData:data] build];
}
+ (IMPushShieldReq*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMPushShieldReq*)[[[IMPushShieldReq builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (IMPushShieldReq*) parseFromInputStream:(NSInputStream*) input {
  return (IMPushShieldReq*)[[[IMPushShieldReq builder] mergeFromInputStream:input] build];
}
+ (IMPushShieldReq*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMPushShieldReq*)[[[IMPushShieldReq builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (IMPushShieldReq*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (IMPushShieldReq*)[[[IMPushShieldReq builder] mergeFromCodedInputStream:input] build];
}
+ (IMPushShieldReq*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMPushShieldReq*)[[[IMPushShieldReq builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (IMPushShieldReqBuilder*) builder {
  return [[IMPushShieldReqBuilder alloc] init];
}
+ (IMPushShieldReqBuilder*) builderWithPrototype:(IMPushShieldReq*) prototype {
  return [[IMPushShieldReq builder] mergeFrom:prototype];
}
- (IMPushShieldReqBuilder*) builder {
  return [IMPushShieldReq builder];
}
- (IMPushShieldReqBuilder*) toBuilder {
  return [IMPushShieldReq builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasUserId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"userId", [NSNumber numberWithInteger:self.userId]];
  }
  if (self.hasShieldStatus) {
    [output appendFormat:@"%@%@: %@\n", indent, @"shieldStatus", [NSNumber numberWithInteger:self.shieldStatus]];
  }
  if (self.hasAttachData) {
    [output appendFormat:@"%@%@: %@\n", indent, @"attachData", self.attachData];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasUserId) {
    [dictionary setObject: [NSNumber numberWithInteger:self.userId] forKey: @"userId"];
  }
  if (self.hasShieldStatus) {
    [dictionary setObject: [NSNumber numberWithInteger:self.shieldStatus] forKey: @"shieldStatus"];
  }
  if (self.hasAttachData) {
    [dictionary setObject: self.attachData forKey: @"attachData"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[IMPushShieldReq class]]) {
    return NO;
  }
  IMPushShieldReq *otherMessage = other;
  return
      self.hasUserId == otherMessage.hasUserId &&
      (!self.hasUserId || self.userId == otherMessage.userId) &&
      self.hasShieldStatus == otherMessage.hasShieldStatus &&
      (!self.hasShieldStatus || self.shieldStatus == otherMessage.shieldStatus) &&
      self.hasAttachData == otherMessage.hasAttachData &&
      (!self.hasAttachData || [self.attachData isEqual:otherMessage.attachData]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasUserId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.userId] hash];
  }
  if (self.hasShieldStatus) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.shieldStatus] hash];
  }
  if (self.hasAttachData) {
    hashCode = hashCode * 31 + [self.attachData hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface IMPushShieldReqBuilder()
@property (strong) IMPushShieldReq* resultImpushShieldReq;
@end

@implementation IMPushShieldReqBuilder
@synthesize resultImpushShieldReq;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultImpushShieldReq = [[IMPushShieldReq alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultImpushShieldReq;
}
- (IMPushShieldReqBuilder*) clear {
  self.resultImpushShieldReq = [[IMPushShieldReq alloc] init];
  return self;
}
- (IMPushShieldReqBuilder*) clone {
  return [IMPushShieldReq builderWithPrototype:resultImpushShieldReq];
}
- (IMPushShieldReq*) defaultInstance {
  return [IMPushShieldReq defaultInstance];
}
- (IMPushShieldReq*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (IMPushShieldReq*) buildPartial {
  IMPushShieldReq* returnMe = resultImpushShieldReq;
  self.resultImpushShieldReq = nil;
  return returnMe;
}
- (IMPushShieldReqBuilder*) mergeFrom:(IMPushShieldReq*) other {
  if (other == [IMPushShieldReq defaultInstance]) {
    return self;
  }
  if (other.hasUserId) {
    [self setUserId:other.userId];
  }
  if (other.hasShieldStatus) {
    [self setShieldStatus:other.shieldStatus];
  }
  if (other.hasAttachData) {
    [self setAttachData:other.attachData];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (IMPushShieldReqBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (IMPushShieldReqBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setUserId:[input readUInt32]];
        break;
      }
      case 16: {
        [self setShieldStatus:[input readUInt32]];
        break;
      }
      case 162: {
        [self setAttachData:[input readData]];
        break;
      }
    }
  }
}
- (BOOL) hasUserId {
  return resultImpushShieldReq.hasUserId;
}
- (UInt32) userId {
  return resultImpushShieldReq.userId;
}
- (IMPushShieldReqBuilder*) setUserId:(UInt32) value {
  resultImpushShieldReq.hasUserId = YES;
  resultImpushShieldReq.userId = value;
  return self;
}
- (IMPushShieldReqBuilder*) clearUserId {
  resultImpushShieldReq.hasUserId = NO;
  resultImpushShieldReq.userId = 0;
  return self;
}
- (BOOL) hasShieldStatus {
  return resultImpushShieldReq.hasShieldStatus;
}
- (UInt32) shieldStatus {
  return resultImpushShieldReq.shieldStatus;
}
- (IMPushShieldReqBuilder*) setShieldStatus:(UInt32) value {
  resultImpushShieldReq.hasShieldStatus = YES;
  resultImpushShieldReq.shieldStatus = value;
  return self;
}
- (IMPushShieldReqBuilder*) clearShieldStatus {
  resultImpushShieldReq.hasShieldStatus = NO;
  resultImpushShieldReq.shieldStatus = 0;
  return self;
}
- (BOOL) hasAttachData {
  return resultImpushShieldReq.hasAttachData;
}
- (NSData*) attachData {
  return resultImpushShieldReq.attachData;
}
- (IMPushShieldReqBuilder*) setAttachData:(NSData*) value {
  resultImpushShieldReq.hasAttachData = YES;
  resultImpushShieldReq.attachData = value;
  return self;
}
- (IMPushShieldReqBuilder*) clearAttachData {
  resultImpushShieldReq.hasAttachData = NO;
  resultImpushShieldReq.attachData = [NSData data];
  return self;
}
@end

@interface IMPushShieldRsp ()
@property UInt32 userId;
@property UInt32 resultCode;
@property UInt32 shieldStatus;
@property (strong) NSData* attachData;
@end

@implementation IMPushShieldRsp

- (BOOL) hasUserId {
  return !!hasUserId_;
}
- (void) setHasUserId:(BOOL) _value_ {
  hasUserId_ = !!_value_;
}
@synthesize userId;
- (BOOL) hasResultCode {
  return !!hasResultCode_;
}
- (void) setHasResultCode:(BOOL) _value_ {
  hasResultCode_ = !!_value_;
}
@synthesize resultCode;
- (BOOL) hasShieldStatus {
  return !!hasShieldStatus_;
}
- (void) setHasShieldStatus:(BOOL) _value_ {
  hasShieldStatus_ = !!_value_;
}
@synthesize shieldStatus;
- (BOOL) hasAttachData {
  return !!hasAttachData_;
}
- (void) setHasAttachData:(BOOL) _value_ {
  hasAttachData_ = !!_value_;
}
@synthesize attachData;
- (instancetype) init {
  if ((self = [super init])) {
    self.userId = 0;
    self.resultCode = 0;
    self.shieldStatus = 0;
    self.attachData = [NSData data];
  }
  return self;
}
static IMPushShieldRsp* defaultIMPushShieldRspInstance = nil;
+ (void) initialize {
  if (self == [IMPushShieldRsp class]) {
    defaultIMPushShieldRspInstance = [[IMPushShieldRsp alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultIMPushShieldRspInstance;
}
- (instancetype) defaultInstance {
  return defaultIMPushShieldRspInstance;
}
- (BOOL) isInitialized {
  if (!self.hasUserId) {
    return NO;
  }
  if (!self.hasResultCode) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasUserId) {
    [output writeUInt32:1 value:self.userId];
  }
  if (self.hasResultCode) {
    [output writeUInt32:2 value:self.resultCode];
  }
  if (self.hasShieldStatus) {
    [output writeUInt32:3 value:self.shieldStatus];
  }
  if (self.hasAttachData) {
    [output writeData:20 value:self.attachData];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasUserId) {
    size_ += computeUInt32Size(1, self.userId);
  }
  if (self.hasResultCode) {
    size_ += computeUInt32Size(2, self.resultCode);
  }
  if (self.hasShieldStatus) {
    size_ += computeUInt32Size(3, self.shieldStatus);
  }
  if (self.hasAttachData) {
    size_ += computeDataSize(20, self.attachData);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (IMPushShieldRsp*) parseFromData:(NSData*) data {
  return (IMPushShieldRsp*)[[[IMPushShieldRsp builder] mergeFromData:data] build];
}
+ (IMPushShieldRsp*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMPushShieldRsp*)[[[IMPushShieldRsp builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (IMPushShieldRsp*) parseFromInputStream:(NSInputStream*) input {
  return (IMPushShieldRsp*)[[[IMPushShieldRsp builder] mergeFromInputStream:input] build];
}
+ (IMPushShieldRsp*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMPushShieldRsp*)[[[IMPushShieldRsp builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (IMPushShieldRsp*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (IMPushShieldRsp*)[[[IMPushShieldRsp builder] mergeFromCodedInputStream:input] build];
}
+ (IMPushShieldRsp*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMPushShieldRsp*)[[[IMPushShieldRsp builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (IMPushShieldRspBuilder*) builder {
  return [[IMPushShieldRspBuilder alloc] init];
}
+ (IMPushShieldRspBuilder*) builderWithPrototype:(IMPushShieldRsp*) prototype {
  return [[IMPushShieldRsp builder] mergeFrom:prototype];
}
- (IMPushShieldRspBuilder*) builder {
  return [IMPushShieldRsp builder];
}
- (IMPushShieldRspBuilder*) toBuilder {
  return [IMPushShieldRsp builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasUserId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"userId", [NSNumber numberWithInteger:self.userId]];
  }
  if (self.hasResultCode) {
    [output appendFormat:@"%@%@: %@\n", indent, @"resultCode", [NSNumber numberWithInteger:self.resultCode]];
  }
  if (self.hasShieldStatus) {
    [output appendFormat:@"%@%@: %@\n", indent, @"shieldStatus", [NSNumber numberWithInteger:self.shieldStatus]];
  }
  if (self.hasAttachData) {
    [output appendFormat:@"%@%@: %@\n", indent, @"attachData", self.attachData];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasUserId) {
    [dictionary setObject: [NSNumber numberWithInteger:self.userId] forKey: @"userId"];
  }
  if (self.hasResultCode) {
    [dictionary setObject: [NSNumber numberWithInteger:self.resultCode] forKey: @"resultCode"];
  }
  if (self.hasShieldStatus) {
    [dictionary setObject: [NSNumber numberWithInteger:self.shieldStatus] forKey: @"shieldStatus"];
  }
  if (self.hasAttachData) {
    [dictionary setObject: self.attachData forKey: @"attachData"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[IMPushShieldRsp class]]) {
    return NO;
  }
  IMPushShieldRsp *otherMessage = other;
  return
      self.hasUserId == otherMessage.hasUserId &&
      (!self.hasUserId || self.userId == otherMessage.userId) &&
      self.hasResultCode == otherMessage.hasResultCode &&
      (!self.hasResultCode || self.resultCode == otherMessage.resultCode) &&
      self.hasShieldStatus == otherMessage.hasShieldStatus &&
      (!self.hasShieldStatus || self.shieldStatus == otherMessage.shieldStatus) &&
      self.hasAttachData == otherMessage.hasAttachData &&
      (!self.hasAttachData || [self.attachData isEqual:otherMessage.attachData]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasUserId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.userId] hash];
  }
  if (self.hasResultCode) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.resultCode] hash];
  }
  if (self.hasShieldStatus) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.shieldStatus] hash];
  }
  if (self.hasAttachData) {
    hashCode = hashCode * 31 + [self.attachData hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface IMPushShieldRspBuilder()
@property (strong) IMPushShieldRsp* resultImpushShieldRsp;
@end

@implementation IMPushShieldRspBuilder
@synthesize resultImpushShieldRsp;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultImpushShieldRsp = [[IMPushShieldRsp alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultImpushShieldRsp;
}
- (IMPushShieldRspBuilder*) clear {
  self.resultImpushShieldRsp = [[IMPushShieldRsp alloc] init];
  return self;
}
- (IMPushShieldRspBuilder*) clone {
  return [IMPushShieldRsp builderWithPrototype:resultImpushShieldRsp];
}
- (IMPushShieldRsp*) defaultInstance {
  return [IMPushShieldRsp defaultInstance];
}
- (IMPushShieldRsp*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (IMPushShieldRsp*) buildPartial {
  IMPushShieldRsp* returnMe = resultImpushShieldRsp;
  self.resultImpushShieldRsp = nil;
  return returnMe;
}
- (IMPushShieldRspBuilder*) mergeFrom:(IMPushShieldRsp*) other {
  if (other == [IMPushShieldRsp defaultInstance]) {
    return self;
  }
  if (other.hasUserId) {
    [self setUserId:other.userId];
  }
  if (other.hasResultCode) {
    [self setResultCode:other.resultCode];
  }
  if (other.hasShieldStatus) {
    [self setShieldStatus:other.shieldStatus];
  }
  if (other.hasAttachData) {
    [self setAttachData:other.attachData];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (IMPushShieldRspBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (IMPushShieldRspBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setUserId:[input readUInt32]];
        break;
      }
      case 16: {
        [self setResultCode:[input readUInt32]];
        break;
      }
      case 24: {
        [self setShieldStatus:[input readUInt32]];
        break;
      }
      case 162: {
        [self setAttachData:[input readData]];
        break;
      }
    }
  }
}
- (BOOL) hasUserId {
  return resultImpushShieldRsp.hasUserId;
}
- (UInt32) userId {
  return resultImpushShieldRsp.userId;
}
- (IMPushShieldRspBuilder*) setUserId:(UInt32) value {
  resultImpushShieldRsp.hasUserId = YES;
  resultImpushShieldRsp.userId = value;
  return self;
}
- (IMPushShieldRspBuilder*) clearUserId {
  resultImpushShieldRsp.hasUserId = NO;
  resultImpushShieldRsp.userId = 0;
  return self;
}
- (BOOL) hasResultCode {
  return resultImpushShieldRsp.hasResultCode;
}
- (UInt32) resultCode {
  return resultImpushShieldRsp.resultCode;
}
- (IMPushShieldRspBuilder*) setResultCode:(UInt32) value {
  resultImpushShieldRsp.hasResultCode = YES;
  resultImpushShieldRsp.resultCode = value;
  return self;
}
- (IMPushShieldRspBuilder*) clearResultCode {
  resultImpushShieldRsp.hasResultCode = NO;
  resultImpushShieldRsp.resultCode = 0;
  return self;
}
- (BOOL) hasShieldStatus {
  return resultImpushShieldRsp.hasShieldStatus;
}
- (UInt32) shieldStatus {
  return resultImpushShieldRsp.shieldStatus;
}
- (IMPushShieldRspBuilder*) setShieldStatus:(UInt32) value {
  resultImpushShieldRsp.hasShieldStatus = YES;
  resultImpushShieldRsp.shieldStatus = value;
  return self;
}
- (IMPushShieldRspBuilder*) clearShieldStatus {
  resultImpushShieldRsp.hasShieldStatus = NO;
  resultImpushShieldRsp.shieldStatus = 0;
  return self;
}
- (BOOL) hasAttachData {
  return resultImpushShieldRsp.hasAttachData;
}
- (NSData*) attachData {
  return resultImpushShieldRsp.attachData;
}
- (IMPushShieldRspBuilder*) setAttachData:(NSData*) value {
  resultImpushShieldRsp.hasAttachData = YES;
  resultImpushShieldRsp.attachData = value;
  return self;
}
- (IMPushShieldRspBuilder*) clearAttachData {
  resultImpushShieldRsp.hasAttachData = NO;
  resultImpushShieldRsp.attachData = [NSData data];
  return self;
}
@end

@interface IMQueryPushShieldReq ()
@property UInt32 userId;
@property (strong) NSData* attachData;
@end

@implementation IMQueryPushShieldReq

- (BOOL) hasUserId {
  return !!hasUserId_;
}
- (void) setHasUserId:(BOOL) _value_ {
  hasUserId_ = !!_value_;
}
@synthesize userId;
- (BOOL) hasAttachData {
  return !!hasAttachData_;
}
- (void) setHasAttachData:(BOOL) _value_ {
  hasAttachData_ = !!_value_;
}
@synthesize attachData;
- (instancetype) init {
  if ((self = [super init])) {
    self.userId = 0;
    self.attachData = [NSData data];
  }
  return self;
}
static IMQueryPushShieldReq* defaultIMQueryPushShieldReqInstance = nil;
+ (void) initialize {
  if (self == [IMQueryPushShieldReq class]) {
    defaultIMQueryPushShieldReqInstance = [[IMQueryPushShieldReq alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultIMQueryPushShieldReqInstance;
}
- (instancetype) defaultInstance {
  return defaultIMQueryPushShieldReqInstance;
}
- (BOOL) isInitialized {
  if (!self.hasUserId) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasUserId) {
    [output writeUInt32:1 value:self.userId];
  }
  if (self.hasAttachData) {
    [output writeData:20 value:self.attachData];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasUserId) {
    size_ += computeUInt32Size(1, self.userId);
  }
  if (self.hasAttachData) {
    size_ += computeDataSize(20, self.attachData);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (IMQueryPushShieldReq*) parseFromData:(NSData*) data {
  return (IMQueryPushShieldReq*)[[[IMQueryPushShieldReq builder] mergeFromData:data] build];
}
+ (IMQueryPushShieldReq*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMQueryPushShieldReq*)[[[IMQueryPushShieldReq builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (IMQueryPushShieldReq*) parseFromInputStream:(NSInputStream*) input {
  return (IMQueryPushShieldReq*)[[[IMQueryPushShieldReq builder] mergeFromInputStream:input] build];
}
+ (IMQueryPushShieldReq*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMQueryPushShieldReq*)[[[IMQueryPushShieldReq builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (IMQueryPushShieldReq*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (IMQueryPushShieldReq*)[[[IMQueryPushShieldReq builder] mergeFromCodedInputStream:input] build];
}
+ (IMQueryPushShieldReq*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMQueryPushShieldReq*)[[[IMQueryPushShieldReq builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (IMQueryPushShieldReqBuilder*) builder {
  return [[IMQueryPushShieldReqBuilder alloc] init];
}
+ (IMQueryPushShieldReqBuilder*) builderWithPrototype:(IMQueryPushShieldReq*) prototype {
  return [[IMQueryPushShieldReq builder] mergeFrom:prototype];
}
- (IMQueryPushShieldReqBuilder*) builder {
  return [IMQueryPushShieldReq builder];
}
- (IMQueryPushShieldReqBuilder*) toBuilder {
  return [IMQueryPushShieldReq builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasUserId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"userId", [NSNumber numberWithInteger:self.userId]];
  }
  if (self.hasAttachData) {
    [output appendFormat:@"%@%@: %@\n", indent, @"attachData", self.attachData];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasUserId) {
    [dictionary setObject: [NSNumber numberWithInteger:self.userId] forKey: @"userId"];
  }
  if (self.hasAttachData) {
    [dictionary setObject: self.attachData forKey: @"attachData"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[IMQueryPushShieldReq class]]) {
    return NO;
  }
  IMQueryPushShieldReq *otherMessage = other;
  return
      self.hasUserId == otherMessage.hasUserId &&
      (!self.hasUserId || self.userId == otherMessage.userId) &&
      self.hasAttachData == otherMessage.hasAttachData &&
      (!self.hasAttachData || [self.attachData isEqual:otherMessage.attachData]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasUserId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.userId] hash];
  }
  if (self.hasAttachData) {
    hashCode = hashCode * 31 + [self.attachData hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface IMQueryPushShieldReqBuilder()
@property (strong) IMQueryPushShieldReq* resultImqueryPushShieldReq;
@end

@implementation IMQueryPushShieldReqBuilder
@synthesize resultImqueryPushShieldReq;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultImqueryPushShieldReq = [[IMQueryPushShieldReq alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultImqueryPushShieldReq;
}
- (IMQueryPushShieldReqBuilder*) clear {
  self.resultImqueryPushShieldReq = [[IMQueryPushShieldReq alloc] init];
  return self;
}
- (IMQueryPushShieldReqBuilder*) clone {
  return [IMQueryPushShieldReq builderWithPrototype:resultImqueryPushShieldReq];
}
- (IMQueryPushShieldReq*) defaultInstance {
  return [IMQueryPushShieldReq defaultInstance];
}
- (IMQueryPushShieldReq*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (IMQueryPushShieldReq*) buildPartial {
  IMQueryPushShieldReq* returnMe = resultImqueryPushShieldReq;
  self.resultImqueryPushShieldReq = nil;
  return returnMe;
}
- (IMQueryPushShieldReqBuilder*) mergeFrom:(IMQueryPushShieldReq*) other {
  if (other == [IMQueryPushShieldReq defaultInstance]) {
    return self;
  }
  if (other.hasUserId) {
    [self setUserId:other.userId];
  }
  if (other.hasAttachData) {
    [self setAttachData:other.attachData];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (IMQueryPushShieldReqBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (IMQueryPushShieldReqBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setUserId:[input readUInt32]];
        break;
      }
      case 162: {
        [self setAttachData:[input readData]];
        break;
      }
    }
  }
}
- (BOOL) hasUserId {
  return resultImqueryPushShieldReq.hasUserId;
}
- (UInt32) userId {
  return resultImqueryPushShieldReq.userId;
}
- (IMQueryPushShieldReqBuilder*) setUserId:(UInt32) value {
  resultImqueryPushShieldReq.hasUserId = YES;
  resultImqueryPushShieldReq.userId = value;
  return self;
}
- (IMQueryPushShieldReqBuilder*) clearUserId {
  resultImqueryPushShieldReq.hasUserId = NO;
  resultImqueryPushShieldReq.userId = 0;
  return self;
}
- (BOOL) hasAttachData {
  return resultImqueryPushShieldReq.hasAttachData;
}
- (NSData*) attachData {
  return resultImqueryPushShieldReq.attachData;
}
- (IMQueryPushShieldReqBuilder*) setAttachData:(NSData*) value {
  resultImqueryPushShieldReq.hasAttachData = YES;
  resultImqueryPushShieldReq.attachData = value;
  return self;
}
- (IMQueryPushShieldReqBuilder*) clearAttachData {
  resultImqueryPushShieldReq.hasAttachData = NO;
  resultImqueryPushShieldReq.attachData = [NSData data];
  return self;
}
@end

@interface IMQueryPushShieldRsp ()
@property UInt32 userId;
@property UInt32 resultCode;
@property UInt32 shieldStatus;
@property (strong) NSData* attachData;
@end

@implementation IMQueryPushShieldRsp

- (BOOL) hasUserId {
  return !!hasUserId_;
}
- (void) setHasUserId:(BOOL) _value_ {
  hasUserId_ = !!_value_;
}
@synthesize userId;
- (BOOL) hasResultCode {
  return !!hasResultCode_;
}
- (void) setHasResultCode:(BOOL) _value_ {
  hasResultCode_ = !!_value_;
}
@synthesize resultCode;
- (BOOL) hasShieldStatus {
  return !!hasShieldStatus_;
}
- (void) setHasShieldStatus:(BOOL) _value_ {
  hasShieldStatus_ = !!_value_;
}
@synthesize shieldStatus;
- (BOOL) hasAttachData {
  return !!hasAttachData_;
}
- (void) setHasAttachData:(BOOL) _value_ {
  hasAttachData_ = !!_value_;
}
@synthesize attachData;
- (instancetype) init {
  if ((self = [super init])) {
    self.userId = 0;
    self.resultCode = 0;
    self.shieldStatus = 0;
    self.attachData = [NSData data];
  }
  return self;
}
static IMQueryPushShieldRsp* defaultIMQueryPushShieldRspInstance = nil;
+ (void) initialize {
  if (self == [IMQueryPushShieldRsp class]) {
    defaultIMQueryPushShieldRspInstance = [[IMQueryPushShieldRsp alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultIMQueryPushShieldRspInstance;
}
- (instancetype) defaultInstance {
  return defaultIMQueryPushShieldRspInstance;
}
- (BOOL) isInitialized {
  if (!self.hasUserId) {
    return NO;
  }
  if (!self.hasResultCode) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasUserId) {
    [output writeUInt32:1 value:self.userId];
  }
  if (self.hasResultCode) {
    [output writeUInt32:2 value:self.resultCode];
  }
  if (self.hasShieldStatus) {
    [output writeUInt32:3 value:self.shieldStatus];
  }
  if (self.hasAttachData) {
    [output writeData:20 value:self.attachData];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasUserId) {
    size_ += computeUInt32Size(1, self.userId);
  }
  if (self.hasResultCode) {
    size_ += computeUInt32Size(2, self.resultCode);
  }
  if (self.hasShieldStatus) {
    size_ += computeUInt32Size(3, self.shieldStatus);
  }
  if (self.hasAttachData) {
    size_ += computeDataSize(20, self.attachData);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (IMQueryPushShieldRsp*) parseFromData:(NSData*) data {
  return (IMQueryPushShieldRsp*)[[[IMQueryPushShieldRsp builder] mergeFromData:data] build];
}
+ (IMQueryPushShieldRsp*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMQueryPushShieldRsp*)[[[IMQueryPushShieldRsp builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (IMQueryPushShieldRsp*) parseFromInputStream:(NSInputStream*) input {
  return (IMQueryPushShieldRsp*)[[[IMQueryPushShieldRsp builder] mergeFromInputStream:input] build];
}
+ (IMQueryPushShieldRsp*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMQueryPushShieldRsp*)[[[IMQueryPushShieldRsp builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (IMQueryPushShieldRsp*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (IMQueryPushShieldRsp*)[[[IMQueryPushShieldRsp builder] mergeFromCodedInputStream:input] build];
}
+ (IMQueryPushShieldRsp*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMQueryPushShieldRsp*)[[[IMQueryPushShieldRsp builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (IMQueryPushShieldRspBuilder*) builder {
  return [[IMQueryPushShieldRspBuilder alloc] init];
}
+ (IMQueryPushShieldRspBuilder*) builderWithPrototype:(IMQueryPushShieldRsp*) prototype {
  return [[IMQueryPushShieldRsp builder] mergeFrom:prototype];
}
- (IMQueryPushShieldRspBuilder*) builder {
  return [IMQueryPushShieldRsp builder];
}
- (IMQueryPushShieldRspBuilder*) toBuilder {
  return [IMQueryPushShieldRsp builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasUserId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"userId", [NSNumber numberWithInteger:self.userId]];
  }
  if (self.hasResultCode) {
    [output appendFormat:@"%@%@: %@\n", indent, @"resultCode", [NSNumber numberWithInteger:self.resultCode]];
  }
  if (self.hasShieldStatus) {
    [output appendFormat:@"%@%@: %@\n", indent, @"shieldStatus", [NSNumber numberWithInteger:self.shieldStatus]];
  }
  if (self.hasAttachData) {
    [output appendFormat:@"%@%@: %@\n", indent, @"attachData", self.attachData];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasUserId) {
    [dictionary setObject: [NSNumber numberWithInteger:self.userId] forKey: @"userId"];
  }
  if (self.hasResultCode) {
    [dictionary setObject: [NSNumber numberWithInteger:self.resultCode] forKey: @"resultCode"];
  }
  if (self.hasShieldStatus) {
    [dictionary setObject: [NSNumber numberWithInteger:self.shieldStatus] forKey: @"shieldStatus"];
  }
  if (self.hasAttachData) {
    [dictionary setObject: self.attachData forKey: @"attachData"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[IMQueryPushShieldRsp class]]) {
    return NO;
  }
  IMQueryPushShieldRsp *otherMessage = other;
  return
      self.hasUserId == otherMessage.hasUserId &&
      (!self.hasUserId || self.userId == otherMessage.userId) &&
      self.hasResultCode == otherMessage.hasResultCode &&
      (!self.hasResultCode || self.resultCode == otherMessage.resultCode) &&
      self.hasShieldStatus == otherMessage.hasShieldStatus &&
      (!self.hasShieldStatus || self.shieldStatus == otherMessage.shieldStatus) &&
      self.hasAttachData == otherMessage.hasAttachData &&
      (!self.hasAttachData || [self.attachData isEqual:otherMessage.attachData]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasUserId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.userId] hash];
  }
  if (self.hasResultCode) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.resultCode] hash];
  }
  if (self.hasShieldStatus) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.shieldStatus] hash];
  }
  if (self.hasAttachData) {
    hashCode = hashCode * 31 + [self.attachData hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface IMQueryPushShieldRspBuilder()
@property (strong) IMQueryPushShieldRsp* resultImqueryPushShieldRsp;
@end

@implementation IMQueryPushShieldRspBuilder
@synthesize resultImqueryPushShieldRsp;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultImqueryPushShieldRsp = [[IMQueryPushShieldRsp alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultImqueryPushShieldRsp;
}
- (IMQueryPushShieldRspBuilder*) clear {
  self.resultImqueryPushShieldRsp = [[IMQueryPushShieldRsp alloc] init];
  return self;
}
- (IMQueryPushShieldRspBuilder*) clone {
  return [IMQueryPushShieldRsp builderWithPrototype:resultImqueryPushShieldRsp];
}
- (IMQueryPushShieldRsp*) defaultInstance {
  return [IMQueryPushShieldRsp defaultInstance];
}
- (IMQueryPushShieldRsp*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (IMQueryPushShieldRsp*) buildPartial {
  IMQueryPushShieldRsp* returnMe = resultImqueryPushShieldRsp;
  self.resultImqueryPushShieldRsp = nil;
  return returnMe;
}
- (IMQueryPushShieldRspBuilder*) mergeFrom:(IMQueryPushShieldRsp*) other {
  if (other == [IMQueryPushShieldRsp defaultInstance]) {
    return self;
  }
  if (other.hasUserId) {
    [self setUserId:other.userId];
  }
  if (other.hasResultCode) {
    [self setResultCode:other.resultCode];
  }
  if (other.hasShieldStatus) {
    [self setShieldStatus:other.shieldStatus];
  }
  if (other.hasAttachData) {
    [self setAttachData:other.attachData];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (IMQueryPushShieldRspBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (IMQueryPushShieldRspBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setUserId:[input readUInt32]];
        break;
      }
      case 16: {
        [self setResultCode:[input readUInt32]];
        break;
      }
      case 24: {
        [self setShieldStatus:[input readUInt32]];
        break;
      }
      case 162: {
        [self setAttachData:[input readData]];
        break;
      }
    }
  }
}
- (BOOL) hasUserId {
  return resultImqueryPushShieldRsp.hasUserId;
}
- (UInt32) userId {
  return resultImqueryPushShieldRsp.userId;
}
- (IMQueryPushShieldRspBuilder*) setUserId:(UInt32) value {
  resultImqueryPushShieldRsp.hasUserId = YES;
  resultImqueryPushShieldRsp.userId = value;
  return self;
}
- (IMQueryPushShieldRspBuilder*) clearUserId {
  resultImqueryPushShieldRsp.hasUserId = NO;
  resultImqueryPushShieldRsp.userId = 0;
  return self;
}
- (BOOL) hasResultCode {
  return resultImqueryPushShieldRsp.hasResultCode;
}
- (UInt32) resultCode {
  return resultImqueryPushShieldRsp.resultCode;
}
- (IMQueryPushShieldRspBuilder*) setResultCode:(UInt32) value {
  resultImqueryPushShieldRsp.hasResultCode = YES;
  resultImqueryPushShieldRsp.resultCode = value;
  return self;
}
- (IMQueryPushShieldRspBuilder*) clearResultCode {
  resultImqueryPushShieldRsp.hasResultCode = NO;
  resultImqueryPushShieldRsp.resultCode = 0;
  return self;
}
- (BOOL) hasShieldStatus {
  return resultImqueryPushShieldRsp.hasShieldStatus;
}
- (UInt32) shieldStatus {
  return resultImqueryPushShieldRsp.shieldStatus;
}
- (IMQueryPushShieldRspBuilder*) setShieldStatus:(UInt32) value {
  resultImqueryPushShieldRsp.hasShieldStatus = YES;
  resultImqueryPushShieldRsp.shieldStatus = value;
  return self;
}
- (IMQueryPushShieldRspBuilder*) clearShieldStatus {
  resultImqueryPushShieldRsp.hasShieldStatus = NO;
  resultImqueryPushShieldRsp.shieldStatus = 0;
  return self;
}
- (BOOL) hasAttachData {
  return resultImqueryPushShieldRsp.hasAttachData;
}
- (NSData*) attachData {
  return resultImqueryPushShieldRsp.attachData;
}
- (IMQueryPushShieldRspBuilder*) setAttachData:(NSData*) value {
  resultImqueryPushShieldRsp.hasAttachData = YES;
  resultImqueryPushShieldRsp.attachData = value;
  return self;
}
- (IMQueryPushShieldRspBuilder*) clearAttachData {
  resultImqueryPushShieldRsp.hasAttachData = NO;
  resultImqueryPushShieldRsp.attachData = [NSData data];
  return self;
}
@end

@interface IMModifyPassReq ()
@property UInt32 userId;
@property (strong) NSString* oldPass;
@property (strong) NS_RETURNS_NOT_RETAINED NSString* newPass;
@property (strong) NSData* attachData;
@end

@implementation IMModifyPassReq

- (BOOL) hasUserId {
  return !!hasUserId_;
}
- (void) setHasUserId:(BOOL) _value_ {
  hasUserId_ = !!_value_;
}
@synthesize userId;
- (BOOL) hasOldPass {
  return !!hasOldPass_;
}
- (void) setHasOldPass:(BOOL) _value_ {
  hasOldPass_ = !!_value_;
}
@synthesize oldPass;
- (BOOL) hasNewPass {
  return !!hasNewPass_;
}
- (void) setHasNewPass:(BOOL) _value_ {
  hasNewPass_ = !!_value_;
}
@synthesize newPass;
- (BOOL) hasAttachData {
  return !!hasAttachData_;
}
- (void) setHasAttachData:(BOOL) _value_ {
  hasAttachData_ = !!_value_;
}
@synthesize attachData;
- (instancetype) init {
  if ((self = [super init])) {
    self.userId = 0;
    self.oldPass = @"";
    self.newPass = @"";
    self.attachData = [NSData data];
  }
  return self;
}
static IMModifyPassReq* defaultIMModifyPassReqInstance = nil;
+ (void) initialize {
  if (self == [IMModifyPassReq class]) {
    defaultIMModifyPassReqInstance = [[IMModifyPassReq alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultIMModifyPassReqInstance;
}
- (instancetype) defaultInstance {
  return defaultIMModifyPassReqInstance;
}
- (BOOL) isInitialized {
  if (!self.hasUserId) {
    return NO;
  }
  if (!self.hasOldPass) {
    return NO;
  }
  if (!self.hasNewPass) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasUserId) {
    [output writeUInt32:1 value:self.userId];
  }
  if (self.hasOldPass) {
    [output writeString:2 value:self.oldPass];
  }
  if (self.hasNewPass) {
    [output writeString:3 value:self.newPass];
  }
  if (self.hasAttachData) {
    [output writeData:20 value:self.attachData];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasUserId) {
    size_ += computeUInt32Size(1, self.userId);
  }
  if (self.hasOldPass) {
    size_ += computeStringSize(2, self.oldPass);
  }
  if (self.hasNewPass) {
    size_ += computeStringSize(3, self.newPass);
  }
  if (self.hasAttachData) {
    size_ += computeDataSize(20, self.attachData);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (IMModifyPassReq*) parseFromData:(NSData*) data {
  return (IMModifyPassReq*)[[[IMModifyPassReq builder] mergeFromData:data] build];
}
+ (IMModifyPassReq*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMModifyPassReq*)[[[IMModifyPassReq builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (IMModifyPassReq*) parseFromInputStream:(NSInputStream*) input {
  return (IMModifyPassReq*)[[[IMModifyPassReq builder] mergeFromInputStream:input] build];
}
+ (IMModifyPassReq*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMModifyPassReq*)[[[IMModifyPassReq builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (IMModifyPassReq*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (IMModifyPassReq*)[[[IMModifyPassReq builder] mergeFromCodedInputStream:input] build];
}
+ (IMModifyPassReq*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMModifyPassReq*)[[[IMModifyPassReq builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (IMModifyPassReqBuilder*) builder {
  return [[IMModifyPassReqBuilder alloc] init];
}
+ (IMModifyPassReqBuilder*) builderWithPrototype:(IMModifyPassReq*) prototype {
  return [[IMModifyPassReq builder] mergeFrom:prototype];
}
- (IMModifyPassReqBuilder*) builder {
  return [IMModifyPassReq builder];
}
- (IMModifyPassReqBuilder*) toBuilder {
  return [IMModifyPassReq builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasUserId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"userId", [NSNumber numberWithInteger:self.userId]];
  }
  if (self.hasOldPass) {
    [output appendFormat:@"%@%@: %@\n", indent, @"oldPass", self.oldPass];
  }
  if (self.hasNewPass) {
    [output appendFormat:@"%@%@: %@\n", indent, @"newPass", self.newPass];
  }
  if (self.hasAttachData) {
    [output appendFormat:@"%@%@: %@\n", indent, @"attachData", self.attachData];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasUserId) {
    [dictionary setObject: [NSNumber numberWithInteger:self.userId] forKey: @"userId"];
  }
  if (self.hasOldPass) {
    [dictionary setObject: self.oldPass forKey: @"oldPass"];
  }
  if (self.hasNewPass) {
    [dictionary setObject: self.newPass forKey: @"newPass"];
  }
  if (self.hasAttachData) {
    [dictionary setObject: self.attachData forKey: @"attachData"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[IMModifyPassReq class]]) {
    return NO;
  }
  IMModifyPassReq *otherMessage = other;
  return
      self.hasUserId == otherMessage.hasUserId &&
      (!self.hasUserId || self.userId == otherMessage.userId) &&
      self.hasOldPass == otherMessage.hasOldPass &&
      (!self.hasOldPass || [self.oldPass isEqual:otherMessage.oldPass]) &&
      self.hasNewPass == otherMessage.hasNewPass &&
      (!self.hasNewPass || [self.newPass isEqual:otherMessage.newPass]) &&
      self.hasAttachData == otherMessage.hasAttachData &&
      (!self.hasAttachData || [self.attachData isEqual:otherMessage.attachData]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasUserId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.userId] hash];
  }
  if (self.hasOldPass) {
    hashCode = hashCode * 31 + [self.oldPass hash];
  }
  if (self.hasNewPass) {
    hashCode = hashCode * 31 + [self.newPass hash];
  }
  if (self.hasAttachData) {
    hashCode = hashCode * 31 + [self.attachData hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface IMModifyPassReqBuilder()
@property (strong) IMModifyPassReq* resultImmodifyPassReq;
@end

@implementation IMModifyPassReqBuilder
@synthesize resultImmodifyPassReq;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultImmodifyPassReq = [[IMModifyPassReq alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultImmodifyPassReq;
}
- (IMModifyPassReqBuilder*) clear {
  self.resultImmodifyPassReq = [[IMModifyPassReq alloc] init];
  return self;
}
- (IMModifyPassReqBuilder*) clone {
  return [IMModifyPassReq builderWithPrototype:resultImmodifyPassReq];
}
- (IMModifyPassReq*) defaultInstance {
  return [IMModifyPassReq defaultInstance];
}
- (IMModifyPassReq*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (IMModifyPassReq*) buildPartial {
  IMModifyPassReq* returnMe = resultImmodifyPassReq;
  self.resultImmodifyPassReq = nil;
  return returnMe;
}
- (IMModifyPassReqBuilder*) mergeFrom:(IMModifyPassReq*) other {
  if (other == [IMModifyPassReq defaultInstance]) {
    return self;
  }
  if (other.hasUserId) {
    [self setUserId:other.userId];
  }
  if (other.hasOldPass) {
    [self setOldPass:other.oldPass];
  }
  if (other.hasNewPass) {
    [self setNewPass:other.newPass];
  }
  if (other.hasAttachData) {
    [self setAttachData:other.attachData];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (IMModifyPassReqBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (IMModifyPassReqBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setUserId:[input readUInt32]];
        break;
      }
      case 18: {
        [self setOldPass:[input readString]];
        break;
      }
      case 26: {
        [self setNewPass:[input readString]];
        break;
      }
      case 162: {
        [self setAttachData:[input readData]];
        break;
      }
    }
  }
}
- (BOOL) hasUserId {
  return resultImmodifyPassReq.hasUserId;
}
- (UInt32) userId {
  return resultImmodifyPassReq.userId;
}
- (IMModifyPassReqBuilder*) setUserId:(UInt32) value {
  resultImmodifyPassReq.hasUserId = YES;
  resultImmodifyPassReq.userId = value;
  return self;
}
- (IMModifyPassReqBuilder*) clearUserId {
  resultImmodifyPassReq.hasUserId = NO;
  resultImmodifyPassReq.userId = 0;
  return self;
}
- (BOOL) hasOldPass {
  return resultImmodifyPassReq.hasOldPass;
}
- (NSString*) oldPass {
  return resultImmodifyPassReq.oldPass;
}
- (IMModifyPassReqBuilder*) setOldPass:(NSString*) value {
  resultImmodifyPassReq.hasOldPass = YES;
  resultImmodifyPassReq.oldPass = value;
  return self;
}
- (IMModifyPassReqBuilder*) clearOldPass {
  resultImmodifyPassReq.hasOldPass = NO;
  resultImmodifyPassReq.oldPass = @"";
  return self;
}
- (BOOL) hasNewPass {
  return resultImmodifyPassReq.hasNewPass;
}
- (NSString*) newPass {
  return resultImmodifyPassReq.newPass;
}
- (IMModifyPassReqBuilder*) setNewPass:(NSString*) value {
  resultImmodifyPassReq.hasNewPass = YES;
  resultImmodifyPassReq.newPass = value;
  return self;
}
- (IMModifyPassReqBuilder*) clearNewPass {
  resultImmodifyPassReq.hasNewPass = NO;
  resultImmodifyPassReq.newPass = @"";
  return self;
}
- (BOOL) hasAttachData {
  return resultImmodifyPassReq.hasAttachData;
}
- (NSData*) attachData {
  return resultImmodifyPassReq.attachData;
}
- (IMModifyPassReqBuilder*) setAttachData:(NSData*) value {
  resultImmodifyPassReq.hasAttachData = YES;
  resultImmodifyPassReq.attachData = value;
  return self;
}
- (IMModifyPassReqBuilder*) clearAttachData {
  resultImmodifyPassReq.hasAttachData = NO;
  resultImmodifyPassReq.attachData = [NSData data];
  return self;
}
@end

@interface IMModifyPassRes ()
@property UInt32 userId;
@property UInt32 status;
@property (strong) NSData* attachData;
@end

@implementation IMModifyPassRes

- (BOOL) hasUserId {
  return !!hasUserId_;
}
- (void) setHasUserId:(BOOL) _value_ {
  hasUserId_ = !!_value_;
}
@synthesize userId;
- (BOOL) hasStatus {
  return !!hasStatus_;
}
- (void) setHasStatus:(BOOL) _value_ {
  hasStatus_ = !!_value_;
}
@synthesize status;
- (BOOL) hasAttachData {
  return !!hasAttachData_;
}
- (void) setHasAttachData:(BOOL) _value_ {
  hasAttachData_ = !!_value_;
}
@synthesize attachData;
- (instancetype) init {
  if ((self = [super init])) {
    self.userId = 0;
    self.status = 0;
    self.attachData = [NSData data];
  }
  return self;
}
static IMModifyPassRes* defaultIMModifyPassResInstance = nil;
+ (void) initialize {
  if (self == [IMModifyPassRes class]) {
    defaultIMModifyPassResInstance = [[IMModifyPassRes alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultIMModifyPassResInstance;
}
- (instancetype) defaultInstance {
  return defaultIMModifyPassResInstance;
}
- (BOOL) isInitialized {
  if (!self.hasUserId) {
    return NO;
  }
  if (!self.hasStatus) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasUserId) {
    [output writeUInt32:1 value:self.userId];
  }
  if (self.hasStatus) {
    [output writeUInt32:2 value:self.status];
  }
  if (self.hasAttachData) {
    [output writeData:20 value:self.attachData];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasUserId) {
    size_ += computeUInt32Size(1, self.userId);
  }
  if (self.hasStatus) {
    size_ += computeUInt32Size(2, self.status);
  }
  if (self.hasAttachData) {
    size_ += computeDataSize(20, self.attachData);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (IMModifyPassRes*) parseFromData:(NSData*) data {
  return (IMModifyPassRes*)[[[IMModifyPassRes builder] mergeFromData:data] build];
}
+ (IMModifyPassRes*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMModifyPassRes*)[[[IMModifyPassRes builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (IMModifyPassRes*) parseFromInputStream:(NSInputStream*) input {
  return (IMModifyPassRes*)[[[IMModifyPassRes builder] mergeFromInputStream:input] build];
}
+ (IMModifyPassRes*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMModifyPassRes*)[[[IMModifyPassRes builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (IMModifyPassRes*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (IMModifyPassRes*)[[[IMModifyPassRes builder] mergeFromCodedInputStream:input] build];
}
+ (IMModifyPassRes*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMModifyPassRes*)[[[IMModifyPassRes builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (IMModifyPassResBuilder*) builder {
  return [[IMModifyPassResBuilder alloc] init];
}
+ (IMModifyPassResBuilder*) builderWithPrototype:(IMModifyPassRes*) prototype {
  return [[IMModifyPassRes builder] mergeFrom:prototype];
}
- (IMModifyPassResBuilder*) builder {
  return [IMModifyPassRes builder];
}
- (IMModifyPassResBuilder*) toBuilder {
  return [IMModifyPassRes builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasUserId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"userId", [NSNumber numberWithInteger:self.userId]];
  }
  if (self.hasStatus) {
    [output appendFormat:@"%@%@: %@\n", indent, @"status", [NSNumber numberWithInteger:self.status]];
  }
  if (self.hasAttachData) {
    [output appendFormat:@"%@%@: %@\n", indent, @"attachData", self.attachData];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasUserId) {
    [dictionary setObject: [NSNumber numberWithInteger:self.userId] forKey: @"userId"];
  }
  if (self.hasStatus) {
    [dictionary setObject: [NSNumber numberWithInteger:self.status] forKey: @"status"];
  }
  if (self.hasAttachData) {
    [dictionary setObject: self.attachData forKey: @"attachData"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[IMModifyPassRes class]]) {
    return NO;
  }
  IMModifyPassRes *otherMessage = other;
  return
      self.hasUserId == otherMessage.hasUserId &&
      (!self.hasUserId || self.userId == otherMessage.userId) &&
      self.hasStatus == otherMessage.hasStatus &&
      (!self.hasStatus || self.status == otherMessage.status) &&
      self.hasAttachData == otherMessage.hasAttachData &&
      (!self.hasAttachData || [self.attachData isEqual:otherMessage.attachData]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasUserId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.userId] hash];
  }
  if (self.hasStatus) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.status] hash];
  }
  if (self.hasAttachData) {
    hashCode = hashCode * 31 + [self.attachData hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface IMModifyPassResBuilder()
@property (strong) IMModifyPassRes* resultImmodifyPassRes;
@end

@implementation IMModifyPassResBuilder
@synthesize resultImmodifyPassRes;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultImmodifyPassRes = [[IMModifyPassRes alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultImmodifyPassRes;
}
- (IMModifyPassResBuilder*) clear {
  self.resultImmodifyPassRes = [[IMModifyPassRes alloc] init];
  return self;
}
- (IMModifyPassResBuilder*) clone {
  return [IMModifyPassRes builderWithPrototype:resultImmodifyPassRes];
}
- (IMModifyPassRes*) defaultInstance {
  return [IMModifyPassRes defaultInstance];
}
- (IMModifyPassRes*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (IMModifyPassRes*) buildPartial {
  IMModifyPassRes* returnMe = resultImmodifyPassRes;
  self.resultImmodifyPassRes = nil;
  return returnMe;
}
- (IMModifyPassResBuilder*) mergeFrom:(IMModifyPassRes*) other {
  if (other == [IMModifyPassRes defaultInstance]) {
    return self;
  }
  if (other.hasUserId) {
    [self setUserId:other.userId];
  }
  if (other.hasStatus) {
    [self setStatus:other.status];
  }
  if (other.hasAttachData) {
    [self setAttachData:other.attachData];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (IMModifyPassResBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (IMModifyPassResBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setUserId:[input readUInt32]];
        break;
      }
      case 16: {
        [self setStatus:[input readUInt32]];
        break;
      }
      case 162: {
        [self setAttachData:[input readData]];
        break;
      }
    }
  }
}
- (BOOL) hasUserId {
  return resultImmodifyPassRes.hasUserId;
}
- (UInt32) userId {
  return resultImmodifyPassRes.userId;
}
- (IMModifyPassResBuilder*) setUserId:(UInt32) value {
  resultImmodifyPassRes.hasUserId = YES;
  resultImmodifyPassRes.userId = value;
  return self;
}
- (IMModifyPassResBuilder*) clearUserId {
  resultImmodifyPassRes.hasUserId = NO;
  resultImmodifyPassRes.userId = 0;
  return self;
}
- (BOOL) hasStatus {
  return resultImmodifyPassRes.hasStatus;
}
- (UInt32) status {
  return resultImmodifyPassRes.status;
}
- (IMModifyPassResBuilder*) setStatus:(UInt32) value {
  resultImmodifyPassRes.hasStatus = YES;
  resultImmodifyPassRes.status = value;
  return self;
}
- (IMModifyPassResBuilder*) clearStatus {
  resultImmodifyPassRes.hasStatus = NO;
  resultImmodifyPassRes.status = 0;
  return self;
}
- (BOOL) hasAttachData {
  return resultImmodifyPassRes.hasAttachData;
}
- (NSData*) attachData {
  return resultImmodifyPassRes.attachData;
}
- (IMModifyPassResBuilder*) setAttachData:(NSData*) value {
  resultImmodifyPassRes.hasAttachData = YES;
  resultImmodifyPassRes.attachData = value;
  return self;
}
- (IMModifyPassResBuilder*) clearAttachData {
  resultImmodifyPassRes.hasAttachData = NO;
  resultImmodifyPassRes.attachData = [NSData data];
  return self;
}
@end


// @@protoc_insertion_point(global_scope)
