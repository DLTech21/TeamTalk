// Generated by the protocol buffer compiler.  DO NOT EDIT!

#import "IMMessage.pb.h"
// @@protoc_insertion_point(imports)

@implementation ImmessageRoot
static PBExtensionRegistry* extensionRegistry = nil;
+ (PBExtensionRegistry*) extensionRegistry {
  return extensionRegistry;
}

+ (void) initialize {
  if (self == [ImmessageRoot class]) {
    PBMutableExtensionRegistry* registry = [PBMutableExtensionRegistry registry];
    [self registerAllExtensions:registry];
    [ImbaseDefineRoot registerAllExtensions:registry];
    extensionRegistry = registry;
  }
}
+ (void) registerAllExtensions:(PBMutableExtensionRegistry*) registry {
}
@end

@interface IMMsgData ()
@property UInt32 fromUserId;
@property UInt32 toSessionId;
@property UInt32 msgId;
@property UInt32 createTime;
@property MsgType msgType;
@property (strong) NSData* msgData;
@property (strong) NSData* attachData;
@end

@implementation IMMsgData

- (BOOL) hasFromUserId {
  return !!hasFromUserId_;
}
- (void) setHasFromUserId:(BOOL) _value_ {
  hasFromUserId_ = !!_value_;
}
@synthesize fromUserId;
- (BOOL) hasToSessionId {
  return !!hasToSessionId_;
}
- (void) setHasToSessionId:(BOOL) _value_ {
  hasToSessionId_ = !!_value_;
}
@synthesize toSessionId;
- (BOOL) hasMsgId {
  return !!hasMsgId_;
}
- (void) setHasMsgId:(BOOL) _value_ {
  hasMsgId_ = !!_value_;
}
@synthesize msgId;
- (BOOL) hasCreateTime {
  return !!hasCreateTime_;
}
- (void) setHasCreateTime:(BOOL) _value_ {
  hasCreateTime_ = !!_value_;
}
@synthesize createTime;
- (BOOL) hasMsgType {
  return !!hasMsgType_;
}
- (void) setHasMsgType:(BOOL) _value_ {
  hasMsgType_ = !!_value_;
}
@synthesize msgType;
- (BOOL) hasMsgData {
  return !!hasMsgData_;
}
- (void) setHasMsgData:(BOOL) _value_ {
  hasMsgData_ = !!_value_;
}
@synthesize msgData;
- (BOOL) hasAttachData {
  return !!hasAttachData_;
}
- (void) setHasAttachData:(BOOL) _value_ {
  hasAttachData_ = !!_value_;
}
@synthesize attachData;
- (instancetype) init {
  if ((self = [super init])) {
    self.fromUserId = 0;
    self.toSessionId = 0;
    self.msgId = 0;
    self.createTime = 0;
    self.msgType = MsgTypeMsgTypeSingleText;
    self.msgData = [NSData data];
    self.attachData = [NSData data];
  }
  return self;
}
static IMMsgData* defaultIMMsgDataInstance = nil;
+ (void) initialize {
  if (self == [IMMsgData class]) {
    defaultIMMsgDataInstance = [[IMMsgData alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultIMMsgDataInstance;
}
- (instancetype) defaultInstance {
  return defaultIMMsgDataInstance;
}
- (BOOL) isInitialized {
  if (!self.hasFromUserId) {
    return NO;
  }
  if (!self.hasToSessionId) {
    return NO;
  }
  if (!self.hasMsgId) {
    return NO;
  }
  if (!self.hasCreateTime) {
    return NO;
  }
  if (!self.hasMsgType) {
    return NO;
  }
  if (!self.hasMsgData) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasFromUserId) {
    [output writeUInt32:1 value:self.fromUserId];
  }
  if (self.hasToSessionId) {
    [output writeUInt32:2 value:self.toSessionId];
  }
  if (self.hasMsgId) {
    [output writeUInt32:3 value:self.msgId];
  }
  if (self.hasCreateTime) {
    [output writeUInt32:4 value:self.createTime];
  }
  if (self.hasMsgType) {
    [output writeEnum:5 value:self.msgType];
  }
  if (self.hasMsgData) {
    [output writeData:6 value:self.msgData];
  }
  if (self.hasAttachData) {
    [output writeData:20 value:self.attachData];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasFromUserId) {
    size_ += computeUInt32Size(1, self.fromUserId);
  }
  if (self.hasToSessionId) {
    size_ += computeUInt32Size(2, self.toSessionId);
  }
  if (self.hasMsgId) {
    size_ += computeUInt32Size(3, self.msgId);
  }
  if (self.hasCreateTime) {
    size_ += computeUInt32Size(4, self.createTime);
  }
  if (self.hasMsgType) {
    size_ += computeEnumSize(5, self.msgType);
  }
  if (self.hasMsgData) {
    size_ += computeDataSize(6, self.msgData);
  }
  if (self.hasAttachData) {
    size_ += computeDataSize(20, self.attachData);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (IMMsgData*) parseFromData:(NSData*) data {
  return (IMMsgData*)[[[IMMsgData builder] mergeFromData:data] build];
}
+ (IMMsgData*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMMsgData*)[[[IMMsgData builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (IMMsgData*) parseFromInputStream:(NSInputStream*) input {
  return (IMMsgData*)[[[IMMsgData builder] mergeFromInputStream:input] build];
}
+ (IMMsgData*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMMsgData*)[[[IMMsgData builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (IMMsgData*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (IMMsgData*)[[[IMMsgData builder] mergeFromCodedInputStream:input] build];
}
+ (IMMsgData*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMMsgData*)[[[IMMsgData builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (IMMsgDataBuilder*) builder {
  return [[IMMsgDataBuilder alloc] init];
}
+ (IMMsgDataBuilder*) builderWithPrototype:(IMMsgData*) prototype {
  return [[IMMsgData builder] mergeFrom:prototype];
}
- (IMMsgDataBuilder*) builder {
  return [IMMsgData builder];
}
- (IMMsgDataBuilder*) toBuilder {
  return [IMMsgData builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasFromUserId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"fromUserId", [NSNumber numberWithInteger:self.fromUserId]];
  }
  if (self.hasToSessionId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"toSessionId", [NSNumber numberWithInteger:self.toSessionId]];
  }
  if (self.hasMsgId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"msgId", [NSNumber numberWithInteger:self.msgId]];
  }
  if (self.hasCreateTime) {
    [output appendFormat:@"%@%@: %@\n", indent, @"createTime", [NSNumber numberWithInteger:self.createTime]];
  }
  if (self.hasMsgType) {
    [output appendFormat:@"%@%@: %@\n", indent, @"msgType", NSStringFromMsgType(self.msgType)];
  }
  if (self.hasMsgData) {
    [output appendFormat:@"%@%@: %@\n", indent, @"msgData", self.msgData];
  }
  if (self.hasAttachData) {
    [output appendFormat:@"%@%@: %@\n", indent, @"attachData", self.attachData];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasFromUserId) {
    [dictionary setObject: [NSNumber numberWithInteger:self.fromUserId] forKey: @"fromUserId"];
  }
  if (self.hasToSessionId) {
    [dictionary setObject: [NSNumber numberWithInteger:self.toSessionId] forKey: @"toSessionId"];
  }
  if (self.hasMsgId) {
    [dictionary setObject: [NSNumber numberWithInteger:self.msgId] forKey: @"msgId"];
  }
  if (self.hasCreateTime) {
    [dictionary setObject: [NSNumber numberWithInteger:self.createTime] forKey: @"createTime"];
  }
  if (self.hasMsgType) {
    [dictionary setObject: @(self.msgType) forKey: @"msgType"];
  }
  if (self.hasMsgData) {
    [dictionary setObject: self.msgData forKey: @"msgData"];
  }
  if (self.hasAttachData) {
    [dictionary setObject: self.attachData forKey: @"attachData"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[IMMsgData class]]) {
    return NO;
  }
  IMMsgData *otherMessage = other;
  return
      self.hasFromUserId == otherMessage.hasFromUserId &&
      (!self.hasFromUserId || self.fromUserId == otherMessage.fromUserId) &&
      self.hasToSessionId == otherMessage.hasToSessionId &&
      (!self.hasToSessionId || self.toSessionId == otherMessage.toSessionId) &&
      self.hasMsgId == otherMessage.hasMsgId &&
      (!self.hasMsgId || self.msgId == otherMessage.msgId) &&
      self.hasCreateTime == otherMessage.hasCreateTime &&
      (!self.hasCreateTime || self.createTime == otherMessage.createTime) &&
      self.hasMsgType == otherMessage.hasMsgType &&
      (!self.hasMsgType || self.msgType == otherMessage.msgType) &&
      self.hasMsgData == otherMessage.hasMsgData &&
      (!self.hasMsgData || [self.msgData isEqual:otherMessage.msgData]) &&
      self.hasAttachData == otherMessage.hasAttachData &&
      (!self.hasAttachData || [self.attachData isEqual:otherMessage.attachData]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasFromUserId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.fromUserId] hash];
  }
  if (self.hasToSessionId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.toSessionId] hash];
  }
  if (self.hasMsgId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.msgId] hash];
  }
  if (self.hasCreateTime) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.createTime] hash];
  }
  if (self.hasMsgType) {
    hashCode = hashCode * 31 + self.msgType;
  }
  if (self.hasMsgData) {
    hashCode = hashCode * 31 + [self.msgData hash];
  }
  if (self.hasAttachData) {
    hashCode = hashCode * 31 + [self.attachData hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface IMMsgDataBuilder()
@property (strong) IMMsgData* resultImmsgData;
@end

@implementation IMMsgDataBuilder
@synthesize resultImmsgData;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultImmsgData = [[IMMsgData alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultImmsgData;
}
- (IMMsgDataBuilder*) clear {
  self.resultImmsgData = [[IMMsgData alloc] init];
  return self;
}
- (IMMsgDataBuilder*) clone {
  return [IMMsgData builderWithPrototype:resultImmsgData];
}
- (IMMsgData*) defaultInstance {
  return [IMMsgData defaultInstance];
}
- (IMMsgData*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (IMMsgData*) buildPartial {
  IMMsgData* returnMe = resultImmsgData;
  self.resultImmsgData = nil;
  return returnMe;
}
- (IMMsgDataBuilder*) mergeFrom:(IMMsgData*) other {
  if (other == [IMMsgData defaultInstance]) {
    return self;
  }
  if (other.hasFromUserId) {
    [self setFromUserId:other.fromUserId];
  }
  if (other.hasToSessionId) {
    [self setToSessionId:other.toSessionId];
  }
  if (other.hasMsgId) {
    [self setMsgId:other.msgId];
  }
  if (other.hasCreateTime) {
    [self setCreateTime:other.createTime];
  }
  if (other.hasMsgType) {
    [self setMsgType:other.msgType];
  }
  if (other.hasMsgData) {
    [self setMsgData:other.msgData];
  }
  if (other.hasAttachData) {
    [self setAttachData:other.attachData];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (IMMsgDataBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (IMMsgDataBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setFromUserId:[input readUInt32]];
        break;
      }
      case 16: {
        [self setToSessionId:[input readUInt32]];
        break;
      }
      case 24: {
        [self setMsgId:[input readUInt32]];
        break;
      }
      case 32: {
        [self setCreateTime:[input readUInt32]];
        break;
      }
      case 40: {
        MsgType value = (MsgType)[input readEnum];
        if (MsgTypeIsValidValue(value)) {
          [self setMsgType:value];
        } else {
          [unknownFields mergeVarintField:5 value:value];
        }
        break;
      }
      case 50: {
        [self setMsgData:[input readData]];
        break;
      }
      case 162: {
        [self setAttachData:[input readData]];
        break;
      }
    }
  }
}
- (BOOL) hasFromUserId {
  return resultImmsgData.hasFromUserId;
}
- (UInt32) fromUserId {
  return resultImmsgData.fromUserId;
}
- (IMMsgDataBuilder*) setFromUserId:(UInt32) value {
  resultImmsgData.hasFromUserId = YES;
  resultImmsgData.fromUserId = value;
  return self;
}
- (IMMsgDataBuilder*) clearFromUserId {
  resultImmsgData.hasFromUserId = NO;
  resultImmsgData.fromUserId = 0;
  return self;
}
- (BOOL) hasToSessionId {
  return resultImmsgData.hasToSessionId;
}
- (UInt32) toSessionId {
  return resultImmsgData.toSessionId;
}
- (IMMsgDataBuilder*) setToSessionId:(UInt32) value {
  resultImmsgData.hasToSessionId = YES;
  resultImmsgData.toSessionId = value;
  return self;
}
- (IMMsgDataBuilder*) clearToSessionId {
  resultImmsgData.hasToSessionId = NO;
  resultImmsgData.toSessionId = 0;
  return self;
}
- (BOOL) hasMsgId {
  return resultImmsgData.hasMsgId;
}
- (UInt32) msgId {
  return resultImmsgData.msgId;
}
- (IMMsgDataBuilder*) setMsgId:(UInt32) value {
  resultImmsgData.hasMsgId = YES;
  resultImmsgData.msgId = value;
  return self;
}
- (IMMsgDataBuilder*) clearMsgId {
  resultImmsgData.hasMsgId = NO;
  resultImmsgData.msgId = 0;
  return self;
}
- (BOOL) hasCreateTime {
  return resultImmsgData.hasCreateTime;
}
- (UInt32) createTime {
  return resultImmsgData.createTime;
}
- (IMMsgDataBuilder*) setCreateTime:(UInt32) value {
  resultImmsgData.hasCreateTime = YES;
  resultImmsgData.createTime = value;
  return self;
}
- (IMMsgDataBuilder*) clearCreateTime {
  resultImmsgData.hasCreateTime = NO;
  resultImmsgData.createTime = 0;
  return self;
}
- (BOOL) hasMsgType {
  return resultImmsgData.hasMsgType;
}
- (MsgType) msgType {
  return resultImmsgData.msgType;
}
- (IMMsgDataBuilder*) setMsgType:(MsgType) value {
  resultImmsgData.hasMsgType = YES;
  resultImmsgData.msgType = value;
  return self;
}
- (IMMsgDataBuilder*) clearMsgType {
  resultImmsgData.hasMsgType = NO;
  resultImmsgData.msgType = MsgTypeMsgTypeSingleText;
  return self;
}
- (BOOL) hasMsgData {
  return resultImmsgData.hasMsgData;
}
- (NSData*) msgData {
  return resultImmsgData.msgData;
}
- (IMMsgDataBuilder*) setMsgData:(NSData*) value {
  resultImmsgData.hasMsgData = YES;
  resultImmsgData.msgData = value;
  return self;
}
- (IMMsgDataBuilder*) clearMsgData {
  resultImmsgData.hasMsgData = NO;
  resultImmsgData.msgData = [NSData data];
  return self;
}
- (BOOL) hasAttachData {
  return resultImmsgData.hasAttachData;
}
- (NSData*) attachData {
  return resultImmsgData.attachData;
}
- (IMMsgDataBuilder*) setAttachData:(NSData*) value {
  resultImmsgData.hasAttachData = YES;
  resultImmsgData.attachData = value;
  return self;
}
- (IMMsgDataBuilder*) clearAttachData {
  resultImmsgData.hasAttachData = NO;
  resultImmsgData.attachData = [NSData data];
  return self;
}
@end

@interface IMMsgDataAck ()
@property UInt32 userId;
@property UInt32 sessionId;
@property UInt32 msgId;
@property SessionType sessionType;
@end

@implementation IMMsgDataAck

- (BOOL) hasUserId {
  return !!hasUserId_;
}
- (void) setHasUserId:(BOOL) _value_ {
  hasUserId_ = !!_value_;
}
@synthesize userId;
- (BOOL) hasSessionId {
  return !!hasSessionId_;
}
- (void) setHasSessionId:(BOOL) _value_ {
  hasSessionId_ = !!_value_;
}
@synthesize sessionId;
- (BOOL) hasMsgId {
  return !!hasMsgId_;
}
- (void) setHasMsgId:(BOOL) _value_ {
  hasMsgId_ = !!_value_;
}
@synthesize msgId;
- (BOOL) hasSessionType {
  return !!hasSessionType_;
}
- (void) setHasSessionType:(BOOL) _value_ {
  hasSessionType_ = !!_value_;
}
@synthesize sessionType;
- (instancetype) init {
  if ((self = [super init])) {
    self.userId = 0;
    self.sessionId = 0;
    self.msgId = 0;
    self.sessionType = SessionTypeSessionTypeSingle;
  }
  return self;
}
static IMMsgDataAck* defaultIMMsgDataAckInstance = nil;
+ (void) initialize {
  if (self == [IMMsgDataAck class]) {
    defaultIMMsgDataAckInstance = [[IMMsgDataAck alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultIMMsgDataAckInstance;
}
- (instancetype) defaultInstance {
  return defaultIMMsgDataAckInstance;
}
- (BOOL) isInitialized {
  if (!self.hasUserId) {
    return NO;
  }
  if (!self.hasSessionId) {
    return NO;
  }
  if (!self.hasMsgId) {
    return NO;
  }
  if (!self.hasSessionType) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasUserId) {
    [output writeUInt32:1 value:self.userId];
  }
  if (self.hasSessionId) {
    [output writeUInt32:2 value:self.sessionId];
  }
  if (self.hasMsgId) {
    [output writeUInt32:3 value:self.msgId];
  }
  if (self.hasSessionType) {
    [output writeEnum:4 value:self.sessionType];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasUserId) {
    size_ += computeUInt32Size(1, self.userId);
  }
  if (self.hasSessionId) {
    size_ += computeUInt32Size(2, self.sessionId);
  }
  if (self.hasMsgId) {
    size_ += computeUInt32Size(3, self.msgId);
  }
  if (self.hasSessionType) {
    size_ += computeEnumSize(4, self.sessionType);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (IMMsgDataAck*) parseFromData:(NSData*) data {
  return (IMMsgDataAck*)[[[IMMsgDataAck builder] mergeFromData:data] build];
}
+ (IMMsgDataAck*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMMsgDataAck*)[[[IMMsgDataAck builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (IMMsgDataAck*) parseFromInputStream:(NSInputStream*) input {
  return (IMMsgDataAck*)[[[IMMsgDataAck builder] mergeFromInputStream:input] build];
}
+ (IMMsgDataAck*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMMsgDataAck*)[[[IMMsgDataAck builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (IMMsgDataAck*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (IMMsgDataAck*)[[[IMMsgDataAck builder] mergeFromCodedInputStream:input] build];
}
+ (IMMsgDataAck*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMMsgDataAck*)[[[IMMsgDataAck builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (IMMsgDataAckBuilder*) builder {
  return [[IMMsgDataAckBuilder alloc] init];
}
+ (IMMsgDataAckBuilder*) builderWithPrototype:(IMMsgDataAck*) prototype {
  return [[IMMsgDataAck builder] mergeFrom:prototype];
}
- (IMMsgDataAckBuilder*) builder {
  return [IMMsgDataAck builder];
}
- (IMMsgDataAckBuilder*) toBuilder {
  return [IMMsgDataAck builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasUserId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"userId", [NSNumber numberWithInteger:self.userId]];
  }
  if (self.hasSessionId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"sessionId", [NSNumber numberWithInteger:self.sessionId]];
  }
  if (self.hasMsgId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"msgId", [NSNumber numberWithInteger:self.msgId]];
  }
  if (self.hasSessionType) {
    [output appendFormat:@"%@%@: %@\n", indent, @"sessionType", NSStringFromSessionType(self.sessionType)];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasUserId) {
    [dictionary setObject: [NSNumber numberWithInteger:self.userId] forKey: @"userId"];
  }
  if (self.hasSessionId) {
    [dictionary setObject: [NSNumber numberWithInteger:self.sessionId] forKey: @"sessionId"];
  }
  if (self.hasMsgId) {
    [dictionary setObject: [NSNumber numberWithInteger:self.msgId] forKey: @"msgId"];
  }
  if (self.hasSessionType) {
    [dictionary setObject: @(self.sessionType) forKey: @"sessionType"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[IMMsgDataAck class]]) {
    return NO;
  }
  IMMsgDataAck *otherMessage = other;
  return
      self.hasUserId == otherMessage.hasUserId &&
      (!self.hasUserId || self.userId == otherMessage.userId) &&
      self.hasSessionId == otherMessage.hasSessionId &&
      (!self.hasSessionId || self.sessionId == otherMessage.sessionId) &&
      self.hasMsgId == otherMessage.hasMsgId &&
      (!self.hasMsgId || self.msgId == otherMessage.msgId) &&
      self.hasSessionType == otherMessage.hasSessionType &&
      (!self.hasSessionType || self.sessionType == otherMessage.sessionType) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasUserId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.userId] hash];
  }
  if (self.hasSessionId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.sessionId] hash];
  }
  if (self.hasMsgId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.msgId] hash];
  }
  if (self.hasSessionType) {
    hashCode = hashCode * 31 + self.sessionType;
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface IMMsgDataAckBuilder()
@property (strong) IMMsgDataAck* resultImmsgDataAck;
@end

@implementation IMMsgDataAckBuilder
@synthesize resultImmsgDataAck;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultImmsgDataAck = [[IMMsgDataAck alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultImmsgDataAck;
}
- (IMMsgDataAckBuilder*) clear {
  self.resultImmsgDataAck = [[IMMsgDataAck alloc] init];
  return self;
}
- (IMMsgDataAckBuilder*) clone {
  return [IMMsgDataAck builderWithPrototype:resultImmsgDataAck];
}
- (IMMsgDataAck*) defaultInstance {
  return [IMMsgDataAck defaultInstance];
}
- (IMMsgDataAck*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (IMMsgDataAck*) buildPartial {
  IMMsgDataAck* returnMe = resultImmsgDataAck;
  self.resultImmsgDataAck = nil;
  return returnMe;
}
- (IMMsgDataAckBuilder*) mergeFrom:(IMMsgDataAck*) other {
  if (other == [IMMsgDataAck defaultInstance]) {
    return self;
  }
  if (other.hasUserId) {
    [self setUserId:other.userId];
  }
  if (other.hasSessionId) {
    [self setSessionId:other.sessionId];
  }
  if (other.hasMsgId) {
    [self setMsgId:other.msgId];
  }
  if (other.hasSessionType) {
    [self setSessionType:other.sessionType];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (IMMsgDataAckBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (IMMsgDataAckBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setUserId:[input readUInt32]];
        break;
      }
      case 16: {
        [self setSessionId:[input readUInt32]];
        break;
      }
      case 24: {
        [self setMsgId:[input readUInt32]];
        break;
      }
      case 32: {
        SessionType value = (SessionType)[input readEnum];
        if (SessionTypeIsValidValue(value)) {
          [self setSessionType:value];
        } else {
          [unknownFields mergeVarintField:4 value:value];
        }
        break;
      }
    }
  }
}
- (BOOL) hasUserId {
  return resultImmsgDataAck.hasUserId;
}
- (UInt32) userId {
  return resultImmsgDataAck.userId;
}
- (IMMsgDataAckBuilder*) setUserId:(UInt32) value {
  resultImmsgDataAck.hasUserId = YES;
  resultImmsgDataAck.userId = value;
  return self;
}
- (IMMsgDataAckBuilder*) clearUserId {
  resultImmsgDataAck.hasUserId = NO;
  resultImmsgDataAck.userId = 0;
  return self;
}
- (BOOL) hasSessionId {
  return resultImmsgDataAck.hasSessionId;
}
- (UInt32) sessionId {
  return resultImmsgDataAck.sessionId;
}
- (IMMsgDataAckBuilder*) setSessionId:(UInt32) value {
  resultImmsgDataAck.hasSessionId = YES;
  resultImmsgDataAck.sessionId = value;
  return self;
}
- (IMMsgDataAckBuilder*) clearSessionId {
  resultImmsgDataAck.hasSessionId = NO;
  resultImmsgDataAck.sessionId = 0;
  return self;
}
- (BOOL) hasMsgId {
  return resultImmsgDataAck.hasMsgId;
}
- (UInt32) msgId {
  return resultImmsgDataAck.msgId;
}
- (IMMsgDataAckBuilder*) setMsgId:(UInt32) value {
  resultImmsgDataAck.hasMsgId = YES;
  resultImmsgDataAck.msgId = value;
  return self;
}
- (IMMsgDataAckBuilder*) clearMsgId {
  resultImmsgDataAck.hasMsgId = NO;
  resultImmsgDataAck.msgId = 0;
  return self;
}
- (BOOL) hasSessionType {
  return resultImmsgDataAck.hasSessionType;
}
- (SessionType) sessionType {
  return resultImmsgDataAck.sessionType;
}
- (IMMsgDataAckBuilder*) setSessionType:(SessionType) value {
  resultImmsgDataAck.hasSessionType = YES;
  resultImmsgDataAck.sessionType = value;
  return self;
}
- (IMMsgDataAckBuilder*) clearSessionType {
  resultImmsgDataAck.hasSessionType = NO;
  resultImmsgDataAck.sessionType = SessionTypeSessionTypeSingle;
  return self;
}
@end

@interface IMMsgDataReadAck ()
@property UInt32 userId;
@property UInt32 sessionId;
@property UInt32 msgId;
@property SessionType sessionType;
@end

@implementation IMMsgDataReadAck

- (BOOL) hasUserId {
  return !!hasUserId_;
}
- (void) setHasUserId:(BOOL) _value_ {
  hasUserId_ = !!_value_;
}
@synthesize userId;
- (BOOL) hasSessionId {
  return !!hasSessionId_;
}
- (void) setHasSessionId:(BOOL) _value_ {
  hasSessionId_ = !!_value_;
}
@synthesize sessionId;
- (BOOL) hasMsgId {
  return !!hasMsgId_;
}
- (void) setHasMsgId:(BOOL) _value_ {
  hasMsgId_ = !!_value_;
}
@synthesize msgId;
- (BOOL) hasSessionType {
  return !!hasSessionType_;
}
- (void) setHasSessionType:(BOOL) _value_ {
  hasSessionType_ = !!_value_;
}
@synthesize sessionType;
- (instancetype) init {
  if ((self = [super init])) {
    self.userId = 0;
    self.sessionId = 0;
    self.msgId = 0;
    self.sessionType = SessionTypeSessionTypeSingle;
  }
  return self;
}
static IMMsgDataReadAck* defaultIMMsgDataReadAckInstance = nil;
+ (void) initialize {
  if (self == [IMMsgDataReadAck class]) {
    defaultIMMsgDataReadAckInstance = [[IMMsgDataReadAck alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultIMMsgDataReadAckInstance;
}
- (instancetype) defaultInstance {
  return defaultIMMsgDataReadAckInstance;
}
- (BOOL) isInitialized {
  if (!self.hasUserId) {
    return NO;
  }
  if (!self.hasSessionId) {
    return NO;
  }
  if (!self.hasMsgId) {
    return NO;
  }
  if (!self.hasSessionType) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasUserId) {
    [output writeUInt32:1 value:self.userId];
  }
  if (self.hasSessionId) {
    [output writeUInt32:2 value:self.sessionId];
  }
  if (self.hasMsgId) {
    [output writeUInt32:3 value:self.msgId];
  }
  if (self.hasSessionType) {
    [output writeEnum:4 value:self.sessionType];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasUserId) {
    size_ += computeUInt32Size(1, self.userId);
  }
  if (self.hasSessionId) {
    size_ += computeUInt32Size(2, self.sessionId);
  }
  if (self.hasMsgId) {
    size_ += computeUInt32Size(3, self.msgId);
  }
  if (self.hasSessionType) {
    size_ += computeEnumSize(4, self.sessionType);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (IMMsgDataReadAck*) parseFromData:(NSData*) data {
  return (IMMsgDataReadAck*)[[[IMMsgDataReadAck builder] mergeFromData:data] build];
}
+ (IMMsgDataReadAck*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMMsgDataReadAck*)[[[IMMsgDataReadAck builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (IMMsgDataReadAck*) parseFromInputStream:(NSInputStream*) input {
  return (IMMsgDataReadAck*)[[[IMMsgDataReadAck builder] mergeFromInputStream:input] build];
}
+ (IMMsgDataReadAck*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMMsgDataReadAck*)[[[IMMsgDataReadAck builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (IMMsgDataReadAck*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (IMMsgDataReadAck*)[[[IMMsgDataReadAck builder] mergeFromCodedInputStream:input] build];
}
+ (IMMsgDataReadAck*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMMsgDataReadAck*)[[[IMMsgDataReadAck builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (IMMsgDataReadAckBuilder*) builder {
  return [[IMMsgDataReadAckBuilder alloc] init];
}
+ (IMMsgDataReadAckBuilder*) builderWithPrototype:(IMMsgDataReadAck*) prototype {
  return [[IMMsgDataReadAck builder] mergeFrom:prototype];
}
- (IMMsgDataReadAckBuilder*) builder {
  return [IMMsgDataReadAck builder];
}
- (IMMsgDataReadAckBuilder*) toBuilder {
  return [IMMsgDataReadAck builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasUserId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"userId", [NSNumber numberWithInteger:self.userId]];
  }
  if (self.hasSessionId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"sessionId", [NSNumber numberWithInteger:self.sessionId]];
  }
  if (self.hasMsgId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"msgId", [NSNumber numberWithInteger:self.msgId]];
  }
  if (self.hasSessionType) {
    [output appendFormat:@"%@%@: %@\n", indent, @"sessionType", NSStringFromSessionType(self.sessionType)];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasUserId) {
    [dictionary setObject: [NSNumber numberWithInteger:self.userId] forKey: @"userId"];
  }
  if (self.hasSessionId) {
    [dictionary setObject: [NSNumber numberWithInteger:self.sessionId] forKey: @"sessionId"];
  }
  if (self.hasMsgId) {
    [dictionary setObject: [NSNumber numberWithInteger:self.msgId] forKey: @"msgId"];
  }
  if (self.hasSessionType) {
    [dictionary setObject: @(self.sessionType) forKey: @"sessionType"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[IMMsgDataReadAck class]]) {
    return NO;
  }
  IMMsgDataReadAck *otherMessage = other;
  return
      self.hasUserId == otherMessage.hasUserId &&
      (!self.hasUserId || self.userId == otherMessage.userId) &&
      self.hasSessionId == otherMessage.hasSessionId &&
      (!self.hasSessionId || self.sessionId == otherMessage.sessionId) &&
      self.hasMsgId == otherMessage.hasMsgId &&
      (!self.hasMsgId || self.msgId == otherMessage.msgId) &&
      self.hasSessionType == otherMessage.hasSessionType &&
      (!self.hasSessionType || self.sessionType == otherMessage.sessionType) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasUserId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.userId] hash];
  }
  if (self.hasSessionId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.sessionId] hash];
  }
  if (self.hasMsgId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.msgId] hash];
  }
  if (self.hasSessionType) {
    hashCode = hashCode * 31 + self.sessionType;
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface IMMsgDataReadAckBuilder()
@property (strong) IMMsgDataReadAck* resultImmsgDataReadAck;
@end

@implementation IMMsgDataReadAckBuilder
@synthesize resultImmsgDataReadAck;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultImmsgDataReadAck = [[IMMsgDataReadAck alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultImmsgDataReadAck;
}
- (IMMsgDataReadAckBuilder*) clear {
  self.resultImmsgDataReadAck = [[IMMsgDataReadAck alloc] init];
  return self;
}
- (IMMsgDataReadAckBuilder*) clone {
  return [IMMsgDataReadAck builderWithPrototype:resultImmsgDataReadAck];
}
- (IMMsgDataReadAck*) defaultInstance {
  return [IMMsgDataReadAck defaultInstance];
}
- (IMMsgDataReadAck*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (IMMsgDataReadAck*) buildPartial {
  IMMsgDataReadAck* returnMe = resultImmsgDataReadAck;
  self.resultImmsgDataReadAck = nil;
  return returnMe;
}
- (IMMsgDataReadAckBuilder*) mergeFrom:(IMMsgDataReadAck*) other {
  if (other == [IMMsgDataReadAck defaultInstance]) {
    return self;
  }
  if (other.hasUserId) {
    [self setUserId:other.userId];
  }
  if (other.hasSessionId) {
    [self setSessionId:other.sessionId];
  }
  if (other.hasMsgId) {
    [self setMsgId:other.msgId];
  }
  if (other.hasSessionType) {
    [self setSessionType:other.sessionType];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (IMMsgDataReadAckBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (IMMsgDataReadAckBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setUserId:[input readUInt32]];
        break;
      }
      case 16: {
        [self setSessionId:[input readUInt32]];
        break;
      }
      case 24: {
        [self setMsgId:[input readUInt32]];
        break;
      }
      case 32: {
        SessionType value = (SessionType)[input readEnum];
        if (SessionTypeIsValidValue(value)) {
          [self setSessionType:value];
        } else {
          [unknownFields mergeVarintField:4 value:value];
        }
        break;
      }
    }
  }
}
- (BOOL) hasUserId {
  return resultImmsgDataReadAck.hasUserId;
}
- (UInt32) userId {
  return resultImmsgDataReadAck.userId;
}
- (IMMsgDataReadAckBuilder*) setUserId:(UInt32) value {
  resultImmsgDataReadAck.hasUserId = YES;
  resultImmsgDataReadAck.userId = value;
  return self;
}
- (IMMsgDataReadAckBuilder*) clearUserId {
  resultImmsgDataReadAck.hasUserId = NO;
  resultImmsgDataReadAck.userId = 0;
  return self;
}
- (BOOL) hasSessionId {
  return resultImmsgDataReadAck.hasSessionId;
}
- (UInt32) sessionId {
  return resultImmsgDataReadAck.sessionId;
}
- (IMMsgDataReadAckBuilder*) setSessionId:(UInt32) value {
  resultImmsgDataReadAck.hasSessionId = YES;
  resultImmsgDataReadAck.sessionId = value;
  return self;
}
- (IMMsgDataReadAckBuilder*) clearSessionId {
  resultImmsgDataReadAck.hasSessionId = NO;
  resultImmsgDataReadAck.sessionId = 0;
  return self;
}
- (BOOL) hasMsgId {
  return resultImmsgDataReadAck.hasMsgId;
}
- (UInt32) msgId {
  return resultImmsgDataReadAck.msgId;
}
- (IMMsgDataReadAckBuilder*) setMsgId:(UInt32) value {
  resultImmsgDataReadAck.hasMsgId = YES;
  resultImmsgDataReadAck.msgId = value;
  return self;
}
- (IMMsgDataReadAckBuilder*) clearMsgId {
  resultImmsgDataReadAck.hasMsgId = NO;
  resultImmsgDataReadAck.msgId = 0;
  return self;
}
- (BOOL) hasSessionType {
  return resultImmsgDataReadAck.hasSessionType;
}
- (SessionType) sessionType {
  return resultImmsgDataReadAck.sessionType;
}
- (IMMsgDataReadAckBuilder*) setSessionType:(SessionType) value {
  resultImmsgDataReadAck.hasSessionType = YES;
  resultImmsgDataReadAck.sessionType = value;
  return self;
}
- (IMMsgDataReadAckBuilder*) clearSessionType {
  resultImmsgDataReadAck.hasSessionType = NO;
  resultImmsgDataReadAck.sessionType = SessionTypeSessionTypeSingle;
  return self;
}
@end

@interface IMMsgDataReadNotify ()
@property UInt32 userId;
@property UInt32 sessionId;
@property UInt32 msgId;
@property SessionType sessionType;
@end

@implementation IMMsgDataReadNotify

- (BOOL) hasUserId {
  return !!hasUserId_;
}
- (void) setHasUserId:(BOOL) _value_ {
  hasUserId_ = !!_value_;
}
@synthesize userId;
- (BOOL) hasSessionId {
  return !!hasSessionId_;
}
- (void) setHasSessionId:(BOOL) _value_ {
  hasSessionId_ = !!_value_;
}
@synthesize sessionId;
- (BOOL) hasMsgId {
  return !!hasMsgId_;
}
- (void) setHasMsgId:(BOOL) _value_ {
  hasMsgId_ = !!_value_;
}
@synthesize msgId;
- (BOOL) hasSessionType {
  return !!hasSessionType_;
}
- (void) setHasSessionType:(BOOL) _value_ {
  hasSessionType_ = !!_value_;
}
@synthesize sessionType;
- (instancetype) init {
  if ((self = [super init])) {
    self.userId = 0;
    self.sessionId = 0;
    self.msgId = 0;
    self.sessionType = SessionTypeSessionTypeSingle;
  }
  return self;
}
static IMMsgDataReadNotify* defaultIMMsgDataReadNotifyInstance = nil;
+ (void) initialize {
  if (self == [IMMsgDataReadNotify class]) {
    defaultIMMsgDataReadNotifyInstance = [[IMMsgDataReadNotify alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultIMMsgDataReadNotifyInstance;
}
- (instancetype) defaultInstance {
  return defaultIMMsgDataReadNotifyInstance;
}
- (BOOL) isInitialized {
  if (!self.hasUserId) {
    return NO;
  }
  if (!self.hasSessionId) {
    return NO;
  }
  if (!self.hasMsgId) {
    return NO;
  }
  if (!self.hasSessionType) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasUserId) {
    [output writeUInt32:1 value:self.userId];
  }
  if (self.hasSessionId) {
    [output writeUInt32:2 value:self.sessionId];
  }
  if (self.hasMsgId) {
    [output writeUInt32:3 value:self.msgId];
  }
  if (self.hasSessionType) {
    [output writeEnum:4 value:self.sessionType];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasUserId) {
    size_ += computeUInt32Size(1, self.userId);
  }
  if (self.hasSessionId) {
    size_ += computeUInt32Size(2, self.sessionId);
  }
  if (self.hasMsgId) {
    size_ += computeUInt32Size(3, self.msgId);
  }
  if (self.hasSessionType) {
    size_ += computeEnumSize(4, self.sessionType);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (IMMsgDataReadNotify*) parseFromData:(NSData*) data {
  return (IMMsgDataReadNotify*)[[[IMMsgDataReadNotify builder] mergeFromData:data] build];
}
+ (IMMsgDataReadNotify*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMMsgDataReadNotify*)[[[IMMsgDataReadNotify builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (IMMsgDataReadNotify*) parseFromInputStream:(NSInputStream*) input {
  return (IMMsgDataReadNotify*)[[[IMMsgDataReadNotify builder] mergeFromInputStream:input] build];
}
+ (IMMsgDataReadNotify*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMMsgDataReadNotify*)[[[IMMsgDataReadNotify builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (IMMsgDataReadNotify*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (IMMsgDataReadNotify*)[[[IMMsgDataReadNotify builder] mergeFromCodedInputStream:input] build];
}
+ (IMMsgDataReadNotify*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMMsgDataReadNotify*)[[[IMMsgDataReadNotify builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (IMMsgDataReadNotifyBuilder*) builder {
  return [[IMMsgDataReadNotifyBuilder alloc] init];
}
+ (IMMsgDataReadNotifyBuilder*) builderWithPrototype:(IMMsgDataReadNotify*) prototype {
  return [[IMMsgDataReadNotify builder] mergeFrom:prototype];
}
- (IMMsgDataReadNotifyBuilder*) builder {
  return [IMMsgDataReadNotify builder];
}
- (IMMsgDataReadNotifyBuilder*) toBuilder {
  return [IMMsgDataReadNotify builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasUserId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"userId", [NSNumber numberWithInteger:self.userId]];
  }
  if (self.hasSessionId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"sessionId", [NSNumber numberWithInteger:self.sessionId]];
  }
  if (self.hasMsgId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"msgId", [NSNumber numberWithInteger:self.msgId]];
  }
  if (self.hasSessionType) {
    [output appendFormat:@"%@%@: %@\n", indent, @"sessionType", NSStringFromSessionType(self.sessionType)];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasUserId) {
    [dictionary setObject: [NSNumber numberWithInteger:self.userId] forKey: @"userId"];
  }
  if (self.hasSessionId) {
    [dictionary setObject: [NSNumber numberWithInteger:self.sessionId] forKey: @"sessionId"];
  }
  if (self.hasMsgId) {
    [dictionary setObject: [NSNumber numberWithInteger:self.msgId] forKey: @"msgId"];
  }
  if (self.hasSessionType) {
    [dictionary setObject: @(self.sessionType) forKey: @"sessionType"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[IMMsgDataReadNotify class]]) {
    return NO;
  }
  IMMsgDataReadNotify *otherMessage = other;
  return
      self.hasUserId == otherMessage.hasUserId &&
      (!self.hasUserId || self.userId == otherMessage.userId) &&
      self.hasSessionId == otherMessage.hasSessionId &&
      (!self.hasSessionId || self.sessionId == otherMessage.sessionId) &&
      self.hasMsgId == otherMessage.hasMsgId &&
      (!self.hasMsgId || self.msgId == otherMessage.msgId) &&
      self.hasSessionType == otherMessage.hasSessionType &&
      (!self.hasSessionType || self.sessionType == otherMessage.sessionType) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasUserId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.userId] hash];
  }
  if (self.hasSessionId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.sessionId] hash];
  }
  if (self.hasMsgId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.msgId] hash];
  }
  if (self.hasSessionType) {
    hashCode = hashCode * 31 + self.sessionType;
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface IMMsgDataReadNotifyBuilder()
@property (strong) IMMsgDataReadNotify* resultImmsgDataReadNotify;
@end

@implementation IMMsgDataReadNotifyBuilder
@synthesize resultImmsgDataReadNotify;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultImmsgDataReadNotify = [[IMMsgDataReadNotify alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultImmsgDataReadNotify;
}
- (IMMsgDataReadNotifyBuilder*) clear {
  self.resultImmsgDataReadNotify = [[IMMsgDataReadNotify alloc] init];
  return self;
}
- (IMMsgDataReadNotifyBuilder*) clone {
  return [IMMsgDataReadNotify builderWithPrototype:resultImmsgDataReadNotify];
}
- (IMMsgDataReadNotify*) defaultInstance {
  return [IMMsgDataReadNotify defaultInstance];
}
- (IMMsgDataReadNotify*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (IMMsgDataReadNotify*) buildPartial {
  IMMsgDataReadNotify* returnMe = resultImmsgDataReadNotify;
  self.resultImmsgDataReadNotify = nil;
  return returnMe;
}
- (IMMsgDataReadNotifyBuilder*) mergeFrom:(IMMsgDataReadNotify*) other {
  if (other == [IMMsgDataReadNotify defaultInstance]) {
    return self;
  }
  if (other.hasUserId) {
    [self setUserId:other.userId];
  }
  if (other.hasSessionId) {
    [self setSessionId:other.sessionId];
  }
  if (other.hasMsgId) {
    [self setMsgId:other.msgId];
  }
  if (other.hasSessionType) {
    [self setSessionType:other.sessionType];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (IMMsgDataReadNotifyBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (IMMsgDataReadNotifyBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setUserId:[input readUInt32]];
        break;
      }
      case 16: {
        [self setSessionId:[input readUInt32]];
        break;
      }
      case 24: {
        [self setMsgId:[input readUInt32]];
        break;
      }
      case 32: {
        SessionType value = (SessionType)[input readEnum];
        if (SessionTypeIsValidValue(value)) {
          [self setSessionType:value];
        } else {
          [unknownFields mergeVarintField:4 value:value];
        }
        break;
      }
    }
  }
}
- (BOOL) hasUserId {
  return resultImmsgDataReadNotify.hasUserId;
}
- (UInt32) userId {
  return resultImmsgDataReadNotify.userId;
}
- (IMMsgDataReadNotifyBuilder*) setUserId:(UInt32) value {
  resultImmsgDataReadNotify.hasUserId = YES;
  resultImmsgDataReadNotify.userId = value;
  return self;
}
- (IMMsgDataReadNotifyBuilder*) clearUserId {
  resultImmsgDataReadNotify.hasUserId = NO;
  resultImmsgDataReadNotify.userId = 0;
  return self;
}
- (BOOL) hasSessionId {
  return resultImmsgDataReadNotify.hasSessionId;
}
- (UInt32) sessionId {
  return resultImmsgDataReadNotify.sessionId;
}
- (IMMsgDataReadNotifyBuilder*) setSessionId:(UInt32) value {
  resultImmsgDataReadNotify.hasSessionId = YES;
  resultImmsgDataReadNotify.sessionId = value;
  return self;
}
- (IMMsgDataReadNotifyBuilder*) clearSessionId {
  resultImmsgDataReadNotify.hasSessionId = NO;
  resultImmsgDataReadNotify.sessionId = 0;
  return self;
}
- (BOOL) hasMsgId {
  return resultImmsgDataReadNotify.hasMsgId;
}
- (UInt32) msgId {
  return resultImmsgDataReadNotify.msgId;
}
- (IMMsgDataReadNotifyBuilder*) setMsgId:(UInt32) value {
  resultImmsgDataReadNotify.hasMsgId = YES;
  resultImmsgDataReadNotify.msgId = value;
  return self;
}
- (IMMsgDataReadNotifyBuilder*) clearMsgId {
  resultImmsgDataReadNotify.hasMsgId = NO;
  resultImmsgDataReadNotify.msgId = 0;
  return self;
}
- (BOOL) hasSessionType {
  return resultImmsgDataReadNotify.hasSessionType;
}
- (SessionType) sessionType {
  return resultImmsgDataReadNotify.sessionType;
}
- (IMMsgDataReadNotifyBuilder*) setSessionType:(SessionType) value {
  resultImmsgDataReadNotify.hasSessionType = YES;
  resultImmsgDataReadNotify.sessionType = value;
  return self;
}
- (IMMsgDataReadNotifyBuilder*) clearSessionType {
  resultImmsgDataReadNotify.hasSessionType = NO;
  resultImmsgDataReadNotify.sessionType = SessionTypeSessionTypeSingle;
  return self;
}
@end

@interface IMClientTimeReq ()
@end

@implementation IMClientTimeReq

- (instancetype) init {
  if ((self = [super init])) {
  }
  return self;
}
static IMClientTimeReq* defaultIMClientTimeReqInstance = nil;
+ (void) initialize {
  if (self == [IMClientTimeReq class]) {
    defaultIMClientTimeReqInstance = [[IMClientTimeReq alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultIMClientTimeReqInstance;
}
- (instancetype) defaultInstance {
  return defaultIMClientTimeReqInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (IMClientTimeReq*) parseFromData:(NSData*) data {
  return (IMClientTimeReq*)[[[IMClientTimeReq builder] mergeFromData:data] build];
}
+ (IMClientTimeReq*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMClientTimeReq*)[[[IMClientTimeReq builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (IMClientTimeReq*) parseFromInputStream:(NSInputStream*) input {
  return (IMClientTimeReq*)[[[IMClientTimeReq builder] mergeFromInputStream:input] build];
}
+ (IMClientTimeReq*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMClientTimeReq*)[[[IMClientTimeReq builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (IMClientTimeReq*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (IMClientTimeReq*)[[[IMClientTimeReq builder] mergeFromCodedInputStream:input] build];
}
+ (IMClientTimeReq*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMClientTimeReq*)[[[IMClientTimeReq builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (IMClientTimeReqBuilder*) builder {
  return [[IMClientTimeReqBuilder alloc] init];
}
+ (IMClientTimeReqBuilder*) builderWithPrototype:(IMClientTimeReq*) prototype {
  return [[IMClientTimeReq builder] mergeFrom:prototype];
}
- (IMClientTimeReqBuilder*) builder {
  return [IMClientTimeReq builder];
}
- (IMClientTimeReqBuilder*) toBuilder {
  return [IMClientTimeReq builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[IMClientTimeReq class]]) {
    return NO;
  }
  IMClientTimeReq *otherMessage = other;
  return
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface IMClientTimeReqBuilder()
@property (strong) IMClientTimeReq* resultImclientTimeReq;
@end

@implementation IMClientTimeReqBuilder
@synthesize resultImclientTimeReq;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultImclientTimeReq = [[IMClientTimeReq alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultImclientTimeReq;
}
- (IMClientTimeReqBuilder*) clear {
  self.resultImclientTimeReq = [[IMClientTimeReq alloc] init];
  return self;
}
- (IMClientTimeReqBuilder*) clone {
  return [IMClientTimeReq builderWithPrototype:resultImclientTimeReq];
}
- (IMClientTimeReq*) defaultInstance {
  return [IMClientTimeReq defaultInstance];
}
- (IMClientTimeReq*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (IMClientTimeReq*) buildPartial {
  IMClientTimeReq* returnMe = resultImclientTimeReq;
  self.resultImclientTimeReq = nil;
  return returnMe;
}
- (IMClientTimeReqBuilder*) mergeFrom:(IMClientTimeReq*) other {
  if (other == [IMClientTimeReq defaultInstance]) {
    return self;
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (IMClientTimeReqBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (IMClientTimeReqBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
    }
  }
}
@end

@interface IMClientTimeRsp ()
@property UInt32 serverTime;
@end

@implementation IMClientTimeRsp

- (BOOL) hasServerTime {
  return !!hasServerTime_;
}
- (void) setHasServerTime:(BOOL) _value_ {
  hasServerTime_ = !!_value_;
}
@synthesize serverTime;
- (instancetype) init {
  if ((self = [super init])) {
    self.serverTime = 0;
  }
  return self;
}
static IMClientTimeRsp* defaultIMClientTimeRspInstance = nil;
+ (void) initialize {
  if (self == [IMClientTimeRsp class]) {
    defaultIMClientTimeRspInstance = [[IMClientTimeRsp alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultIMClientTimeRspInstance;
}
- (instancetype) defaultInstance {
  return defaultIMClientTimeRspInstance;
}
- (BOOL) isInitialized {
  if (!self.hasServerTime) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasServerTime) {
    [output writeUInt32:1 value:self.serverTime];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasServerTime) {
    size_ += computeUInt32Size(1, self.serverTime);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (IMClientTimeRsp*) parseFromData:(NSData*) data {
  return (IMClientTimeRsp*)[[[IMClientTimeRsp builder] mergeFromData:data] build];
}
+ (IMClientTimeRsp*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMClientTimeRsp*)[[[IMClientTimeRsp builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (IMClientTimeRsp*) parseFromInputStream:(NSInputStream*) input {
  return (IMClientTimeRsp*)[[[IMClientTimeRsp builder] mergeFromInputStream:input] build];
}
+ (IMClientTimeRsp*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMClientTimeRsp*)[[[IMClientTimeRsp builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (IMClientTimeRsp*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (IMClientTimeRsp*)[[[IMClientTimeRsp builder] mergeFromCodedInputStream:input] build];
}
+ (IMClientTimeRsp*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMClientTimeRsp*)[[[IMClientTimeRsp builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (IMClientTimeRspBuilder*) builder {
  return [[IMClientTimeRspBuilder alloc] init];
}
+ (IMClientTimeRspBuilder*) builderWithPrototype:(IMClientTimeRsp*) prototype {
  return [[IMClientTimeRsp builder] mergeFrom:prototype];
}
- (IMClientTimeRspBuilder*) builder {
  return [IMClientTimeRsp builder];
}
- (IMClientTimeRspBuilder*) toBuilder {
  return [IMClientTimeRsp builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasServerTime) {
    [output appendFormat:@"%@%@: %@\n", indent, @"serverTime", [NSNumber numberWithInteger:self.serverTime]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasServerTime) {
    [dictionary setObject: [NSNumber numberWithInteger:self.serverTime] forKey: @"serverTime"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[IMClientTimeRsp class]]) {
    return NO;
  }
  IMClientTimeRsp *otherMessage = other;
  return
      self.hasServerTime == otherMessage.hasServerTime &&
      (!self.hasServerTime || self.serverTime == otherMessage.serverTime) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasServerTime) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.serverTime] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface IMClientTimeRspBuilder()
@property (strong) IMClientTimeRsp* resultImclientTimeRsp;
@end

@implementation IMClientTimeRspBuilder
@synthesize resultImclientTimeRsp;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultImclientTimeRsp = [[IMClientTimeRsp alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultImclientTimeRsp;
}
- (IMClientTimeRspBuilder*) clear {
  self.resultImclientTimeRsp = [[IMClientTimeRsp alloc] init];
  return self;
}
- (IMClientTimeRspBuilder*) clone {
  return [IMClientTimeRsp builderWithPrototype:resultImclientTimeRsp];
}
- (IMClientTimeRsp*) defaultInstance {
  return [IMClientTimeRsp defaultInstance];
}
- (IMClientTimeRsp*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (IMClientTimeRsp*) buildPartial {
  IMClientTimeRsp* returnMe = resultImclientTimeRsp;
  self.resultImclientTimeRsp = nil;
  return returnMe;
}
- (IMClientTimeRspBuilder*) mergeFrom:(IMClientTimeRsp*) other {
  if (other == [IMClientTimeRsp defaultInstance]) {
    return self;
  }
  if (other.hasServerTime) {
    [self setServerTime:other.serverTime];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (IMClientTimeRspBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (IMClientTimeRspBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setServerTime:[input readUInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasServerTime {
  return resultImclientTimeRsp.hasServerTime;
}
- (UInt32) serverTime {
  return resultImclientTimeRsp.serverTime;
}
- (IMClientTimeRspBuilder*) setServerTime:(UInt32) value {
  resultImclientTimeRsp.hasServerTime = YES;
  resultImclientTimeRsp.serverTime = value;
  return self;
}
- (IMClientTimeRspBuilder*) clearServerTime {
  resultImclientTimeRsp.hasServerTime = NO;
  resultImclientTimeRsp.serverTime = 0;
  return self;
}
@end

@interface IMUnreadMsgCntReq ()
@property UInt32 userId;
@property (strong) NSData* attachData;
@end

@implementation IMUnreadMsgCntReq

- (BOOL) hasUserId {
  return !!hasUserId_;
}
- (void) setHasUserId:(BOOL) _value_ {
  hasUserId_ = !!_value_;
}
@synthesize userId;
- (BOOL) hasAttachData {
  return !!hasAttachData_;
}
- (void) setHasAttachData:(BOOL) _value_ {
  hasAttachData_ = !!_value_;
}
@synthesize attachData;
- (instancetype) init {
  if ((self = [super init])) {
    self.userId = 0;
    self.attachData = [NSData data];
  }
  return self;
}
static IMUnreadMsgCntReq* defaultIMUnreadMsgCntReqInstance = nil;
+ (void) initialize {
  if (self == [IMUnreadMsgCntReq class]) {
    defaultIMUnreadMsgCntReqInstance = [[IMUnreadMsgCntReq alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultIMUnreadMsgCntReqInstance;
}
- (instancetype) defaultInstance {
  return defaultIMUnreadMsgCntReqInstance;
}
- (BOOL) isInitialized {
  if (!self.hasUserId) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasUserId) {
    [output writeUInt32:1 value:self.userId];
  }
  if (self.hasAttachData) {
    [output writeData:20 value:self.attachData];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasUserId) {
    size_ += computeUInt32Size(1, self.userId);
  }
  if (self.hasAttachData) {
    size_ += computeDataSize(20, self.attachData);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (IMUnreadMsgCntReq*) parseFromData:(NSData*) data {
  return (IMUnreadMsgCntReq*)[[[IMUnreadMsgCntReq builder] mergeFromData:data] build];
}
+ (IMUnreadMsgCntReq*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMUnreadMsgCntReq*)[[[IMUnreadMsgCntReq builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (IMUnreadMsgCntReq*) parseFromInputStream:(NSInputStream*) input {
  return (IMUnreadMsgCntReq*)[[[IMUnreadMsgCntReq builder] mergeFromInputStream:input] build];
}
+ (IMUnreadMsgCntReq*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMUnreadMsgCntReq*)[[[IMUnreadMsgCntReq builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (IMUnreadMsgCntReq*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (IMUnreadMsgCntReq*)[[[IMUnreadMsgCntReq builder] mergeFromCodedInputStream:input] build];
}
+ (IMUnreadMsgCntReq*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMUnreadMsgCntReq*)[[[IMUnreadMsgCntReq builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (IMUnreadMsgCntReqBuilder*) builder {
  return [[IMUnreadMsgCntReqBuilder alloc] init];
}
+ (IMUnreadMsgCntReqBuilder*) builderWithPrototype:(IMUnreadMsgCntReq*) prototype {
  return [[IMUnreadMsgCntReq builder] mergeFrom:prototype];
}
- (IMUnreadMsgCntReqBuilder*) builder {
  return [IMUnreadMsgCntReq builder];
}
- (IMUnreadMsgCntReqBuilder*) toBuilder {
  return [IMUnreadMsgCntReq builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasUserId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"userId", [NSNumber numberWithInteger:self.userId]];
  }
  if (self.hasAttachData) {
    [output appendFormat:@"%@%@: %@\n", indent, @"attachData", self.attachData];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasUserId) {
    [dictionary setObject: [NSNumber numberWithInteger:self.userId] forKey: @"userId"];
  }
  if (self.hasAttachData) {
    [dictionary setObject: self.attachData forKey: @"attachData"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[IMUnreadMsgCntReq class]]) {
    return NO;
  }
  IMUnreadMsgCntReq *otherMessage = other;
  return
      self.hasUserId == otherMessage.hasUserId &&
      (!self.hasUserId || self.userId == otherMessage.userId) &&
      self.hasAttachData == otherMessage.hasAttachData &&
      (!self.hasAttachData || [self.attachData isEqual:otherMessage.attachData]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasUserId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.userId] hash];
  }
  if (self.hasAttachData) {
    hashCode = hashCode * 31 + [self.attachData hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface IMUnreadMsgCntReqBuilder()
@property (strong) IMUnreadMsgCntReq* resultImunreadMsgCntReq;
@end

@implementation IMUnreadMsgCntReqBuilder
@synthesize resultImunreadMsgCntReq;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultImunreadMsgCntReq = [[IMUnreadMsgCntReq alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultImunreadMsgCntReq;
}
- (IMUnreadMsgCntReqBuilder*) clear {
  self.resultImunreadMsgCntReq = [[IMUnreadMsgCntReq alloc] init];
  return self;
}
- (IMUnreadMsgCntReqBuilder*) clone {
  return [IMUnreadMsgCntReq builderWithPrototype:resultImunreadMsgCntReq];
}
- (IMUnreadMsgCntReq*) defaultInstance {
  return [IMUnreadMsgCntReq defaultInstance];
}
- (IMUnreadMsgCntReq*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (IMUnreadMsgCntReq*) buildPartial {
  IMUnreadMsgCntReq* returnMe = resultImunreadMsgCntReq;
  self.resultImunreadMsgCntReq = nil;
  return returnMe;
}
- (IMUnreadMsgCntReqBuilder*) mergeFrom:(IMUnreadMsgCntReq*) other {
  if (other == [IMUnreadMsgCntReq defaultInstance]) {
    return self;
  }
  if (other.hasUserId) {
    [self setUserId:other.userId];
  }
  if (other.hasAttachData) {
    [self setAttachData:other.attachData];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (IMUnreadMsgCntReqBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (IMUnreadMsgCntReqBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setUserId:[input readUInt32]];
        break;
      }
      case 162: {
        [self setAttachData:[input readData]];
        break;
      }
    }
  }
}
- (BOOL) hasUserId {
  return resultImunreadMsgCntReq.hasUserId;
}
- (UInt32) userId {
  return resultImunreadMsgCntReq.userId;
}
- (IMUnreadMsgCntReqBuilder*) setUserId:(UInt32) value {
  resultImunreadMsgCntReq.hasUserId = YES;
  resultImunreadMsgCntReq.userId = value;
  return self;
}
- (IMUnreadMsgCntReqBuilder*) clearUserId {
  resultImunreadMsgCntReq.hasUserId = NO;
  resultImunreadMsgCntReq.userId = 0;
  return self;
}
- (BOOL) hasAttachData {
  return resultImunreadMsgCntReq.hasAttachData;
}
- (NSData*) attachData {
  return resultImunreadMsgCntReq.attachData;
}
- (IMUnreadMsgCntReqBuilder*) setAttachData:(NSData*) value {
  resultImunreadMsgCntReq.hasAttachData = YES;
  resultImunreadMsgCntReq.attachData = value;
  return self;
}
- (IMUnreadMsgCntReqBuilder*) clearAttachData {
  resultImunreadMsgCntReq.hasAttachData = NO;
  resultImunreadMsgCntReq.attachData = [NSData data];
  return self;
}
@end

@interface IMUnreadMsgCntRsp ()
@property UInt32 userId;
@property UInt32 totalCnt;
@property (strong) NSMutableArray * unreadinfoListArray;
@property (strong) NSData* attachData;
@end

@implementation IMUnreadMsgCntRsp

- (BOOL) hasUserId {
  return !!hasUserId_;
}
- (void) setHasUserId:(BOOL) _value_ {
  hasUserId_ = !!_value_;
}
@synthesize userId;
- (BOOL) hasTotalCnt {
  return !!hasTotalCnt_;
}
- (void) setHasTotalCnt:(BOOL) _value_ {
  hasTotalCnt_ = !!_value_;
}
@synthesize totalCnt;
@synthesize unreadinfoListArray;
@dynamic unreadinfoList;
- (BOOL) hasAttachData {
  return !!hasAttachData_;
}
- (void) setHasAttachData:(BOOL) _value_ {
  hasAttachData_ = !!_value_;
}
@synthesize attachData;
- (instancetype) init {
  if ((self = [super init])) {
    self.userId = 0;
    self.totalCnt = 0;
    self.attachData = [NSData data];
  }
  return self;
}
static IMUnreadMsgCntRsp* defaultIMUnreadMsgCntRspInstance = nil;
+ (void) initialize {
  if (self == [IMUnreadMsgCntRsp class]) {
    defaultIMUnreadMsgCntRspInstance = [[IMUnreadMsgCntRsp alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultIMUnreadMsgCntRspInstance;
}
- (instancetype) defaultInstance {
  return defaultIMUnreadMsgCntRspInstance;
}
- (NSArray *)unreadinfoList {
  return unreadinfoListArray;
}
- (UnreadInfo*)unreadinfoListAtIndex:(NSUInteger)index {
  return [unreadinfoListArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  if (!self.hasUserId) {
    return NO;
  }
  if (!self.hasTotalCnt) {
    return NO;
  }
  __block BOOL isInitunreadinfoList = YES;
   [self.unreadinfoList enumerateObjectsUsingBlock:^(UnreadInfo *element, NSUInteger idx, BOOL *stop) {
    if (!element.isInitialized) {
      isInitunreadinfoList = NO;
      *stop = YES;
    }
  }];
  if (!isInitunreadinfoList) return isInitunreadinfoList;
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasUserId) {
    [output writeUInt32:1 value:self.userId];
  }
  if (self.hasTotalCnt) {
    [output writeUInt32:2 value:self.totalCnt];
  }
  [self.unreadinfoListArray enumerateObjectsUsingBlock:^(UnreadInfo *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:3 value:element];
  }];
  if (self.hasAttachData) {
    [output writeData:20 value:self.attachData];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasUserId) {
    size_ += computeUInt32Size(1, self.userId);
  }
  if (self.hasTotalCnt) {
    size_ += computeUInt32Size(2, self.totalCnt);
  }
  [self.unreadinfoListArray enumerateObjectsUsingBlock:^(UnreadInfo *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(3, element);
  }];
  if (self.hasAttachData) {
    size_ += computeDataSize(20, self.attachData);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (IMUnreadMsgCntRsp*) parseFromData:(NSData*) data {
  return (IMUnreadMsgCntRsp*)[[[IMUnreadMsgCntRsp builder] mergeFromData:data] build];
}
+ (IMUnreadMsgCntRsp*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMUnreadMsgCntRsp*)[[[IMUnreadMsgCntRsp builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (IMUnreadMsgCntRsp*) parseFromInputStream:(NSInputStream*) input {
  return (IMUnreadMsgCntRsp*)[[[IMUnreadMsgCntRsp builder] mergeFromInputStream:input] build];
}
+ (IMUnreadMsgCntRsp*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMUnreadMsgCntRsp*)[[[IMUnreadMsgCntRsp builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (IMUnreadMsgCntRsp*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (IMUnreadMsgCntRsp*)[[[IMUnreadMsgCntRsp builder] mergeFromCodedInputStream:input] build];
}
+ (IMUnreadMsgCntRsp*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMUnreadMsgCntRsp*)[[[IMUnreadMsgCntRsp builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (IMUnreadMsgCntRspBuilder*) builder {
  return [[IMUnreadMsgCntRspBuilder alloc] init];
}
+ (IMUnreadMsgCntRspBuilder*) builderWithPrototype:(IMUnreadMsgCntRsp*) prototype {
  return [[IMUnreadMsgCntRsp builder] mergeFrom:prototype];
}
- (IMUnreadMsgCntRspBuilder*) builder {
  return [IMUnreadMsgCntRsp builder];
}
- (IMUnreadMsgCntRspBuilder*) toBuilder {
  return [IMUnreadMsgCntRsp builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasUserId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"userId", [NSNumber numberWithInteger:self.userId]];
  }
  if (self.hasTotalCnt) {
    [output appendFormat:@"%@%@: %@\n", indent, @"totalCnt", [NSNumber numberWithInteger:self.totalCnt]];
  }
  [self.unreadinfoListArray enumerateObjectsUsingBlock:^(UnreadInfo *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"unreadinfoList"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  if (self.hasAttachData) {
    [output appendFormat:@"%@%@: %@\n", indent, @"attachData", self.attachData];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasUserId) {
    [dictionary setObject: [NSNumber numberWithInteger:self.userId] forKey: @"userId"];
  }
  if (self.hasTotalCnt) {
    [dictionary setObject: [NSNumber numberWithInteger:self.totalCnt] forKey: @"totalCnt"];
  }
  for (UnreadInfo* element in self.unreadinfoListArray) {
    NSMutableDictionary *elementDictionary = [NSMutableDictionary dictionary];
    [element storeInDictionary:elementDictionary];
    [dictionary setObject:[NSDictionary dictionaryWithDictionary:elementDictionary] forKey:@"unreadinfoList"];
  }
  if (self.hasAttachData) {
    [dictionary setObject: self.attachData forKey: @"attachData"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[IMUnreadMsgCntRsp class]]) {
    return NO;
  }
  IMUnreadMsgCntRsp *otherMessage = other;
  return
      self.hasUserId == otherMessage.hasUserId &&
      (!self.hasUserId || self.userId == otherMessage.userId) &&
      self.hasTotalCnt == otherMessage.hasTotalCnt &&
      (!self.hasTotalCnt || self.totalCnt == otherMessage.totalCnt) &&
      [self.unreadinfoListArray isEqualToArray:otherMessage.unreadinfoListArray] &&
      self.hasAttachData == otherMessage.hasAttachData &&
      (!self.hasAttachData || [self.attachData isEqual:otherMessage.attachData]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasUserId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.userId] hash];
  }
  if (self.hasTotalCnt) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.totalCnt] hash];
  }
  [self.unreadinfoListArray enumerateObjectsUsingBlock:^(UnreadInfo *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  if (self.hasAttachData) {
    hashCode = hashCode * 31 + [self.attachData hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface IMUnreadMsgCntRspBuilder()
@property (strong) IMUnreadMsgCntRsp* resultImunreadMsgCntRsp;
@end

@implementation IMUnreadMsgCntRspBuilder
@synthesize resultImunreadMsgCntRsp;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultImunreadMsgCntRsp = [[IMUnreadMsgCntRsp alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultImunreadMsgCntRsp;
}
- (IMUnreadMsgCntRspBuilder*) clear {
  self.resultImunreadMsgCntRsp = [[IMUnreadMsgCntRsp alloc] init];
  return self;
}
- (IMUnreadMsgCntRspBuilder*) clone {
  return [IMUnreadMsgCntRsp builderWithPrototype:resultImunreadMsgCntRsp];
}
- (IMUnreadMsgCntRsp*) defaultInstance {
  return [IMUnreadMsgCntRsp defaultInstance];
}
- (IMUnreadMsgCntRsp*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (IMUnreadMsgCntRsp*) buildPartial {
  IMUnreadMsgCntRsp* returnMe = resultImunreadMsgCntRsp;
  self.resultImunreadMsgCntRsp = nil;
  return returnMe;
}
- (IMUnreadMsgCntRspBuilder*) mergeFrom:(IMUnreadMsgCntRsp*) other {
  if (other == [IMUnreadMsgCntRsp defaultInstance]) {
    return self;
  }
  if (other.hasUserId) {
    [self setUserId:other.userId];
  }
  if (other.hasTotalCnt) {
    [self setTotalCnt:other.totalCnt];
  }
  if (other.unreadinfoListArray.count > 0) {
    if (resultImunreadMsgCntRsp.unreadinfoListArray == nil) {
      resultImunreadMsgCntRsp.unreadinfoListArray = [[NSMutableArray alloc] initWithArray:other.unreadinfoListArray];
    } else {
      [resultImunreadMsgCntRsp.unreadinfoListArray addObjectsFromArray:other.unreadinfoListArray];
    }
  }
  if (other.hasAttachData) {
    [self setAttachData:other.attachData];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (IMUnreadMsgCntRspBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (IMUnreadMsgCntRspBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setUserId:[input readUInt32]];
        break;
      }
      case 16: {
        [self setTotalCnt:[input readUInt32]];
        break;
      }
      case 26: {
        UnreadInfoBuilder* subBuilder = [UnreadInfo builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addUnreadinfoList:[subBuilder buildPartial]];
        break;
      }
      case 162: {
        [self setAttachData:[input readData]];
        break;
      }
    }
  }
}
- (BOOL) hasUserId {
  return resultImunreadMsgCntRsp.hasUserId;
}
- (UInt32) userId {
  return resultImunreadMsgCntRsp.userId;
}
- (IMUnreadMsgCntRspBuilder*) setUserId:(UInt32) value {
  resultImunreadMsgCntRsp.hasUserId = YES;
  resultImunreadMsgCntRsp.userId = value;
  return self;
}
- (IMUnreadMsgCntRspBuilder*) clearUserId {
  resultImunreadMsgCntRsp.hasUserId = NO;
  resultImunreadMsgCntRsp.userId = 0;
  return self;
}
- (BOOL) hasTotalCnt {
  return resultImunreadMsgCntRsp.hasTotalCnt;
}
- (UInt32) totalCnt {
  return resultImunreadMsgCntRsp.totalCnt;
}
- (IMUnreadMsgCntRspBuilder*) setTotalCnt:(UInt32) value {
  resultImunreadMsgCntRsp.hasTotalCnt = YES;
  resultImunreadMsgCntRsp.totalCnt = value;
  return self;
}
- (IMUnreadMsgCntRspBuilder*) clearTotalCnt {
  resultImunreadMsgCntRsp.hasTotalCnt = NO;
  resultImunreadMsgCntRsp.totalCnt = 0;
  return self;
}
- (NSMutableArray *)unreadinfoList {
  return resultImunreadMsgCntRsp.unreadinfoListArray;
}
- (UnreadInfo*)unreadinfoListAtIndex:(NSUInteger)index {
  return [resultImunreadMsgCntRsp unreadinfoListAtIndex:index];
}
- (IMUnreadMsgCntRspBuilder *)addUnreadinfoList:(UnreadInfo*)value {
  if (resultImunreadMsgCntRsp.unreadinfoListArray == nil) {
    resultImunreadMsgCntRsp.unreadinfoListArray = [[NSMutableArray alloc]init];
  }
  [resultImunreadMsgCntRsp.unreadinfoListArray addObject:value];
  return self;
}
- (IMUnreadMsgCntRspBuilder *)setUnreadinfoListArray:(NSArray *)array {
  resultImunreadMsgCntRsp.unreadinfoListArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (IMUnreadMsgCntRspBuilder *)clearUnreadinfoList {
  resultImunreadMsgCntRsp.unreadinfoListArray = nil;
  return self;
}
- (BOOL) hasAttachData {
  return resultImunreadMsgCntRsp.hasAttachData;
}
- (NSData*) attachData {
  return resultImunreadMsgCntRsp.attachData;
}
- (IMUnreadMsgCntRspBuilder*) setAttachData:(NSData*) value {
  resultImunreadMsgCntRsp.hasAttachData = YES;
  resultImunreadMsgCntRsp.attachData = value;
  return self;
}
- (IMUnreadMsgCntRspBuilder*) clearAttachData {
  resultImunreadMsgCntRsp.hasAttachData = NO;
  resultImunreadMsgCntRsp.attachData = [NSData data];
  return self;
}
@end

@interface IMGetMsgListReq ()
@property UInt32 userId;
@property SessionType sessionType;
@property UInt32 sessionId;
@property UInt32 msgIdBegin;
@property UInt32 msgCnt;
@property (strong) NSData* attachData;
@end

@implementation IMGetMsgListReq

- (BOOL) hasUserId {
  return !!hasUserId_;
}
- (void) setHasUserId:(BOOL) _value_ {
  hasUserId_ = !!_value_;
}
@synthesize userId;
- (BOOL) hasSessionType {
  return !!hasSessionType_;
}
- (void) setHasSessionType:(BOOL) _value_ {
  hasSessionType_ = !!_value_;
}
@synthesize sessionType;
- (BOOL) hasSessionId {
  return !!hasSessionId_;
}
- (void) setHasSessionId:(BOOL) _value_ {
  hasSessionId_ = !!_value_;
}
@synthesize sessionId;
- (BOOL) hasMsgIdBegin {
  return !!hasMsgIdBegin_;
}
- (void) setHasMsgIdBegin:(BOOL) _value_ {
  hasMsgIdBegin_ = !!_value_;
}
@synthesize msgIdBegin;
- (BOOL) hasMsgCnt {
  return !!hasMsgCnt_;
}
- (void) setHasMsgCnt:(BOOL) _value_ {
  hasMsgCnt_ = !!_value_;
}
@synthesize msgCnt;
- (BOOL) hasAttachData {
  return !!hasAttachData_;
}
- (void) setHasAttachData:(BOOL) _value_ {
  hasAttachData_ = !!_value_;
}
@synthesize attachData;
- (instancetype) init {
  if ((self = [super init])) {
    self.userId = 0;
    self.sessionType = SessionTypeSessionTypeSingle;
    self.sessionId = 0;
    self.msgIdBegin = 0;
    self.msgCnt = 0;
    self.attachData = [NSData data];
  }
  return self;
}
static IMGetMsgListReq* defaultIMGetMsgListReqInstance = nil;
+ (void) initialize {
  if (self == [IMGetMsgListReq class]) {
    defaultIMGetMsgListReqInstance = [[IMGetMsgListReq alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultIMGetMsgListReqInstance;
}
- (instancetype) defaultInstance {
  return defaultIMGetMsgListReqInstance;
}
- (BOOL) isInitialized {
  if (!self.hasUserId) {
    return NO;
  }
  if (!self.hasSessionType) {
    return NO;
  }
  if (!self.hasSessionId) {
    return NO;
  }
  if (!self.hasMsgIdBegin) {
    return NO;
  }
  if (!self.hasMsgCnt) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasUserId) {
    [output writeUInt32:1 value:self.userId];
  }
  if (self.hasSessionType) {
    [output writeEnum:2 value:self.sessionType];
  }
  if (self.hasSessionId) {
    [output writeUInt32:3 value:self.sessionId];
  }
  if (self.hasMsgIdBegin) {
    [output writeUInt32:4 value:self.msgIdBegin];
  }
  if (self.hasMsgCnt) {
    [output writeUInt32:5 value:self.msgCnt];
  }
  if (self.hasAttachData) {
    [output writeData:20 value:self.attachData];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasUserId) {
    size_ += computeUInt32Size(1, self.userId);
  }
  if (self.hasSessionType) {
    size_ += computeEnumSize(2, self.sessionType);
  }
  if (self.hasSessionId) {
    size_ += computeUInt32Size(3, self.sessionId);
  }
  if (self.hasMsgIdBegin) {
    size_ += computeUInt32Size(4, self.msgIdBegin);
  }
  if (self.hasMsgCnt) {
    size_ += computeUInt32Size(5, self.msgCnt);
  }
  if (self.hasAttachData) {
    size_ += computeDataSize(20, self.attachData);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (IMGetMsgListReq*) parseFromData:(NSData*) data {
  return (IMGetMsgListReq*)[[[IMGetMsgListReq builder] mergeFromData:data] build];
}
+ (IMGetMsgListReq*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMGetMsgListReq*)[[[IMGetMsgListReq builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (IMGetMsgListReq*) parseFromInputStream:(NSInputStream*) input {
  return (IMGetMsgListReq*)[[[IMGetMsgListReq builder] mergeFromInputStream:input] build];
}
+ (IMGetMsgListReq*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMGetMsgListReq*)[[[IMGetMsgListReq builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (IMGetMsgListReq*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (IMGetMsgListReq*)[[[IMGetMsgListReq builder] mergeFromCodedInputStream:input] build];
}
+ (IMGetMsgListReq*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMGetMsgListReq*)[[[IMGetMsgListReq builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (IMGetMsgListReqBuilder*) builder {
  return [[IMGetMsgListReqBuilder alloc] init];
}
+ (IMGetMsgListReqBuilder*) builderWithPrototype:(IMGetMsgListReq*) prototype {
  return [[IMGetMsgListReq builder] mergeFrom:prototype];
}
- (IMGetMsgListReqBuilder*) builder {
  return [IMGetMsgListReq builder];
}
- (IMGetMsgListReqBuilder*) toBuilder {
  return [IMGetMsgListReq builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasUserId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"userId", [NSNumber numberWithInteger:self.userId]];
  }
  if (self.hasSessionType) {
    [output appendFormat:@"%@%@: %@\n", indent, @"sessionType", NSStringFromSessionType(self.sessionType)];
  }
  if (self.hasSessionId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"sessionId", [NSNumber numberWithInteger:self.sessionId]];
  }
  if (self.hasMsgIdBegin) {
    [output appendFormat:@"%@%@: %@\n", indent, @"msgIdBegin", [NSNumber numberWithInteger:self.msgIdBegin]];
  }
  if (self.hasMsgCnt) {
    [output appendFormat:@"%@%@: %@\n", indent, @"msgCnt", [NSNumber numberWithInteger:self.msgCnt]];
  }
  if (self.hasAttachData) {
    [output appendFormat:@"%@%@: %@\n", indent, @"attachData", self.attachData];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasUserId) {
    [dictionary setObject: [NSNumber numberWithInteger:self.userId] forKey: @"userId"];
  }
  if (self.hasSessionType) {
    [dictionary setObject: @(self.sessionType) forKey: @"sessionType"];
  }
  if (self.hasSessionId) {
    [dictionary setObject: [NSNumber numberWithInteger:self.sessionId] forKey: @"sessionId"];
  }
  if (self.hasMsgIdBegin) {
    [dictionary setObject: [NSNumber numberWithInteger:self.msgIdBegin] forKey: @"msgIdBegin"];
  }
  if (self.hasMsgCnt) {
    [dictionary setObject: [NSNumber numberWithInteger:self.msgCnt] forKey: @"msgCnt"];
  }
  if (self.hasAttachData) {
    [dictionary setObject: self.attachData forKey: @"attachData"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[IMGetMsgListReq class]]) {
    return NO;
  }
  IMGetMsgListReq *otherMessage = other;
  return
      self.hasUserId == otherMessage.hasUserId &&
      (!self.hasUserId || self.userId == otherMessage.userId) &&
      self.hasSessionType == otherMessage.hasSessionType &&
      (!self.hasSessionType || self.sessionType == otherMessage.sessionType) &&
      self.hasSessionId == otherMessage.hasSessionId &&
      (!self.hasSessionId || self.sessionId == otherMessage.sessionId) &&
      self.hasMsgIdBegin == otherMessage.hasMsgIdBegin &&
      (!self.hasMsgIdBegin || self.msgIdBegin == otherMessage.msgIdBegin) &&
      self.hasMsgCnt == otherMessage.hasMsgCnt &&
      (!self.hasMsgCnt || self.msgCnt == otherMessage.msgCnt) &&
      self.hasAttachData == otherMessage.hasAttachData &&
      (!self.hasAttachData || [self.attachData isEqual:otherMessage.attachData]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasUserId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.userId] hash];
  }
  if (self.hasSessionType) {
    hashCode = hashCode * 31 + self.sessionType;
  }
  if (self.hasSessionId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.sessionId] hash];
  }
  if (self.hasMsgIdBegin) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.msgIdBegin] hash];
  }
  if (self.hasMsgCnt) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.msgCnt] hash];
  }
  if (self.hasAttachData) {
    hashCode = hashCode * 31 + [self.attachData hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface IMGetMsgListReqBuilder()
@property (strong) IMGetMsgListReq* resultImgetMsgListReq;
@end

@implementation IMGetMsgListReqBuilder
@synthesize resultImgetMsgListReq;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultImgetMsgListReq = [[IMGetMsgListReq alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultImgetMsgListReq;
}
- (IMGetMsgListReqBuilder*) clear {
  self.resultImgetMsgListReq = [[IMGetMsgListReq alloc] init];
  return self;
}
- (IMGetMsgListReqBuilder*) clone {
  return [IMGetMsgListReq builderWithPrototype:resultImgetMsgListReq];
}
- (IMGetMsgListReq*) defaultInstance {
  return [IMGetMsgListReq defaultInstance];
}
- (IMGetMsgListReq*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (IMGetMsgListReq*) buildPartial {
  IMGetMsgListReq* returnMe = resultImgetMsgListReq;
  self.resultImgetMsgListReq = nil;
  return returnMe;
}
- (IMGetMsgListReqBuilder*) mergeFrom:(IMGetMsgListReq*) other {
  if (other == [IMGetMsgListReq defaultInstance]) {
    return self;
  }
  if (other.hasUserId) {
    [self setUserId:other.userId];
  }
  if (other.hasSessionType) {
    [self setSessionType:other.sessionType];
  }
  if (other.hasSessionId) {
    [self setSessionId:other.sessionId];
  }
  if (other.hasMsgIdBegin) {
    [self setMsgIdBegin:other.msgIdBegin];
  }
  if (other.hasMsgCnt) {
    [self setMsgCnt:other.msgCnt];
  }
  if (other.hasAttachData) {
    [self setAttachData:other.attachData];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (IMGetMsgListReqBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (IMGetMsgListReqBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setUserId:[input readUInt32]];
        break;
      }
      case 16: {
        SessionType value = (SessionType)[input readEnum];
        if (SessionTypeIsValidValue(value)) {
          [self setSessionType:value];
        } else {
          [unknownFields mergeVarintField:2 value:value];
        }
        break;
      }
      case 24: {
        [self setSessionId:[input readUInt32]];
        break;
      }
      case 32: {
        [self setMsgIdBegin:[input readUInt32]];
        break;
      }
      case 40: {
        [self setMsgCnt:[input readUInt32]];
        break;
      }
      case 162: {
        [self setAttachData:[input readData]];
        break;
      }
    }
  }
}
- (BOOL) hasUserId {
  return resultImgetMsgListReq.hasUserId;
}
- (UInt32) userId {
  return resultImgetMsgListReq.userId;
}
- (IMGetMsgListReqBuilder*) setUserId:(UInt32) value {
  resultImgetMsgListReq.hasUserId = YES;
  resultImgetMsgListReq.userId = value;
  return self;
}
- (IMGetMsgListReqBuilder*) clearUserId {
  resultImgetMsgListReq.hasUserId = NO;
  resultImgetMsgListReq.userId = 0;
  return self;
}
- (BOOL) hasSessionType {
  return resultImgetMsgListReq.hasSessionType;
}
- (SessionType) sessionType {
  return resultImgetMsgListReq.sessionType;
}
- (IMGetMsgListReqBuilder*) setSessionType:(SessionType) value {
  resultImgetMsgListReq.hasSessionType = YES;
  resultImgetMsgListReq.sessionType = value;
  return self;
}
- (IMGetMsgListReqBuilder*) clearSessionType {
  resultImgetMsgListReq.hasSessionType = NO;
  resultImgetMsgListReq.sessionType = SessionTypeSessionTypeSingle;
  return self;
}
- (BOOL) hasSessionId {
  return resultImgetMsgListReq.hasSessionId;
}
- (UInt32) sessionId {
  return resultImgetMsgListReq.sessionId;
}
- (IMGetMsgListReqBuilder*) setSessionId:(UInt32) value {
  resultImgetMsgListReq.hasSessionId = YES;
  resultImgetMsgListReq.sessionId = value;
  return self;
}
- (IMGetMsgListReqBuilder*) clearSessionId {
  resultImgetMsgListReq.hasSessionId = NO;
  resultImgetMsgListReq.sessionId = 0;
  return self;
}
- (BOOL) hasMsgIdBegin {
  return resultImgetMsgListReq.hasMsgIdBegin;
}
- (UInt32) msgIdBegin {
  return resultImgetMsgListReq.msgIdBegin;
}
- (IMGetMsgListReqBuilder*) setMsgIdBegin:(UInt32) value {
  resultImgetMsgListReq.hasMsgIdBegin = YES;
  resultImgetMsgListReq.msgIdBegin = value;
  return self;
}
- (IMGetMsgListReqBuilder*) clearMsgIdBegin {
  resultImgetMsgListReq.hasMsgIdBegin = NO;
  resultImgetMsgListReq.msgIdBegin = 0;
  return self;
}
- (BOOL) hasMsgCnt {
  return resultImgetMsgListReq.hasMsgCnt;
}
- (UInt32) msgCnt {
  return resultImgetMsgListReq.msgCnt;
}
- (IMGetMsgListReqBuilder*) setMsgCnt:(UInt32) value {
  resultImgetMsgListReq.hasMsgCnt = YES;
  resultImgetMsgListReq.msgCnt = value;
  return self;
}
- (IMGetMsgListReqBuilder*) clearMsgCnt {
  resultImgetMsgListReq.hasMsgCnt = NO;
  resultImgetMsgListReq.msgCnt = 0;
  return self;
}
- (BOOL) hasAttachData {
  return resultImgetMsgListReq.hasAttachData;
}
- (NSData*) attachData {
  return resultImgetMsgListReq.attachData;
}
- (IMGetMsgListReqBuilder*) setAttachData:(NSData*) value {
  resultImgetMsgListReq.hasAttachData = YES;
  resultImgetMsgListReq.attachData = value;
  return self;
}
- (IMGetMsgListReqBuilder*) clearAttachData {
  resultImgetMsgListReq.hasAttachData = NO;
  resultImgetMsgListReq.attachData = [NSData data];
  return self;
}
@end

@interface IMGetMsgListRsp ()
@property UInt32 userId;
@property SessionType sessionType;
@property UInt32 sessionId;
@property UInt32 msgIdBegin;
@property (strong) NSMutableArray * msgListArray;
@property (strong) NSData* attachData;
@end

@implementation IMGetMsgListRsp

- (BOOL) hasUserId {
  return !!hasUserId_;
}
- (void) setHasUserId:(BOOL) _value_ {
  hasUserId_ = !!_value_;
}
@synthesize userId;
- (BOOL) hasSessionType {
  return !!hasSessionType_;
}
- (void) setHasSessionType:(BOOL) _value_ {
  hasSessionType_ = !!_value_;
}
@synthesize sessionType;
- (BOOL) hasSessionId {
  return !!hasSessionId_;
}
- (void) setHasSessionId:(BOOL) _value_ {
  hasSessionId_ = !!_value_;
}
@synthesize sessionId;
- (BOOL) hasMsgIdBegin {
  return !!hasMsgIdBegin_;
}
- (void) setHasMsgIdBegin:(BOOL) _value_ {
  hasMsgIdBegin_ = !!_value_;
}
@synthesize msgIdBegin;
@synthesize msgListArray;
@dynamic msgList;
- (BOOL) hasAttachData {
  return !!hasAttachData_;
}
- (void) setHasAttachData:(BOOL) _value_ {
  hasAttachData_ = !!_value_;
}
@synthesize attachData;
- (instancetype) init {
  if ((self = [super init])) {
    self.userId = 0;
    self.sessionType = SessionTypeSessionTypeSingle;
    self.sessionId = 0;
    self.msgIdBegin = 0;
    self.attachData = [NSData data];
  }
  return self;
}
static IMGetMsgListRsp* defaultIMGetMsgListRspInstance = nil;
+ (void) initialize {
  if (self == [IMGetMsgListRsp class]) {
    defaultIMGetMsgListRspInstance = [[IMGetMsgListRsp alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultIMGetMsgListRspInstance;
}
- (instancetype) defaultInstance {
  return defaultIMGetMsgListRspInstance;
}
- (NSArray *)msgList {
  return msgListArray;
}
- (MsgInfo*)msgListAtIndex:(NSUInteger)index {
  return [msgListArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  if (!self.hasUserId) {
    return NO;
  }
  if (!self.hasSessionType) {
    return NO;
  }
  if (!self.hasSessionId) {
    return NO;
  }
  if (!self.hasMsgIdBegin) {
    return NO;
  }
  __block BOOL isInitmsgList = YES;
   [self.msgList enumerateObjectsUsingBlock:^(MsgInfo *element, NSUInteger idx, BOOL *stop) {
    if (!element.isInitialized) {
      isInitmsgList = NO;
      *stop = YES;
    }
  }];
  if (!isInitmsgList) return isInitmsgList;
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasUserId) {
    [output writeUInt32:1 value:self.userId];
  }
  if (self.hasSessionType) {
    [output writeEnum:2 value:self.sessionType];
  }
  if (self.hasSessionId) {
    [output writeUInt32:3 value:self.sessionId];
  }
  if (self.hasMsgIdBegin) {
    [output writeUInt32:4 value:self.msgIdBegin];
  }
  [self.msgListArray enumerateObjectsUsingBlock:^(MsgInfo *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:5 value:element];
  }];
  if (self.hasAttachData) {
    [output writeData:20 value:self.attachData];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasUserId) {
    size_ += computeUInt32Size(1, self.userId);
  }
  if (self.hasSessionType) {
    size_ += computeEnumSize(2, self.sessionType);
  }
  if (self.hasSessionId) {
    size_ += computeUInt32Size(3, self.sessionId);
  }
  if (self.hasMsgIdBegin) {
    size_ += computeUInt32Size(4, self.msgIdBegin);
  }
  [self.msgListArray enumerateObjectsUsingBlock:^(MsgInfo *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(5, element);
  }];
  if (self.hasAttachData) {
    size_ += computeDataSize(20, self.attachData);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (IMGetMsgListRsp*) parseFromData:(NSData*) data {
  return (IMGetMsgListRsp*)[[[IMGetMsgListRsp builder] mergeFromData:data] build];
}
+ (IMGetMsgListRsp*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMGetMsgListRsp*)[[[IMGetMsgListRsp builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (IMGetMsgListRsp*) parseFromInputStream:(NSInputStream*) input {
  return (IMGetMsgListRsp*)[[[IMGetMsgListRsp builder] mergeFromInputStream:input] build];
}
+ (IMGetMsgListRsp*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMGetMsgListRsp*)[[[IMGetMsgListRsp builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (IMGetMsgListRsp*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (IMGetMsgListRsp*)[[[IMGetMsgListRsp builder] mergeFromCodedInputStream:input] build];
}
+ (IMGetMsgListRsp*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMGetMsgListRsp*)[[[IMGetMsgListRsp builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (IMGetMsgListRspBuilder*) builder {
  return [[IMGetMsgListRspBuilder alloc] init];
}
+ (IMGetMsgListRspBuilder*) builderWithPrototype:(IMGetMsgListRsp*) prototype {
  return [[IMGetMsgListRsp builder] mergeFrom:prototype];
}
- (IMGetMsgListRspBuilder*) builder {
  return [IMGetMsgListRsp builder];
}
- (IMGetMsgListRspBuilder*) toBuilder {
  return [IMGetMsgListRsp builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasUserId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"userId", [NSNumber numberWithInteger:self.userId]];
  }
  if (self.hasSessionType) {
    [output appendFormat:@"%@%@: %@\n", indent, @"sessionType", NSStringFromSessionType(self.sessionType)];
  }
  if (self.hasSessionId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"sessionId", [NSNumber numberWithInteger:self.sessionId]];
  }
  if (self.hasMsgIdBegin) {
    [output appendFormat:@"%@%@: %@\n", indent, @"msgIdBegin", [NSNumber numberWithInteger:self.msgIdBegin]];
  }
  [self.msgListArray enumerateObjectsUsingBlock:^(MsgInfo *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"msgList"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  if (self.hasAttachData) {
    [output appendFormat:@"%@%@: %@\n", indent, @"attachData", self.attachData];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasUserId) {
    [dictionary setObject: [NSNumber numberWithInteger:self.userId] forKey: @"userId"];
  }
  if (self.hasSessionType) {
    [dictionary setObject: @(self.sessionType) forKey: @"sessionType"];
  }
  if (self.hasSessionId) {
    [dictionary setObject: [NSNumber numberWithInteger:self.sessionId] forKey: @"sessionId"];
  }
  if (self.hasMsgIdBegin) {
    [dictionary setObject: [NSNumber numberWithInteger:self.msgIdBegin] forKey: @"msgIdBegin"];
  }
  for (MsgInfo* element in self.msgListArray) {
    NSMutableDictionary *elementDictionary = [NSMutableDictionary dictionary];
    [element storeInDictionary:elementDictionary];
    [dictionary setObject:[NSDictionary dictionaryWithDictionary:elementDictionary] forKey:@"msgList"];
  }
  if (self.hasAttachData) {
    [dictionary setObject: self.attachData forKey: @"attachData"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[IMGetMsgListRsp class]]) {
    return NO;
  }
  IMGetMsgListRsp *otherMessage = other;
  return
      self.hasUserId == otherMessage.hasUserId &&
      (!self.hasUserId || self.userId == otherMessage.userId) &&
      self.hasSessionType == otherMessage.hasSessionType &&
      (!self.hasSessionType || self.sessionType == otherMessage.sessionType) &&
      self.hasSessionId == otherMessage.hasSessionId &&
      (!self.hasSessionId || self.sessionId == otherMessage.sessionId) &&
      self.hasMsgIdBegin == otherMessage.hasMsgIdBegin &&
      (!self.hasMsgIdBegin || self.msgIdBegin == otherMessage.msgIdBegin) &&
      [self.msgListArray isEqualToArray:otherMessage.msgListArray] &&
      self.hasAttachData == otherMessage.hasAttachData &&
      (!self.hasAttachData || [self.attachData isEqual:otherMessage.attachData]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasUserId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.userId] hash];
  }
  if (self.hasSessionType) {
    hashCode = hashCode * 31 + self.sessionType;
  }
  if (self.hasSessionId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.sessionId] hash];
  }
  if (self.hasMsgIdBegin) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.msgIdBegin] hash];
  }
  [self.msgListArray enumerateObjectsUsingBlock:^(MsgInfo *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  if (self.hasAttachData) {
    hashCode = hashCode * 31 + [self.attachData hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface IMGetMsgListRspBuilder()
@property (strong) IMGetMsgListRsp* resultImgetMsgListRsp;
@end

@implementation IMGetMsgListRspBuilder
@synthesize resultImgetMsgListRsp;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultImgetMsgListRsp = [[IMGetMsgListRsp alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultImgetMsgListRsp;
}
- (IMGetMsgListRspBuilder*) clear {
  self.resultImgetMsgListRsp = [[IMGetMsgListRsp alloc] init];
  return self;
}
- (IMGetMsgListRspBuilder*) clone {
  return [IMGetMsgListRsp builderWithPrototype:resultImgetMsgListRsp];
}
- (IMGetMsgListRsp*) defaultInstance {
  return [IMGetMsgListRsp defaultInstance];
}
- (IMGetMsgListRsp*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (IMGetMsgListRsp*) buildPartial {
  IMGetMsgListRsp* returnMe = resultImgetMsgListRsp;
  self.resultImgetMsgListRsp = nil;
  return returnMe;
}
- (IMGetMsgListRspBuilder*) mergeFrom:(IMGetMsgListRsp*) other {
  if (other == [IMGetMsgListRsp defaultInstance]) {
    return self;
  }
  if (other.hasUserId) {
    [self setUserId:other.userId];
  }
  if (other.hasSessionType) {
    [self setSessionType:other.sessionType];
  }
  if (other.hasSessionId) {
    [self setSessionId:other.sessionId];
  }
  if (other.hasMsgIdBegin) {
    [self setMsgIdBegin:other.msgIdBegin];
  }
  if (other.msgListArray.count > 0) {
    if (resultImgetMsgListRsp.msgListArray == nil) {
      resultImgetMsgListRsp.msgListArray = [[NSMutableArray alloc] initWithArray:other.msgListArray];
    } else {
      [resultImgetMsgListRsp.msgListArray addObjectsFromArray:other.msgListArray];
    }
  }
  if (other.hasAttachData) {
    [self setAttachData:other.attachData];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (IMGetMsgListRspBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (IMGetMsgListRspBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setUserId:[input readUInt32]];
        break;
      }
      case 16: {
        SessionType value = (SessionType)[input readEnum];
        if (SessionTypeIsValidValue(value)) {
          [self setSessionType:value];
        } else {
          [unknownFields mergeVarintField:2 value:value];
        }
        break;
      }
      case 24: {
        [self setSessionId:[input readUInt32]];
        break;
      }
      case 32: {
        [self setMsgIdBegin:[input readUInt32]];
        break;
      }
      case 42: {
        MsgInfoBuilder* subBuilder = [MsgInfo builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addMsgList:[subBuilder buildPartial]];
        break;
      }
      case 162: {
        [self setAttachData:[input readData]];
        break;
      }
    }
  }
}
- (BOOL) hasUserId {
  return resultImgetMsgListRsp.hasUserId;
}
- (UInt32) userId {
  return resultImgetMsgListRsp.userId;
}
- (IMGetMsgListRspBuilder*) setUserId:(UInt32) value {
  resultImgetMsgListRsp.hasUserId = YES;
  resultImgetMsgListRsp.userId = value;
  return self;
}
- (IMGetMsgListRspBuilder*) clearUserId {
  resultImgetMsgListRsp.hasUserId = NO;
  resultImgetMsgListRsp.userId = 0;
  return self;
}
- (BOOL) hasSessionType {
  return resultImgetMsgListRsp.hasSessionType;
}
- (SessionType) sessionType {
  return resultImgetMsgListRsp.sessionType;
}
- (IMGetMsgListRspBuilder*) setSessionType:(SessionType) value {
  resultImgetMsgListRsp.hasSessionType = YES;
  resultImgetMsgListRsp.sessionType = value;
  return self;
}
- (IMGetMsgListRspBuilder*) clearSessionType {
  resultImgetMsgListRsp.hasSessionType = NO;
  resultImgetMsgListRsp.sessionType = SessionTypeSessionTypeSingle;
  return self;
}
- (BOOL) hasSessionId {
  return resultImgetMsgListRsp.hasSessionId;
}
- (UInt32) sessionId {
  return resultImgetMsgListRsp.sessionId;
}
- (IMGetMsgListRspBuilder*) setSessionId:(UInt32) value {
  resultImgetMsgListRsp.hasSessionId = YES;
  resultImgetMsgListRsp.sessionId = value;
  return self;
}
- (IMGetMsgListRspBuilder*) clearSessionId {
  resultImgetMsgListRsp.hasSessionId = NO;
  resultImgetMsgListRsp.sessionId = 0;
  return self;
}
- (BOOL) hasMsgIdBegin {
  return resultImgetMsgListRsp.hasMsgIdBegin;
}
- (UInt32) msgIdBegin {
  return resultImgetMsgListRsp.msgIdBegin;
}
- (IMGetMsgListRspBuilder*) setMsgIdBegin:(UInt32) value {
  resultImgetMsgListRsp.hasMsgIdBegin = YES;
  resultImgetMsgListRsp.msgIdBegin = value;
  return self;
}
- (IMGetMsgListRspBuilder*) clearMsgIdBegin {
  resultImgetMsgListRsp.hasMsgIdBegin = NO;
  resultImgetMsgListRsp.msgIdBegin = 0;
  return self;
}
- (NSMutableArray *)msgList {
  return resultImgetMsgListRsp.msgListArray;
}
- (MsgInfo*)msgListAtIndex:(NSUInteger)index {
  return [resultImgetMsgListRsp msgListAtIndex:index];
}
- (IMGetMsgListRspBuilder *)addMsgList:(MsgInfo*)value {
  if (resultImgetMsgListRsp.msgListArray == nil) {
    resultImgetMsgListRsp.msgListArray = [[NSMutableArray alloc]init];
  }
  [resultImgetMsgListRsp.msgListArray addObject:value];
  return self;
}
- (IMGetMsgListRspBuilder *)setMsgListArray:(NSArray *)array {
  resultImgetMsgListRsp.msgListArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (IMGetMsgListRspBuilder *)clearMsgList {
  resultImgetMsgListRsp.msgListArray = nil;
  return self;
}
- (BOOL) hasAttachData {
  return resultImgetMsgListRsp.hasAttachData;
}
- (NSData*) attachData {
  return resultImgetMsgListRsp.attachData;
}
- (IMGetMsgListRspBuilder*) setAttachData:(NSData*) value {
  resultImgetMsgListRsp.hasAttachData = YES;
  resultImgetMsgListRsp.attachData = value;
  return self;
}
- (IMGetMsgListRspBuilder*) clearAttachData {
  resultImgetMsgListRsp.hasAttachData = NO;
  resultImgetMsgListRsp.attachData = [NSData data];
  return self;
}
@end

@interface IMGetLatestMsgIdReq ()
@property UInt32 userId;
@property SessionType sessionType;
@property UInt32 sessionId;
@property (strong) NSData* attachData;
@end

@implementation IMGetLatestMsgIdReq

- (BOOL) hasUserId {
  return !!hasUserId_;
}
- (void) setHasUserId:(BOOL) _value_ {
  hasUserId_ = !!_value_;
}
@synthesize userId;
- (BOOL) hasSessionType {
  return !!hasSessionType_;
}
- (void) setHasSessionType:(BOOL) _value_ {
  hasSessionType_ = !!_value_;
}
@synthesize sessionType;
- (BOOL) hasSessionId {
  return !!hasSessionId_;
}
- (void) setHasSessionId:(BOOL) _value_ {
  hasSessionId_ = !!_value_;
}
@synthesize sessionId;
- (BOOL) hasAttachData {
  return !!hasAttachData_;
}
- (void) setHasAttachData:(BOOL) _value_ {
  hasAttachData_ = !!_value_;
}
@synthesize attachData;
- (instancetype) init {
  if ((self = [super init])) {
    self.userId = 0;
    self.sessionType = SessionTypeSessionTypeSingle;
    self.sessionId = 0;
    self.attachData = [NSData data];
  }
  return self;
}
static IMGetLatestMsgIdReq* defaultIMGetLatestMsgIdReqInstance = nil;
+ (void) initialize {
  if (self == [IMGetLatestMsgIdReq class]) {
    defaultIMGetLatestMsgIdReqInstance = [[IMGetLatestMsgIdReq alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultIMGetLatestMsgIdReqInstance;
}
- (instancetype) defaultInstance {
  return defaultIMGetLatestMsgIdReqInstance;
}
- (BOOL) isInitialized {
  if (!self.hasUserId) {
    return NO;
  }
  if (!self.hasSessionType) {
    return NO;
  }
  if (!self.hasSessionId) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasUserId) {
    [output writeUInt32:1 value:self.userId];
  }
  if (self.hasSessionType) {
    [output writeEnum:2 value:self.sessionType];
  }
  if (self.hasSessionId) {
    [output writeUInt32:3 value:self.sessionId];
  }
  if (self.hasAttachData) {
    [output writeData:20 value:self.attachData];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasUserId) {
    size_ += computeUInt32Size(1, self.userId);
  }
  if (self.hasSessionType) {
    size_ += computeEnumSize(2, self.sessionType);
  }
  if (self.hasSessionId) {
    size_ += computeUInt32Size(3, self.sessionId);
  }
  if (self.hasAttachData) {
    size_ += computeDataSize(20, self.attachData);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (IMGetLatestMsgIdReq*) parseFromData:(NSData*) data {
  return (IMGetLatestMsgIdReq*)[[[IMGetLatestMsgIdReq builder] mergeFromData:data] build];
}
+ (IMGetLatestMsgIdReq*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMGetLatestMsgIdReq*)[[[IMGetLatestMsgIdReq builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (IMGetLatestMsgIdReq*) parseFromInputStream:(NSInputStream*) input {
  return (IMGetLatestMsgIdReq*)[[[IMGetLatestMsgIdReq builder] mergeFromInputStream:input] build];
}
+ (IMGetLatestMsgIdReq*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMGetLatestMsgIdReq*)[[[IMGetLatestMsgIdReq builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (IMGetLatestMsgIdReq*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (IMGetLatestMsgIdReq*)[[[IMGetLatestMsgIdReq builder] mergeFromCodedInputStream:input] build];
}
+ (IMGetLatestMsgIdReq*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMGetLatestMsgIdReq*)[[[IMGetLatestMsgIdReq builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (IMGetLatestMsgIdReqBuilder*) builder {
  return [[IMGetLatestMsgIdReqBuilder alloc] init];
}
+ (IMGetLatestMsgIdReqBuilder*) builderWithPrototype:(IMGetLatestMsgIdReq*) prototype {
  return [[IMGetLatestMsgIdReq builder] mergeFrom:prototype];
}
- (IMGetLatestMsgIdReqBuilder*) builder {
  return [IMGetLatestMsgIdReq builder];
}
- (IMGetLatestMsgIdReqBuilder*) toBuilder {
  return [IMGetLatestMsgIdReq builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasUserId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"userId", [NSNumber numberWithInteger:self.userId]];
  }
  if (self.hasSessionType) {
    [output appendFormat:@"%@%@: %@\n", indent, @"sessionType", NSStringFromSessionType(self.sessionType)];
  }
  if (self.hasSessionId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"sessionId", [NSNumber numberWithInteger:self.sessionId]];
  }
  if (self.hasAttachData) {
    [output appendFormat:@"%@%@: %@\n", indent, @"attachData", self.attachData];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasUserId) {
    [dictionary setObject: [NSNumber numberWithInteger:self.userId] forKey: @"userId"];
  }
  if (self.hasSessionType) {
    [dictionary setObject: @(self.sessionType) forKey: @"sessionType"];
  }
  if (self.hasSessionId) {
    [dictionary setObject: [NSNumber numberWithInteger:self.sessionId] forKey: @"sessionId"];
  }
  if (self.hasAttachData) {
    [dictionary setObject: self.attachData forKey: @"attachData"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[IMGetLatestMsgIdReq class]]) {
    return NO;
  }
  IMGetLatestMsgIdReq *otherMessage = other;
  return
      self.hasUserId == otherMessage.hasUserId &&
      (!self.hasUserId || self.userId == otherMessage.userId) &&
      self.hasSessionType == otherMessage.hasSessionType &&
      (!self.hasSessionType || self.sessionType == otherMessage.sessionType) &&
      self.hasSessionId == otherMessage.hasSessionId &&
      (!self.hasSessionId || self.sessionId == otherMessage.sessionId) &&
      self.hasAttachData == otherMessage.hasAttachData &&
      (!self.hasAttachData || [self.attachData isEqual:otherMessage.attachData]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasUserId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.userId] hash];
  }
  if (self.hasSessionType) {
    hashCode = hashCode * 31 + self.sessionType;
  }
  if (self.hasSessionId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.sessionId] hash];
  }
  if (self.hasAttachData) {
    hashCode = hashCode * 31 + [self.attachData hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface IMGetLatestMsgIdReqBuilder()
@property (strong) IMGetLatestMsgIdReq* resultImgetLatestMsgIdReq;
@end

@implementation IMGetLatestMsgIdReqBuilder
@synthesize resultImgetLatestMsgIdReq;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultImgetLatestMsgIdReq = [[IMGetLatestMsgIdReq alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultImgetLatestMsgIdReq;
}
- (IMGetLatestMsgIdReqBuilder*) clear {
  self.resultImgetLatestMsgIdReq = [[IMGetLatestMsgIdReq alloc] init];
  return self;
}
- (IMGetLatestMsgIdReqBuilder*) clone {
  return [IMGetLatestMsgIdReq builderWithPrototype:resultImgetLatestMsgIdReq];
}
- (IMGetLatestMsgIdReq*) defaultInstance {
  return [IMGetLatestMsgIdReq defaultInstance];
}
- (IMGetLatestMsgIdReq*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (IMGetLatestMsgIdReq*) buildPartial {
  IMGetLatestMsgIdReq* returnMe = resultImgetLatestMsgIdReq;
  self.resultImgetLatestMsgIdReq = nil;
  return returnMe;
}
- (IMGetLatestMsgIdReqBuilder*) mergeFrom:(IMGetLatestMsgIdReq*) other {
  if (other == [IMGetLatestMsgIdReq defaultInstance]) {
    return self;
  }
  if (other.hasUserId) {
    [self setUserId:other.userId];
  }
  if (other.hasSessionType) {
    [self setSessionType:other.sessionType];
  }
  if (other.hasSessionId) {
    [self setSessionId:other.sessionId];
  }
  if (other.hasAttachData) {
    [self setAttachData:other.attachData];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (IMGetLatestMsgIdReqBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (IMGetLatestMsgIdReqBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setUserId:[input readUInt32]];
        break;
      }
      case 16: {
        SessionType value = (SessionType)[input readEnum];
        if (SessionTypeIsValidValue(value)) {
          [self setSessionType:value];
        } else {
          [unknownFields mergeVarintField:2 value:value];
        }
        break;
      }
      case 24: {
        [self setSessionId:[input readUInt32]];
        break;
      }
      case 162: {
        [self setAttachData:[input readData]];
        break;
      }
    }
  }
}
- (BOOL) hasUserId {
  return resultImgetLatestMsgIdReq.hasUserId;
}
- (UInt32) userId {
  return resultImgetLatestMsgIdReq.userId;
}
- (IMGetLatestMsgIdReqBuilder*) setUserId:(UInt32) value {
  resultImgetLatestMsgIdReq.hasUserId = YES;
  resultImgetLatestMsgIdReq.userId = value;
  return self;
}
- (IMGetLatestMsgIdReqBuilder*) clearUserId {
  resultImgetLatestMsgIdReq.hasUserId = NO;
  resultImgetLatestMsgIdReq.userId = 0;
  return self;
}
- (BOOL) hasSessionType {
  return resultImgetLatestMsgIdReq.hasSessionType;
}
- (SessionType) sessionType {
  return resultImgetLatestMsgIdReq.sessionType;
}
- (IMGetLatestMsgIdReqBuilder*) setSessionType:(SessionType) value {
  resultImgetLatestMsgIdReq.hasSessionType = YES;
  resultImgetLatestMsgIdReq.sessionType = value;
  return self;
}
- (IMGetLatestMsgIdReqBuilder*) clearSessionType {
  resultImgetLatestMsgIdReq.hasSessionType = NO;
  resultImgetLatestMsgIdReq.sessionType = SessionTypeSessionTypeSingle;
  return self;
}
- (BOOL) hasSessionId {
  return resultImgetLatestMsgIdReq.hasSessionId;
}
- (UInt32) sessionId {
  return resultImgetLatestMsgIdReq.sessionId;
}
- (IMGetLatestMsgIdReqBuilder*) setSessionId:(UInt32) value {
  resultImgetLatestMsgIdReq.hasSessionId = YES;
  resultImgetLatestMsgIdReq.sessionId = value;
  return self;
}
- (IMGetLatestMsgIdReqBuilder*) clearSessionId {
  resultImgetLatestMsgIdReq.hasSessionId = NO;
  resultImgetLatestMsgIdReq.sessionId = 0;
  return self;
}
- (BOOL) hasAttachData {
  return resultImgetLatestMsgIdReq.hasAttachData;
}
- (NSData*) attachData {
  return resultImgetLatestMsgIdReq.attachData;
}
- (IMGetLatestMsgIdReqBuilder*) setAttachData:(NSData*) value {
  resultImgetLatestMsgIdReq.hasAttachData = YES;
  resultImgetLatestMsgIdReq.attachData = value;
  return self;
}
- (IMGetLatestMsgIdReqBuilder*) clearAttachData {
  resultImgetLatestMsgIdReq.hasAttachData = NO;
  resultImgetLatestMsgIdReq.attachData = [NSData data];
  return self;
}
@end

@interface IMGetLatestMsgIdRsp ()
@property UInt32 userId;
@property SessionType sessionType;
@property UInt32 sessionId;
@property UInt32 latestMsgId;
@property (strong) NSData* attachData;
@end

@implementation IMGetLatestMsgIdRsp

- (BOOL) hasUserId {
  return !!hasUserId_;
}
- (void) setHasUserId:(BOOL) _value_ {
  hasUserId_ = !!_value_;
}
@synthesize userId;
- (BOOL) hasSessionType {
  return !!hasSessionType_;
}
- (void) setHasSessionType:(BOOL) _value_ {
  hasSessionType_ = !!_value_;
}
@synthesize sessionType;
- (BOOL) hasSessionId {
  return !!hasSessionId_;
}
- (void) setHasSessionId:(BOOL) _value_ {
  hasSessionId_ = !!_value_;
}
@synthesize sessionId;
- (BOOL) hasLatestMsgId {
  return !!hasLatestMsgId_;
}
- (void) setHasLatestMsgId:(BOOL) _value_ {
  hasLatestMsgId_ = !!_value_;
}
@synthesize latestMsgId;
- (BOOL) hasAttachData {
  return !!hasAttachData_;
}
- (void) setHasAttachData:(BOOL) _value_ {
  hasAttachData_ = !!_value_;
}
@synthesize attachData;
- (instancetype) init {
  if ((self = [super init])) {
    self.userId = 0;
    self.sessionType = SessionTypeSessionTypeSingle;
    self.sessionId = 0;
    self.latestMsgId = 0;
    self.attachData = [NSData data];
  }
  return self;
}
static IMGetLatestMsgIdRsp* defaultIMGetLatestMsgIdRspInstance = nil;
+ (void) initialize {
  if (self == [IMGetLatestMsgIdRsp class]) {
    defaultIMGetLatestMsgIdRspInstance = [[IMGetLatestMsgIdRsp alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultIMGetLatestMsgIdRspInstance;
}
- (instancetype) defaultInstance {
  return defaultIMGetLatestMsgIdRspInstance;
}
- (BOOL) isInitialized {
  if (!self.hasUserId) {
    return NO;
  }
  if (!self.hasSessionType) {
    return NO;
  }
  if (!self.hasSessionId) {
    return NO;
  }
  if (!self.hasLatestMsgId) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasUserId) {
    [output writeUInt32:1 value:self.userId];
  }
  if (self.hasSessionType) {
    [output writeEnum:2 value:self.sessionType];
  }
  if (self.hasSessionId) {
    [output writeUInt32:3 value:self.sessionId];
  }
  if (self.hasLatestMsgId) {
    [output writeUInt32:4 value:self.latestMsgId];
  }
  if (self.hasAttachData) {
    [output writeData:20 value:self.attachData];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasUserId) {
    size_ += computeUInt32Size(1, self.userId);
  }
  if (self.hasSessionType) {
    size_ += computeEnumSize(2, self.sessionType);
  }
  if (self.hasSessionId) {
    size_ += computeUInt32Size(3, self.sessionId);
  }
  if (self.hasLatestMsgId) {
    size_ += computeUInt32Size(4, self.latestMsgId);
  }
  if (self.hasAttachData) {
    size_ += computeDataSize(20, self.attachData);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (IMGetLatestMsgIdRsp*) parseFromData:(NSData*) data {
  return (IMGetLatestMsgIdRsp*)[[[IMGetLatestMsgIdRsp builder] mergeFromData:data] build];
}
+ (IMGetLatestMsgIdRsp*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMGetLatestMsgIdRsp*)[[[IMGetLatestMsgIdRsp builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (IMGetLatestMsgIdRsp*) parseFromInputStream:(NSInputStream*) input {
  return (IMGetLatestMsgIdRsp*)[[[IMGetLatestMsgIdRsp builder] mergeFromInputStream:input] build];
}
+ (IMGetLatestMsgIdRsp*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMGetLatestMsgIdRsp*)[[[IMGetLatestMsgIdRsp builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (IMGetLatestMsgIdRsp*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (IMGetLatestMsgIdRsp*)[[[IMGetLatestMsgIdRsp builder] mergeFromCodedInputStream:input] build];
}
+ (IMGetLatestMsgIdRsp*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMGetLatestMsgIdRsp*)[[[IMGetLatestMsgIdRsp builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (IMGetLatestMsgIdRspBuilder*) builder {
  return [[IMGetLatestMsgIdRspBuilder alloc] init];
}
+ (IMGetLatestMsgIdRspBuilder*) builderWithPrototype:(IMGetLatestMsgIdRsp*) prototype {
  return [[IMGetLatestMsgIdRsp builder] mergeFrom:prototype];
}
- (IMGetLatestMsgIdRspBuilder*) builder {
  return [IMGetLatestMsgIdRsp builder];
}
- (IMGetLatestMsgIdRspBuilder*) toBuilder {
  return [IMGetLatestMsgIdRsp builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasUserId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"userId", [NSNumber numberWithInteger:self.userId]];
  }
  if (self.hasSessionType) {
    [output appendFormat:@"%@%@: %@\n", indent, @"sessionType", NSStringFromSessionType(self.sessionType)];
  }
  if (self.hasSessionId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"sessionId", [NSNumber numberWithInteger:self.sessionId]];
  }
  if (self.hasLatestMsgId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"latestMsgId", [NSNumber numberWithInteger:self.latestMsgId]];
  }
  if (self.hasAttachData) {
    [output appendFormat:@"%@%@: %@\n", indent, @"attachData", self.attachData];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasUserId) {
    [dictionary setObject: [NSNumber numberWithInteger:self.userId] forKey: @"userId"];
  }
  if (self.hasSessionType) {
    [dictionary setObject: @(self.sessionType) forKey: @"sessionType"];
  }
  if (self.hasSessionId) {
    [dictionary setObject: [NSNumber numberWithInteger:self.sessionId] forKey: @"sessionId"];
  }
  if (self.hasLatestMsgId) {
    [dictionary setObject: [NSNumber numberWithInteger:self.latestMsgId] forKey: @"latestMsgId"];
  }
  if (self.hasAttachData) {
    [dictionary setObject: self.attachData forKey: @"attachData"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[IMGetLatestMsgIdRsp class]]) {
    return NO;
  }
  IMGetLatestMsgIdRsp *otherMessage = other;
  return
      self.hasUserId == otherMessage.hasUserId &&
      (!self.hasUserId || self.userId == otherMessage.userId) &&
      self.hasSessionType == otherMessage.hasSessionType &&
      (!self.hasSessionType || self.sessionType == otherMessage.sessionType) &&
      self.hasSessionId == otherMessage.hasSessionId &&
      (!self.hasSessionId || self.sessionId == otherMessage.sessionId) &&
      self.hasLatestMsgId == otherMessage.hasLatestMsgId &&
      (!self.hasLatestMsgId || self.latestMsgId == otherMessage.latestMsgId) &&
      self.hasAttachData == otherMessage.hasAttachData &&
      (!self.hasAttachData || [self.attachData isEqual:otherMessage.attachData]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasUserId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.userId] hash];
  }
  if (self.hasSessionType) {
    hashCode = hashCode * 31 + self.sessionType;
  }
  if (self.hasSessionId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.sessionId] hash];
  }
  if (self.hasLatestMsgId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.latestMsgId] hash];
  }
  if (self.hasAttachData) {
    hashCode = hashCode * 31 + [self.attachData hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface IMGetLatestMsgIdRspBuilder()
@property (strong) IMGetLatestMsgIdRsp* resultImgetLatestMsgIdRsp;
@end

@implementation IMGetLatestMsgIdRspBuilder
@synthesize resultImgetLatestMsgIdRsp;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultImgetLatestMsgIdRsp = [[IMGetLatestMsgIdRsp alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultImgetLatestMsgIdRsp;
}
- (IMGetLatestMsgIdRspBuilder*) clear {
  self.resultImgetLatestMsgIdRsp = [[IMGetLatestMsgIdRsp alloc] init];
  return self;
}
- (IMGetLatestMsgIdRspBuilder*) clone {
  return [IMGetLatestMsgIdRsp builderWithPrototype:resultImgetLatestMsgIdRsp];
}
- (IMGetLatestMsgIdRsp*) defaultInstance {
  return [IMGetLatestMsgIdRsp defaultInstance];
}
- (IMGetLatestMsgIdRsp*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (IMGetLatestMsgIdRsp*) buildPartial {
  IMGetLatestMsgIdRsp* returnMe = resultImgetLatestMsgIdRsp;
  self.resultImgetLatestMsgIdRsp = nil;
  return returnMe;
}
- (IMGetLatestMsgIdRspBuilder*) mergeFrom:(IMGetLatestMsgIdRsp*) other {
  if (other == [IMGetLatestMsgIdRsp defaultInstance]) {
    return self;
  }
  if (other.hasUserId) {
    [self setUserId:other.userId];
  }
  if (other.hasSessionType) {
    [self setSessionType:other.sessionType];
  }
  if (other.hasSessionId) {
    [self setSessionId:other.sessionId];
  }
  if (other.hasLatestMsgId) {
    [self setLatestMsgId:other.latestMsgId];
  }
  if (other.hasAttachData) {
    [self setAttachData:other.attachData];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (IMGetLatestMsgIdRspBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (IMGetLatestMsgIdRspBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setUserId:[input readUInt32]];
        break;
      }
      case 16: {
        SessionType value = (SessionType)[input readEnum];
        if (SessionTypeIsValidValue(value)) {
          [self setSessionType:value];
        } else {
          [unknownFields mergeVarintField:2 value:value];
        }
        break;
      }
      case 24: {
        [self setSessionId:[input readUInt32]];
        break;
      }
      case 32: {
        [self setLatestMsgId:[input readUInt32]];
        break;
      }
      case 162: {
        [self setAttachData:[input readData]];
        break;
      }
    }
  }
}
- (BOOL) hasUserId {
  return resultImgetLatestMsgIdRsp.hasUserId;
}
- (UInt32) userId {
  return resultImgetLatestMsgIdRsp.userId;
}
- (IMGetLatestMsgIdRspBuilder*) setUserId:(UInt32) value {
  resultImgetLatestMsgIdRsp.hasUserId = YES;
  resultImgetLatestMsgIdRsp.userId = value;
  return self;
}
- (IMGetLatestMsgIdRspBuilder*) clearUserId {
  resultImgetLatestMsgIdRsp.hasUserId = NO;
  resultImgetLatestMsgIdRsp.userId = 0;
  return self;
}
- (BOOL) hasSessionType {
  return resultImgetLatestMsgIdRsp.hasSessionType;
}
- (SessionType) sessionType {
  return resultImgetLatestMsgIdRsp.sessionType;
}
- (IMGetLatestMsgIdRspBuilder*) setSessionType:(SessionType) value {
  resultImgetLatestMsgIdRsp.hasSessionType = YES;
  resultImgetLatestMsgIdRsp.sessionType = value;
  return self;
}
- (IMGetLatestMsgIdRspBuilder*) clearSessionType {
  resultImgetLatestMsgIdRsp.hasSessionType = NO;
  resultImgetLatestMsgIdRsp.sessionType = SessionTypeSessionTypeSingle;
  return self;
}
- (BOOL) hasSessionId {
  return resultImgetLatestMsgIdRsp.hasSessionId;
}
- (UInt32) sessionId {
  return resultImgetLatestMsgIdRsp.sessionId;
}
- (IMGetLatestMsgIdRspBuilder*) setSessionId:(UInt32) value {
  resultImgetLatestMsgIdRsp.hasSessionId = YES;
  resultImgetLatestMsgIdRsp.sessionId = value;
  return self;
}
- (IMGetLatestMsgIdRspBuilder*) clearSessionId {
  resultImgetLatestMsgIdRsp.hasSessionId = NO;
  resultImgetLatestMsgIdRsp.sessionId = 0;
  return self;
}
- (BOOL) hasLatestMsgId {
  return resultImgetLatestMsgIdRsp.hasLatestMsgId;
}
- (UInt32) latestMsgId {
  return resultImgetLatestMsgIdRsp.latestMsgId;
}
- (IMGetLatestMsgIdRspBuilder*) setLatestMsgId:(UInt32) value {
  resultImgetLatestMsgIdRsp.hasLatestMsgId = YES;
  resultImgetLatestMsgIdRsp.latestMsgId = value;
  return self;
}
- (IMGetLatestMsgIdRspBuilder*) clearLatestMsgId {
  resultImgetLatestMsgIdRsp.hasLatestMsgId = NO;
  resultImgetLatestMsgIdRsp.latestMsgId = 0;
  return self;
}
- (BOOL) hasAttachData {
  return resultImgetLatestMsgIdRsp.hasAttachData;
}
- (NSData*) attachData {
  return resultImgetLatestMsgIdRsp.attachData;
}
- (IMGetLatestMsgIdRspBuilder*) setAttachData:(NSData*) value {
  resultImgetLatestMsgIdRsp.hasAttachData = YES;
  resultImgetLatestMsgIdRsp.attachData = value;
  return self;
}
- (IMGetLatestMsgIdRspBuilder*) clearAttachData {
  resultImgetLatestMsgIdRsp.hasAttachData = NO;
  resultImgetLatestMsgIdRsp.attachData = [NSData data];
  return self;
}
@end

@interface IMGetMsgByIdReq ()
@property UInt32 userId;
@property SessionType sessionType;
@property UInt32 sessionId;
@property (strong) PBAppendableArray * msgIdListArray;
@property (strong) NSData* attachData;
@end

@implementation IMGetMsgByIdReq

- (BOOL) hasUserId {
  return !!hasUserId_;
}
- (void) setHasUserId:(BOOL) _value_ {
  hasUserId_ = !!_value_;
}
@synthesize userId;
- (BOOL) hasSessionType {
  return !!hasSessionType_;
}
- (void) setHasSessionType:(BOOL) _value_ {
  hasSessionType_ = !!_value_;
}
@synthesize sessionType;
- (BOOL) hasSessionId {
  return !!hasSessionId_;
}
- (void) setHasSessionId:(BOOL) _value_ {
  hasSessionId_ = !!_value_;
}
@synthesize sessionId;
@synthesize msgIdListArray;
@dynamic msgIdList;
- (BOOL) hasAttachData {
  return !!hasAttachData_;
}
- (void) setHasAttachData:(BOOL) _value_ {
  hasAttachData_ = !!_value_;
}
@synthesize attachData;
- (instancetype) init {
  if ((self = [super init])) {
    self.userId = 0;
    self.sessionType = SessionTypeSessionTypeSingle;
    self.sessionId = 0;
    self.attachData = [NSData data];
  }
  return self;
}
static IMGetMsgByIdReq* defaultIMGetMsgByIdReqInstance = nil;
+ (void) initialize {
  if (self == [IMGetMsgByIdReq class]) {
    defaultIMGetMsgByIdReqInstance = [[IMGetMsgByIdReq alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultIMGetMsgByIdReqInstance;
}
- (instancetype) defaultInstance {
  return defaultIMGetMsgByIdReqInstance;
}
- (PBArray *)msgIdList {
  return msgIdListArray;
}
- (UInt32)msgIdListAtIndex:(NSUInteger)index {
  return [msgIdListArray uint32AtIndex:index];
}
- (BOOL) isInitialized {
  if (!self.hasUserId) {
    return NO;
  }
  if (!self.hasSessionType) {
    return NO;
  }
  if (!self.hasSessionId) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasUserId) {
    [output writeUInt32:1 value:self.userId];
  }
  if (self.hasSessionType) {
    [output writeEnum:2 value:self.sessionType];
  }
  if (self.hasSessionId) {
    [output writeUInt32:3 value:self.sessionId];
  }
  const NSUInteger msgIdListArrayCount = self.msgIdListArray.count;
  if (msgIdListArrayCount > 0) {
    const UInt32 *values = (const UInt32 *)self.msgIdListArray.data;
    for (NSUInteger i = 0; i < msgIdListArrayCount; ++i) {
      [output writeUInt32:4 value:values[i]];
    }
  }
  if (self.hasAttachData) {
    [output writeData:20 value:self.attachData];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasUserId) {
    size_ += computeUInt32Size(1, self.userId);
  }
  if (self.hasSessionType) {
    size_ += computeEnumSize(2, self.sessionType);
  }
  if (self.hasSessionId) {
    size_ += computeUInt32Size(3, self.sessionId);
  }
  {
    __block SInt32 dataSize = 0;
    const NSUInteger count = self.msgIdListArray.count;
    const UInt32 *values = (const UInt32 *)self.msgIdListArray.data;
    for (NSUInteger i = 0; i < count; ++i) {
      dataSize += computeUInt32SizeNoTag(values[i]);
    }
    size_ += dataSize;
    size_ += (SInt32)(1 * count);
  }
  if (self.hasAttachData) {
    size_ += computeDataSize(20, self.attachData);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (IMGetMsgByIdReq*) parseFromData:(NSData*) data {
  return (IMGetMsgByIdReq*)[[[IMGetMsgByIdReq builder] mergeFromData:data] build];
}
+ (IMGetMsgByIdReq*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMGetMsgByIdReq*)[[[IMGetMsgByIdReq builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (IMGetMsgByIdReq*) parseFromInputStream:(NSInputStream*) input {
  return (IMGetMsgByIdReq*)[[[IMGetMsgByIdReq builder] mergeFromInputStream:input] build];
}
+ (IMGetMsgByIdReq*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMGetMsgByIdReq*)[[[IMGetMsgByIdReq builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (IMGetMsgByIdReq*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (IMGetMsgByIdReq*)[[[IMGetMsgByIdReq builder] mergeFromCodedInputStream:input] build];
}
+ (IMGetMsgByIdReq*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMGetMsgByIdReq*)[[[IMGetMsgByIdReq builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (IMGetMsgByIdReqBuilder*) builder {
  return [[IMGetMsgByIdReqBuilder alloc] init];
}
+ (IMGetMsgByIdReqBuilder*) builderWithPrototype:(IMGetMsgByIdReq*) prototype {
  return [[IMGetMsgByIdReq builder] mergeFrom:prototype];
}
- (IMGetMsgByIdReqBuilder*) builder {
  return [IMGetMsgByIdReq builder];
}
- (IMGetMsgByIdReqBuilder*) toBuilder {
  return [IMGetMsgByIdReq builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasUserId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"userId", [NSNumber numberWithInteger:self.userId]];
  }
  if (self.hasSessionType) {
    [output appendFormat:@"%@%@: %@\n", indent, @"sessionType", NSStringFromSessionType(self.sessionType)];
  }
  if (self.hasSessionId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"sessionId", [NSNumber numberWithInteger:self.sessionId]];
  }
  [self.msgIdListArray enumerateObjectsUsingBlock:^(id obj, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@: %@\n", indent, @"msgIdList", obj];
  }];
  if (self.hasAttachData) {
    [output appendFormat:@"%@%@: %@\n", indent, @"attachData", self.attachData];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasUserId) {
    [dictionary setObject: [NSNumber numberWithInteger:self.userId] forKey: @"userId"];
  }
  if (self.hasSessionType) {
    [dictionary setObject: @(self.sessionType) forKey: @"sessionType"];
  }
  if (self.hasSessionId) {
    [dictionary setObject: [NSNumber numberWithInteger:self.sessionId] forKey: @"sessionId"];
  }
  NSMutableArray * msgIdListArrayArray = [NSMutableArray new];
  NSUInteger msgIdListArrayCount=self.msgIdListArray.count;
  for(int i=0;i<msgIdListArrayCount;i++){
    [msgIdListArrayArray addObject: @([self.msgIdListArray uint32AtIndex:i])];
  }
  [dictionary setObject: msgIdListArrayArray forKey: @"msgIdList"];
  if (self.hasAttachData) {
    [dictionary setObject: self.attachData forKey: @"attachData"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[IMGetMsgByIdReq class]]) {
    return NO;
  }
  IMGetMsgByIdReq *otherMessage = other;
  return
      self.hasUserId == otherMessage.hasUserId &&
      (!self.hasUserId || self.userId == otherMessage.userId) &&
      self.hasSessionType == otherMessage.hasSessionType &&
      (!self.hasSessionType || self.sessionType == otherMessage.sessionType) &&
      self.hasSessionId == otherMessage.hasSessionId &&
      (!self.hasSessionId || self.sessionId == otherMessage.sessionId) &&
      [self.msgIdListArray isEqualToArray:otherMessage.msgIdListArray] &&
      self.hasAttachData == otherMessage.hasAttachData &&
      (!self.hasAttachData || [self.attachData isEqual:otherMessage.attachData]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasUserId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.userId] hash];
  }
  if (self.hasSessionType) {
    hashCode = hashCode * 31 + self.sessionType;
  }
  if (self.hasSessionId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.sessionId] hash];
  }
  [self.msgIdListArray enumerateObjectsUsingBlock:^(NSNumber *obj, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [obj longValue];
  }];
  if (self.hasAttachData) {
    hashCode = hashCode * 31 + [self.attachData hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface IMGetMsgByIdReqBuilder()
@property (strong) IMGetMsgByIdReq* resultImgetMsgByIdReq;
@end

@implementation IMGetMsgByIdReqBuilder
@synthesize resultImgetMsgByIdReq;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultImgetMsgByIdReq = [[IMGetMsgByIdReq alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultImgetMsgByIdReq;
}
- (IMGetMsgByIdReqBuilder*) clear {
  self.resultImgetMsgByIdReq = [[IMGetMsgByIdReq alloc] init];
  return self;
}
- (IMGetMsgByIdReqBuilder*) clone {
  return [IMGetMsgByIdReq builderWithPrototype:resultImgetMsgByIdReq];
}
- (IMGetMsgByIdReq*) defaultInstance {
  return [IMGetMsgByIdReq defaultInstance];
}
- (IMGetMsgByIdReq*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (IMGetMsgByIdReq*) buildPartial {
  IMGetMsgByIdReq* returnMe = resultImgetMsgByIdReq;
  self.resultImgetMsgByIdReq = nil;
  return returnMe;
}
- (IMGetMsgByIdReqBuilder*) mergeFrom:(IMGetMsgByIdReq*) other {
  if (other == [IMGetMsgByIdReq defaultInstance]) {
    return self;
  }
  if (other.hasUserId) {
    [self setUserId:other.userId];
  }
  if (other.hasSessionType) {
    [self setSessionType:other.sessionType];
  }
  if (other.hasSessionId) {
    [self setSessionId:other.sessionId];
  }
  if (other.msgIdListArray.count > 0) {
    if (resultImgetMsgByIdReq.msgIdListArray == nil) {
      resultImgetMsgByIdReq.msgIdListArray = [other.msgIdListArray copy];
    } else {
      [resultImgetMsgByIdReq.msgIdListArray appendArray:other.msgIdListArray];
    }
  }
  if (other.hasAttachData) {
    [self setAttachData:other.attachData];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (IMGetMsgByIdReqBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (IMGetMsgByIdReqBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setUserId:[input readUInt32]];
        break;
      }
      case 16: {
        SessionType value = (SessionType)[input readEnum];
        if (SessionTypeIsValidValue(value)) {
          [self setSessionType:value];
        } else {
          [unknownFields mergeVarintField:2 value:value];
        }
        break;
      }
      case 24: {
        [self setSessionId:[input readUInt32]];
        break;
      }
      case 32: {
        [self addMsgIdList:[input readUInt32]];
        break;
      }
      case 162: {
        [self setAttachData:[input readData]];
        break;
      }
    }
  }
}
- (BOOL) hasUserId {
  return resultImgetMsgByIdReq.hasUserId;
}
- (UInt32) userId {
  return resultImgetMsgByIdReq.userId;
}
- (IMGetMsgByIdReqBuilder*) setUserId:(UInt32) value {
  resultImgetMsgByIdReq.hasUserId = YES;
  resultImgetMsgByIdReq.userId = value;
  return self;
}
- (IMGetMsgByIdReqBuilder*) clearUserId {
  resultImgetMsgByIdReq.hasUserId = NO;
  resultImgetMsgByIdReq.userId = 0;
  return self;
}
- (BOOL) hasSessionType {
  return resultImgetMsgByIdReq.hasSessionType;
}
- (SessionType) sessionType {
  return resultImgetMsgByIdReq.sessionType;
}
- (IMGetMsgByIdReqBuilder*) setSessionType:(SessionType) value {
  resultImgetMsgByIdReq.hasSessionType = YES;
  resultImgetMsgByIdReq.sessionType = value;
  return self;
}
- (IMGetMsgByIdReqBuilder*) clearSessionType {
  resultImgetMsgByIdReq.hasSessionType = NO;
  resultImgetMsgByIdReq.sessionType = SessionTypeSessionTypeSingle;
  return self;
}
- (BOOL) hasSessionId {
  return resultImgetMsgByIdReq.hasSessionId;
}
- (UInt32) sessionId {
  return resultImgetMsgByIdReq.sessionId;
}
- (IMGetMsgByIdReqBuilder*) setSessionId:(UInt32) value {
  resultImgetMsgByIdReq.hasSessionId = YES;
  resultImgetMsgByIdReq.sessionId = value;
  return self;
}
- (IMGetMsgByIdReqBuilder*) clearSessionId {
  resultImgetMsgByIdReq.hasSessionId = NO;
  resultImgetMsgByIdReq.sessionId = 0;
  return self;
}
- (PBAppendableArray *)msgIdList {
  return resultImgetMsgByIdReq.msgIdListArray;
}
- (UInt32)msgIdListAtIndex:(NSUInteger)index {
  return [resultImgetMsgByIdReq msgIdListAtIndex:index];
}
- (IMGetMsgByIdReqBuilder *)addMsgIdList:(UInt32)value {
  if (resultImgetMsgByIdReq.msgIdListArray == nil) {
    resultImgetMsgByIdReq.msgIdListArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeUInt32];
  }
  [resultImgetMsgByIdReq.msgIdListArray addUint32:value];
  return self;
}
- (IMGetMsgByIdReqBuilder *)setMsgIdListArray:(NSArray *)array {
  resultImgetMsgByIdReq.msgIdListArray = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeUInt32];
  return self;
}
- (IMGetMsgByIdReqBuilder *)setMsgIdListValues:(const UInt32 *)values count:(NSUInteger)count {
  resultImgetMsgByIdReq.msgIdListArray = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeUInt32];
  return self;
}
- (IMGetMsgByIdReqBuilder *)clearMsgIdList {
  resultImgetMsgByIdReq.msgIdListArray = nil;
  return self;
}
- (BOOL) hasAttachData {
  return resultImgetMsgByIdReq.hasAttachData;
}
- (NSData*) attachData {
  return resultImgetMsgByIdReq.attachData;
}
- (IMGetMsgByIdReqBuilder*) setAttachData:(NSData*) value {
  resultImgetMsgByIdReq.hasAttachData = YES;
  resultImgetMsgByIdReq.attachData = value;
  return self;
}
- (IMGetMsgByIdReqBuilder*) clearAttachData {
  resultImgetMsgByIdReq.hasAttachData = NO;
  resultImgetMsgByIdReq.attachData = [NSData data];
  return self;
}
@end

@interface IMGetMsgByIdRsp ()
@property UInt32 userId;
@property SessionType sessionType;
@property UInt32 sessionId;
@property (strong) NSMutableArray * msgListArray;
@property (strong) NSData* attachData;
@end

@implementation IMGetMsgByIdRsp

- (BOOL) hasUserId {
  return !!hasUserId_;
}
- (void) setHasUserId:(BOOL) _value_ {
  hasUserId_ = !!_value_;
}
@synthesize userId;
- (BOOL) hasSessionType {
  return !!hasSessionType_;
}
- (void) setHasSessionType:(BOOL) _value_ {
  hasSessionType_ = !!_value_;
}
@synthesize sessionType;
- (BOOL) hasSessionId {
  return !!hasSessionId_;
}
- (void) setHasSessionId:(BOOL) _value_ {
  hasSessionId_ = !!_value_;
}
@synthesize sessionId;
@synthesize msgListArray;
@dynamic msgList;
- (BOOL) hasAttachData {
  return !!hasAttachData_;
}
- (void) setHasAttachData:(BOOL) _value_ {
  hasAttachData_ = !!_value_;
}
@synthesize attachData;
- (instancetype) init {
  if ((self = [super init])) {
    self.userId = 0;
    self.sessionType = SessionTypeSessionTypeSingle;
    self.sessionId = 0;
    self.attachData = [NSData data];
  }
  return self;
}
static IMGetMsgByIdRsp* defaultIMGetMsgByIdRspInstance = nil;
+ (void) initialize {
  if (self == [IMGetMsgByIdRsp class]) {
    defaultIMGetMsgByIdRspInstance = [[IMGetMsgByIdRsp alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultIMGetMsgByIdRspInstance;
}
- (instancetype) defaultInstance {
  return defaultIMGetMsgByIdRspInstance;
}
- (NSArray *)msgList {
  return msgListArray;
}
- (MsgInfo*)msgListAtIndex:(NSUInteger)index {
  return [msgListArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  if (!self.hasUserId) {
    return NO;
  }
  if (!self.hasSessionType) {
    return NO;
  }
  if (!self.hasSessionId) {
    return NO;
  }
  __block BOOL isInitmsgList = YES;
   [self.msgList enumerateObjectsUsingBlock:^(MsgInfo *element, NSUInteger idx, BOOL *stop) {
    if (!element.isInitialized) {
      isInitmsgList = NO;
      *stop = YES;
    }
  }];
  if (!isInitmsgList) return isInitmsgList;
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasUserId) {
    [output writeUInt32:1 value:self.userId];
  }
  if (self.hasSessionType) {
    [output writeEnum:2 value:self.sessionType];
  }
  if (self.hasSessionId) {
    [output writeUInt32:3 value:self.sessionId];
  }
  [self.msgListArray enumerateObjectsUsingBlock:^(MsgInfo *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:4 value:element];
  }];
  if (self.hasAttachData) {
    [output writeData:20 value:self.attachData];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasUserId) {
    size_ += computeUInt32Size(1, self.userId);
  }
  if (self.hasSessionType) {
    size_ += computeEnumSize(2, self.sessionType);
  }
  if (self.hasSessionId) {
    size_ += computeUInt32Size(3, self.sessionId);
  }
  [self.msgListArray enumerateObjectsUsingBlock:^(MsgInfo *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(4, element);
  }];
  if (self.hasAttachData) {
    size_ += computeDataSize(20, self.attachData);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (IMGetMsgByIdRsp*) parseFromData:(NSData*) data {
  return (IMGetMsgByIdRsp*)[[[IMGetMsgByIdRsp builder] mergeFromData:data] build];
}
+ (IMGetMsgByIdRsp*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMGetMsgByIdRsp*)[[[IMGetMsgByIdRsp builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (IMGetMsgByIdRsp*) parseFromInputStream:(NSInputStream*) input {
  return (IMGetMsgByIdRsp*)[[[IMGetMsgByIdRsp builder] mergeFromInputStream:input] build];
}
+ (IMGetMsgByIdRsp*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMGetMsgByIdRsp*)[[[IMGetMsgByIdRsp builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (IMGetMsgByIdRsp*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (IMGetMsgByIdRsp*)[[[IMGetMsgByIdRsp builder] mergeFromCodedInputStream:input] build];
}
+ (IMGetMsgByIdRsp*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMGetMsgByIdRsp*)[[[IMGetMsgByIdRsp builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (IMGetMsgByIdRspBuilder*) builder {
  return [[IMGetMsgByIdRspBuilder alloc] init];
}
+ (IMGetMsgByIdRspBuilder*) builderWithPrototype:(IMGetMsgByIdRsp*) prototype {
  return [[IMGetMsgByIdRsp builder] mergeFrom:prototype];
}
- (IMGetMsgByIdRspBuilder*) builder {
  return [IMGetMsgByIdRsp builder];
}
- (IMGetMsgByIdRspBuilder*) toBuilder {
  return [IMGetMsgByIdRsp builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasUserId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"userId", [NSNumber numberWithInteger:self.userId]];
  }
  if (self.hasSessionType) {
    [output appendFormat:@"%@%@: %@\n", indent, @"sessionType", NSStringFromSessionType(self.sessionType)];
  }
  if (self.hasSessionId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"sessionId", [NSNumber numberWithInteger:self.sessionId]];
  }
  [self.msgListArray enumerateObjectsUsingBlock:^(MsgInfo *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"msgList"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  if (self.hasAttachData) {
    [output appendFormat:@"%@%@: %@\n", indent, @"attachData", self.attachData];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasUserId) {
    [dictionary setObject: [NSNumber numberWithInteger:self.userId] forKey: @"userId"];
  }
  if (self.hasSessionType) {
    [dictionary setObject: @(self.sessionType) forKey: @"sessionType"];
  }
  if (self.hasSessionId) {
    [dictionary setObject: [NSNumber numberWithInteger:self.sessionId] forKey: @"sessionId"];
  }
  for (MsgInfo* element in self.msgListArray) {
    NSMutableDictionary *elementDictionary = [NSMutableDictionary dictionary];
    [element storeInDictionary:elementDictionary];
    [dictionary setObject:[NSDictionary dictionaryWithDictionary:elementDictionary] forKey:@"msgList"];
  }
  if (self.hasAttachData) {
    [dictionary setObject: self.attachData forKey: @"attachData"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[IMGetMsgByIdRsp class]]) {
    return NO;
  }
  IMGetMsgByIdRsp *otherMessage = other;
  return
      self.hasUserId == otherMessage.hasUserId &&
      (!self.hasUserId || self.userId == otherMessage.userId) &&
      self.hasSessionType == otherMessage.hasSessionType &&
      (!self.hasSessionType || self.sessionType == otherMessage.sessionType) &&
      self.hasSessionId == otherMessage.hasSessionId &&
      (!self.hasSessionId || self.sessionId == otherMessage.sessionId) &&
      [self.msgListArray isEqualToArray:otherMessage.msgListArray] &&
      self.hasAttachData == otherMessage.hasAttachData &&
      (!self.hasAttachData || [self.attachData isEqual:otherMessage.attachData]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasUserId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.userId] hash];
  }
  if (self.hasSessionType) {
    hashCode = hashCode * 31 + self.sessionType;
  }
  if (self.hasSessionId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.sessionId] hash];
  }
  [self.msgListArray enumerateObjectsUsingBlock:^(MsgInfo *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  if (self.hasAttachData) {
    hashCode = hashCode * 31 + [self.attachData hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface IMGetMsgByIdRspBuilder()
@property (strong) IMGetMsgByIdRsp* resultImgetMsgByIdRsp;
@end

@implementation IMGetMsgByIdRspBuilder
@synthesize resultImgetMsgByIdRsp;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultImgetMsgByIdRsp = [[IMGetMsgByIdRsp alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultImgetMsgByIdRsp;
}
- (IMGetMsgByIdRspBuilder*) clear {
  self.resultImgetMsgByIdRsp = [[IMGetMsgByIdRsp alloc] init];
  return self;
}
- (IMGetMsgByIdRspBuilder*) clone {
  return [IMGetMsgByIdRsp builderWithPrototype:resultImgetMsgByIdRsp];
}
- (IMGetMsgByIdRsp*) defaultInstance {
  return [IMGetMsgByIdRsp defaultInstance];
}
- (IMGetMsgByIdRsp*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (IMGetMsgByIdRsp*) buildPartial {
  IMGetMsgByIdRsp* returnMe = resultImgetMsgByIdRsp;
  self.resultImgetMsgByIdRsp = nil;
  return returnMe;
}
- (IMGetMsgByIdRspBuilder*) mergeFrom:(IMGetMsgByIdRsp*) other {
  if (other == [IMGetMsgByIdRsp defaultInstance]) {
    return self;
  }
  if (other.hasUserId) {
    [self setUserId:other.userId];
  }
  if (other.hasSessionType) {
    [self setSessionType:other.sessionType];
  }
  if (other.hasSessionId) {
    [self setSessionId:other.sessionId];
  }
  if (other.msgListArray.count > 0) {
    if (resultImgetMsgByIdRsp.msgListArray == nil) {
      resultImgetMsgByIdRsp.msgListArray = [[NSMutableArray alloc] initWithArray:other.msgListArray];
    } else {
      [resultImgetMsgByIdRsp.msgListArray addObjectsFromArray:other.msgListArray];
    }
  }
  if (other.hasAttachData) {
    [self setAttachData:other.attachData];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (IMGetMsgByIdRspBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (IMGetMsgByIdRspBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setUserId:[input readUInt32]];
        break;
      }
      case 16: {
        SessionType value = (SessionType)[input readEnum];
        if (SessionTypeIsValidValue(value)) {
          [self setSessionType:value];
        } else {
          [unknownFields mergeVarintField:2 value:value];
        }
        break;
      }
      case 24: {
        [self setSessionId:[input readUInt32]];
        break;
      }
      case 34: {
        MsgInfoBuilder* subBuilder = [MsgInfo builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addMsgList:[subBuilder buildPartial]];
        break;
      }
      case 162: {
        [self setAttachData:[input readData]];
        break;
      }
    }
  }
}
- (BOOL) hasUserId {
  return resultImgetMsgByIdRsp.hasUserId;
}
- (UInt32) userId {
  return resultImgetMsgByIdRsp.userId;
}
- (IMGetMsgByIdRspBuilder*) setUserId:(UInt32) value {
  resultImgetMsgByIdRsp.hasUserId = YES;
  resultImgetMsgByIdRsp.userId = value;
  return self;
}
- (IMGetMsgByIdRspBuilder*) clearUserId {
  resultImgetMsgByIdRsp.hasUserId = NO;
  resultImgetMsgByIdRsp.userId = 0;
  return self;
}
- (BOOL) hasSessionType {
  return resultImgetMsgByIdRsp.hasSessionType;
}
- (SessionType) sessionType {
  return resultImgetMsgByIdRsp.sessionType;
}
- (IMGetMsgByIdRspBuilder*) setSessionType:(SessionType) value {
  resultImgetMsgByIdRsp.hasSessionType = YES;
  resultImgetMsgByIdRsp.sessionType = value;
  return self;
}
- (IMGetMsgByIdRspBuilder*) clearSessionType {
  resultImgetMsgByIdRsp.hasSessionType = NO;
  resultImgetMsgByIdRsp.sessionType = SessionTypeSessionTypeSingle;
  return self;
}
- (BOOL) hasSessionId {
  return resultImgetMsgByIdRsp.hasSessionId;
}
- (UInt32) sessionId {
  return resultImgetMsgByIdRsp.sessionId;
}
- (IMGetMsgByIdRspBuilder*) setSessionId:(UInt32) value {
  resultImgetMsgByIdRsp.hasSessionId = YES;
  resultImgetMsgByIdRsp.sessionId = value;
  return self;
}
- (IMGetMsgByIdRspBuilder*) clearSessionId {
  resultImgetMsgByIdRsp.hasSessionId = NO;
  resultImgetMsgByIdRsp.sessionId = 0;
  return self;
}
- (NSMutableArray *)msgList {
  return resultImgetMsgByIdRsp.msgListArray;
}
- (MsgInfo*)msgListAtIndex:(NSUInteger)index {
  return [resultImgetMsgByIdRsp msgListAtIndex:index];
}
- (IMGetMsgByIdRspBuilder *)addMsgList:(MsgInfo*)value {
  if (resultImgetMsgByIdRsp.msgListArray == nil) {
    resultImgetMsgByIdRsp.msgListArray = [[NSMutableArray alloc]init];
  }
  [resultImgetMsgByIdRsp.msgListArray addObject:value];
  return self;
}
- (IMGetMsgByIdRspBuilder *)setMsgListArray:(NSArray *)array {
  resultImgetMsgByIdRsp.msgListArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (IMGetMsgByIdRspBuilder *)clearMsgList {
  resultImgetMsgByIdRsp.msgListArray = nil;
  return self;
}
- (BOOL) hasAttachData {
  return resultImgetMsgByIdRsp.hasAttachData;
}
- (NSData*) attachData {
  return resultImgetMsgByIdRsp.attachData;
}
- (IMGetMsgByIdRspBuilder*) setAttachData:(NSData*) value {
  resultImgetMsgByIdRsp.hasAttachData = YES;
  resultImgetMsgByIdRsp.attachData = value;
  return self;
}
- (IMGetMsgByIdRspBuilder*) clearAttachData {
  resultImgetMsgByIdRsp.hasAttachData = NO;
  resultImgetMsgByIdRsp.attachData = [NSData data];
  return self;
}
@end


// @@protoc_insertion_point(global_scope)
