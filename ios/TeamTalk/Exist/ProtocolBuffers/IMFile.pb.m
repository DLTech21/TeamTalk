// Generated by the protocol buffer compiler.  DO NOT EDIT!

#import "IMFile.pb.h"
// @@protoc_insertion_point(imports)

@implementation ImfileRoot
static PBExtensionRegistry* extensionRegistry = nil;
+ (PBExtensionRegistry*) extensionRegistry {
  return extensionRegistry;
}

+ (void) initialize {
  if (self == [ImfileRoot class]) {
    PBMutableExtensionRegistry* registry = [PBMutableExtensionRegistry registry];
    [self registerAllExtensions:registry];
    [ImbaseDefineRoot registerAllExtensions:registry];
    extensionRegistry = registry;
  }
}
+ (void) registerAllExtensions:(PBMutableExtensionRegistry*) registry {
}
@end

@interface IMFileLoginReq ()
@property UInt32 userId;
@property (strong) NSString* taskId;
@property ClientFileRole fileRole;
@end

@implementation IMFileLoginReq

- (BOOL) hasUserId {
  return !!hasUserId_;
}
- (void) setHasUserId:(BOOL) _value_ {
  hasUserId_ = !!_value_;
}
@synthesize userId;
- (BOOL) hasTaskId {
  return !!hasTaskId_;
}
- (void) setHasTaskId:(BOOL) _value_ {
  hasTaskId_ = !!_value_;
}
@synthesize taskId;
- (BOOL) hasFileRole {
  return !!hasFileRole_;
}
- (void) setHasFileRole:(BOOL) _value_ {
  hasFileRole_ = !!_value_;
}
@synthesize fileRole;
- (instancetype) init {
  if ((self = [super init])) {
    self.userId = 0;
    self.taskId = @"";
    self.fileRole = ClientFileRoleClientRealtimeSender;
  }
  return self;
}
static IMFileLoginReq* defaultIMFileLoginReqInstance = nil;
+ (void) initialize {
  if (self == [IMFileLoginReq class]) {
    defaultIMFileLoginReqInstance = [[IMFileLoginReq alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultIMFileLoginReqInstance;
}
- (instancetype) defaultInstance {
  return defaultIMFileLoginReqInstance;
}
- (BOOL) isInitialized {
  if (!self.hasUserId) {
    return NO;
  }
  if (!self.hasTaskId) {
    return NO;
  }
  if (!self.hasFileRole) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasUserId) {
    [output writeUInt32:1 value:self.userId];
  }
  if (self.hasTaskId) {
    [output writeString:2 value:self.taskId];
  }
  if (self.hasFileRole) {
    [output writeEnum:3 value:self.fileRole];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasUserId) {
    size_ += computeUInt32Size(1, self.userId);
  }
  if (self.hasTaskId) {
    size_ += computeStringSize(2, self.taskId);
  }
  if (self.hasFileRole) {
    size_ += computeEnumSize(3, self.fileRole);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (IMFileLoginReq*) parseFromData:(NSData*) data {
  return (IMFileLoginReq*)[[[IMFileLoginReq builder] mergeFromData:data] build];
}
+ (IMFileLoginReq*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMFileLoginReq*)[[[IMFileLoginReq builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (IMFileLoginReq*) parseFromInputStream:(NSInputStream*) input {
  return (IMFileLoginReq*)[[[IMFileLoginReq builder] mergeFromInputStream:input] build];
}
+ (IMFileLoginReq*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMFileLoginReq*)[[[IMFileLoginReq builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (IMFileLoginReq*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (IMFileLoginReq*)[[[IMFileLoginReq builder] mergeFromCodedInputStream:input] build];
}
+ (IMFileLoginReq*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMFileLoginReq*)[[[IMFileLoginReq builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (IMFileLoginReqBuilder*) builder {
  return [[IMFileLoginReqBuilder alloc] init];
}
+ (IMFileLoginReqBuilder*) builderWithPrototype:(IMFileLoginReq*) prototype {
  return [[IMFileLoginReq builder] mergeFrom:prototype];
}
- (IMFileLoginReqBuilder*) builder {
  return [IMFileLoginReq builder];
}
- (IMFileLoginReqBuilder*) toBuilder {
  return [IMFileLoginReq builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasUserId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"userId", [NSNumber numberWithInteger:self.userId]];
  }
  if (self.hasTaskId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"taskId", self.taskId];
  }
  if (self.hasFileRole) {
    [output appendFormat:@"%@%@: %@\n", indent, @"fileRole", NSStringFromClientFileRole(self.fileRole)];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasUserId) {
    [dictionary setObject: [NSNumber numberWithInteger:self.userId] forKey: @"userId"];
  }
  if (self.hasTaskId) {
    [dictionary setObject: self.taskId forKey: @"taskId"];
  }
  if (self.hasFileRole) {
    [dictionary setObject: @(self.fileRole) forKey: @"fileRole"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[IMFileLoginReq class]]) {
    return NO;
  }
  IMFileLoginReq *otherMessage = other;
  return
      self.hasUserId == otherMessage.hasUserId &&
      (!self.hasUserId || self.userId == otherMessage.userId) &&
      self.hasTaskId == otherMessage.hasTaskId &&
      (!self.hasTaskId || [self.taskId isEqual:otherMessage.taskId]) &&
      self.hasFileRole == otherMessage.hasFileRole &&
      (!self.hasFileRole || self.fileRole == otherMessage.fileRole) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasUserId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.userId] hash];
  }
  if (self.hasTaskId) {
    hashCode = hashCode * 31 + [self.taskId hash];
  }
  if (self.hasFileRole) {
    hashCode = hashCode * 31 + self.fileRole;
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface IMFileLoginReqBuilder()
@property (strong) IMFileLoginReq* resultImfileLoginReq;
@end

@implementation IMFileLoginReqBuilder
@synthesize resultImfileLoginReq;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultImfileLoginReq = [[IMFileLoginReq alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultImfileLoginReq;
}
- (IMFileLoginReqBuilder*) clear {
  self.resultImfileLoginReq = [[IMFileLoginReq alloc] init];
  return self;
}
- (IMFileLoginReqBuilder*) clone {
  return [IMFileLoginReq builderWithPrototype:resultImfileLoginReq];
}
- (IMFileLoginReq*) defaultInstance {
  return [IMFileLoginReq defaultInstance];
}
- (IMFileLoginReq*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (IMFileLoginReq*) buildPartial {
  IMFileLoginReq* returnMe = resultImfileLoginReq;
  self.resultImfileLoginReq = nil;
  return returnMe;
}
- (IMFileLoginReqBuilder*) mergeFrom:(IMFileLoginReq*) other {
  if (other == [IMFileLoginReq defaultInstance]) {
    return self;
  }
  if (other.hasUserId) {
    [self setUserId:other.userId];
  }
  if (other.hasTaskId) {
    [self setTaskId:other.taskId];
  }
  if (other.hasFileRole) {
    [self setFileRole:other.fileRole];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (IMFileLoginReqBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (IMFileLoginReqBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setUserId:[input readUInt32]];
        break;
      }
      case 18: {
        [self setTaskId:[input readString]];
        break;
      }
      case 24: {
        ClientFileRole value = (ClientFileRole)[input readEnum];
        if (ClientFileRoleIsValidValue(value)) {
          [self setFileRole:value];
        } else {
          [unknownFields mergeVarintField:3 value:value];
        }
        break;
      }
    }
  }
}
- (BOOL) hasUserId {
  return resultImfileLoginReq.hasUserId;
}
- (UInt32) userId {
  return resultImfileLoginReq.userId;
}
- (IMFileLoginReqBuilder*) setUserId:(UInt32) value {
  resultImfileLoginReq.hasUserId = YES;
  resultImfileLoginReq.userId = value;
  return self;
}
- (IMFileLoginReqBuilder*) clearUserId {
  resultImfileLoginReq.hasUserId = NO;
  resultImfileLoginReq.userId = 0;
  return self;
}
- (BOOL) hasTaskId {
  return resultImfileLoginReq.hasTaskId;
}
- (NSString*) taskId {
  return resultImfileLoginReq.taskId;
}
- (IMFileLoginReqBuilder*) setTaskId:(NSString*) value {
  resultImfileLoginReq.hasTaskId = YES;
  resultImfileLoginReq.taskId = value;
  return self;
}
- (IMFileLoginReqBuilder*) clearTaskId {
  resultImfileLoginReq.hasTaskId = NO;
  resultImfileLoginReq.taskId = @"";
  return self;
}
- (BOOL) hasFileRole {
  return resultImfileLoginReq.hasFileRole;
}
- (ClientFileRole) fileRole {
  return resultImfileLoginReq.fileRole;
}
- (IMFileLoginReqBuilder*) setFileRole:(ClientFileRole) value {
  resultImfileLoginReq.hasFileRole = YES;
  resultImfileLoginReq.fileRole = value;
  return self;
}
- (IMFileLoginReqBuilder*) clearFileRole {
  resultImfileLoginReq.hasFileRole = NO;
  resultImfileLoginReq.fileRole = ClientFileRoleClientRealtimeSender;
  return self;
}
@end

@interface IMFileLoginRsp ()
@property UInt32 resultCode;
@property (strong) NSString* taskId;
@end

@implementation IMFileLoginRsp

- (BOOL) hasResultCode {
  return !!hasResultCode_;
}
- (void) setHasResultCode:(BOOL) _value_ {
  hasResultCode_ = !!_value_;
}
@synthesize resultCode;
- (BOOL) hasTaskId {
  return !!hasTaskId_;
}
- (void) setHasTaskId:(BOOL) _value_ {
  hasTaskId_ = !!_value_;
}
@synthesize taskId;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultCode = 0;
    self.taskId = @"";
  }
  return self;
}
static IMFileLoginRsp* defaultIMFileLoginRspInstance = nil;
+ (void) initialize {
  if (self == [IMFileLoginRsp class]) {
    defaultIMFileLoginRspInstance = [[IMFileLoginRsp alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultIMFileLoginRspInstance;
}
- (instancetype) defaultInstance {
  return defaultIMFileLoginRspInstance;
}
- (BOOL) isInitialized {
  if (!self.hasResultCode) {
    return NO;
  }
  if (!self.hasTaskId) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasResultCode) {
    [output writeUInt32:1 value:self.resultCode];
  }
  if (self.hasTaskId) {
    [output writeString:2 value:self.taskId];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasResultCode) {
    size_ += computeUInt32Size(1, self.resultCode);
  }
  if (self.hasTaskId) {
    size_ += computeStringSize(2, self.taskId);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (IMFileLoginRsp*) parseFromData:(NSData*) data {
  return (IMFileLoginRsp*)[[[IMFileLoginRsp builder] mergeFromData:data] build];
}
+ (IMFileLoginRsp*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMFileLoginRsp*)[[[IMFileLoginRsp builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (IMFileLoginRsp*) parseFromInputStream:(NSInputStream*) input {
  return (IMFileLoginRsp*)[[[IMFileLoginRsp builder] mergeFromInputStream:input] build];
}
+ (IMFileLoginRsp*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMFileLoginRsp*)[[[IMFileLoginRsp builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (IMFileLoginRsp*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (IMFileLoginRsp*)[[[IMFileLoginRsp builder] mergeFromCodedInputStream:input] build];
}
+ (IMFileLoginRsp*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMFileLoginRsp*)[[[IMFileLoginRsp builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (IMFileLoginRspBuilder*) builder {
  return [[IMFileLoginRspBuilder alloc] init];
}
+ (IMFileLoginRspBuilder*) builderWithPrototype:(IMFileLoginRsp*) prototype {
  return [[IMFileLoginRsp builder] mergeFrom:prototype];
}
- (IMFileLoginRspBuilder*) builder {
  return [IMFileLoginRsp builder];
}
- (IMFileLoginRspBuilder*) toBuilder {
  return [IMFileLoginRsp builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasResultCode) {
    [output appendFormat:@"%@%@: %@\n", indent, @"resultCode", [NSNumber numberWithInteger:self.resultCode]];
  }
  if (self.hasTaskId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"taskId", self.taskId];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasResultCode) {
    [dictionary setObject: [NSNumber numberWithInteger:self.resultCode] forKey: @"resultCode"];
  }
  if (self.hasTaskId) {
    [dictionary setObject: self.taskId forKey: @"taskId"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[IMFileLoginRsp class]]) {
    return NO;
  }
  IMFileLoginRsp *otherMessage = other;
  return
      self.hasResultCode == otherMessage.hasResultCode &&
      (!self.hasResultCode || self.resultCode == otherMessage.resultCode) &&
      self.hasTaskId == otherMessage.hasTaskId &&
      (!self.hasTaskId || [self.taskId isEqual:otherMessage.taskId]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasResultCode) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.resultCode] hash];
  }
  if (self.hasTaskId) {
    hashCode = hashCode * 31 + [self.taskId hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface IMFileLoginRspBuilder()
@property (strong) IMFileLoginRsp* resultImfileLoginRsp;
@end

@implementation IMFileLoginRspBuilder
@synthesize resultImfileLoginRsp;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultImfileLoginRsp = [[IMFileLoginRsp alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultImfileLoginRsp;
}
- (IMFileLoginRspBuilder*) clear {
  self.resultImfileLoginRsp = [[IMFileLoginRsp alloc] init];
  return self;
}
- (IMFileLoginRspBuilder*) clone {
  return [IMFileLoginRsp builderWithPrototype:resultImfileLoginRsp];
}
- (IMFileLoginRsp*) defaultInstance {
  return [IMFileLoginRsp defaultInstance];
}
- (IMFileLoginRsp*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (IMFileLoginRsp*) buildPartial {
  IMFileLoginRsp* returnMe = resultImfileLoginRsp;
  self.resultImfileLoginRsp = nil;
  return returnMe;
}
- (IMFileLoginRspBuilder*) mergeFrom:(IMFileLoginRsp*) other {
  if (other == [IMFileLoginRsp defaultInstance]) {
    return self;
  }
  if (other.hasResultCode) {
    [self setResultCode:other.resultCode];
  }
  if (other.hasTaskId) {
    [self setTaskId:other.taskId];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (IMFileLoginRspBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (IMFileLoginRspBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setResultCode:[input readUInt32]];
        break;
      }
      case 18: {
        [self setTaskId:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasResultCode {
  return resultImfileLoginRsp.hasResultCode;
}
- (UInt32) resultCode {
  return resultImfileLoginRsp.resultCode;
}
- (IMFileLoginRspBuilder*) setResultCode:(UInt32) value {
  resultImfileLoginRsp.hasResultCode = YES;
  resultImfileLoginRsp.resultCode = value;
  return self;
}
- (IMFileLoginRspBuilder*) clearResultCode {
  resultImfileLoginRsp.hasResultCode = NO;
  resultImfileLoginRsp.resultCode = 0;
  return self;
}
- (BOOL) hasTaskId {
  return resultImfileLoginRsp.hasTaskId;
}
- (NSString*) taskId {
  return resultImfileLoginRsp.taskId;
}
- (IMFileLoginRspBuilder*) setTaskId:(NSString*) value {
  resultImfileLoginRsp.hasTaskId = YES;
  resultImfileLoginRsp.taskId = value;
  return self;
}
- (IMFileLoginRspBuilder*) clearTaskId {
  resultImfileLoginRsp.hasTaskId = NO;
  resultImfileLoginRsp.taskId = @"";
  return self;
}
@end

@interface IMFileState ()
@property ClientFileState state;
@property (strong) NSString* taskId;
@property UInt32 userId;
@end

@implementation IMFileState

- (BOOL) hasState {
  return !!hasState_;
}
- (void) setHasState:(BOOL) _value_ {
  hasState_ = !!_value_;
}
@synthesize state;
- (BOOL) hasTaskId {
  return !!hasTaskId_;
}
- (void) setHasTaskId:(BOOL) _value_ {
  hasTaskId_ = !!_value_;
}
@synthesize taskId;
- (BOOL) hasUserId {
  return !!hasUserId_;
}
- (void) setHasUserId:(BOOL) _value_ {
  hasUserId_ = !!_value_;
}
@synthesize userId;
- (instancetype) init {
  if ((self = [super init])) {
    self.state = ClientFileStateClientFilePeerReady;
    self.taskId = @"";
    self.userId = 0;
  }
  return self;
}
static IMFileState* defaultIMFileStateInstance = nil;
+ (void) initialize {
  if (self == [IMFileState class]) {
    defaultIMFileStateInstance = [[IMFileState alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultIMFileStateInstance;
}
- (instancetype) defaultInstance {
  return defaultIMFileStateInstance;
}
- (BOOL) isInitialized {
  if (!self.hasState) {
    return NO;
  }
  if (!self.hasTaskId) {
    return NO;
  }
  if (!self.hasUserId) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasState) {
    [output writeEnum:1 value:self.state];
  }
  if (self.hasTaskId) {
    [output writeString:2 value:self.taskId];
  }
  if (self.hasUserId) {
    [output writeUInt32:3 value:self.userId];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasState) {
    size_ += computeEnumSize(1, self.state);
  }
  if (self.hasTaskId) {
    size_ += computeStringSize(2, self.taskId);
  }
  if (self.hasUserId) {
    size_ += computeUInt32Size(3, self.userId);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (IMFileState*) parseFromData:(NSData*) data {
  return (IMFileState*)[[[IMFileState builder] mergeFromData:data] build];
}
+ (IMFileState*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMFileState*)[[[IMFileState builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (IMFileState*) parseFromInputStream:(NSInputStream*) input {
  return (IMFileState*)[[[IMFileState builder] mergeFromInputStream:input] build];
}
+ (IMFileState*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMFileState*)[[[IMFileState builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (IMFileState*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (IMFileState*)[[[IMFileState builder] mergeFromCodedInputStream:input] build];
}
+ (IMFileState*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMFileState*)[[[IMFileState builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (IMFileStateBuilder*) builder {
  return [[IMFileStateBuilder alloc] init];
}
+ (IMFileStateBuilder*) builderWithPrototype:(IMFileState*) prototype {
  return [[IMFileState builder] mergeFrom:prototype];
}
- (IMFileStateBuilder*) builder {
  return [IMFileState builder];
}
- (IMFileStateBuilder*) toBuilder {
  return [IMFileState builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasState) {
    [output appendFormat:@"%@%@: %@\n", indent, @"state", NSStringFromClientFileState(self.state)];
  }
  if (self.hasTaskId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"taskId", self.taskId];
  }
  if (self.hasUserId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"userId", [NSNumber numberWithInteger:self.userId]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasState) {
    [dictionary setObject: @(self.state) forKey: @"state"];
  }
  if (self.hasTaskId) {
    [dictionary setObject: self.taskId forKey: @"taskId"];
  }
  if (self.hasUserId) {
    [dictionary setObject: [NSNumber numberWithInteger:self.userId] forKey: @"userId"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[IMFileState class]]) {
    return NO;
  }
  IMFileState *otherMessage = other;
  return
      self.hasState == otherMessage.hasState &&
      (!self.hasState || self.state == otherMessage.state) &&
      self.hasTaskId == otherMessage.hasTaskId &&
      (!self.hasTaskId || [self.taskId isEqual:otherMessage.taskId]) &&
      self.hasUserId == otherMessage.hasUserId &&
      (!self.hasUserId || self.userId == otherMessage.userId) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasState) {
    hashCode = hashCode * 31 + self.state;
  }
  if (self.hasTaskId) {
    hashCode = hashCode * 31 + [self.taskId hash];
  }
  if (self.hasUserId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.userId] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface IMFileStateBuilder()
@property (strong) IMFileState* resultImfileState;
@end

@implementation IMFileStateBuilder
@synthesize resultImfileState;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultImfileState = [[IMFileState alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultImfileState;
}
- (IMFileStateBuilder*) clear {
  self.resultImfileState = [[IMFileState alloc] init];
  return self;
}
- (IMFileStateBuilder*) clone {
  return [IMFileState builderWithPrototype:resultImfileState];
}
- (IMFileState*) defaultInstance {
  return [IMFileState defaultInstance];
}
- (IMFileState*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (IMFileState*) buildPartial {
  IMFileState* returnMe = resultImfileState;
  self.resultImfileState = nil;
  return returnMe;
}
- (IMFileStateBuilder*) mergeFrom:(IMFileState*) other {
  if (other == [IMFileState defaultInstance]) {
    return self;
  }
  if (other.hasState) {
    [self setState:other.state];
  }
  if (other.hasTaskId) {
    [self setTaskId:other.taskId];
  }
  if (other.hasUserId) {
    [self setUserId:other.userId];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (IMFileStateBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (IMFileStateBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        ClientFileState value = (ClientFileState)[input readEnum];
        if (ClientFileStateIsValidValue(value)) {
          [self setState:value];
        } else {
          [unknownFields mergeVarintField:1 value:value];
        }
        break;
      }
      case 18: {
        [self setTaskId:[input readString]];
        break;
      }
      case 24: {
        [self setUserId:[input readUInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasState {
  return resultImfileState.hasState;
}
- (ClientFileState) state {
  return resultImfileState.state;
}
- (IMFileStateBuilder*) setState:(ClientFileState) value {
  resultImfileState.hasState = YES;
  resultImfileState.state = value;
  return self;
}
- (IMFileStateBuilder*) clearState {
  resultImfileState.hasState = NO;
  resultImfileState.state = ClientFileStateClientFilePeerReady;
  return self;
}
- (BOOL) hasTaskId {
  return resultImfileState.hasTaskId;
}
- (NSString*) taskId {
  return resultImfileState.taskId;
}
- (IMFileStateBuilder*) setTaskId:(NSString*) value {
  resultImfileState.hasTaskId = YES;
  resultImfileState.taskId = value;
  return self;
}
- (IMFileStateBuilder*) clearTaskId {
  resultImfileState.hasTaskId = NO;
  resultImfileState.taskId = @"";
  return self;
}
- (BOOL) hasUserId {
  return resultImfileState.hasUserId;
}
- (UInt32) userId {
  return resultImfileState.userId;
}
- (IMFileStateBuilder*) setUserId:(UInt32) value {
  resultImfileState.hasUserId = YES;
  resultImfileState.userId = value;
  return self;
}
- (IMFileStateBuilder*) clearUserId {
  resultImfileState.hasUserId = NO;
  resultImfileState.userId = 0;
  return self;
}
@end

@interface IMFilePullDataReq ()
@property (strong) NSString* taskId;
@property UInt32 userId;
@property TransferFileType transMode;
@property UInt32 offset;
@property UInt32 dataSize;
@end

@implementation IMFilePullDataReq

- (BOOL) hasTaskId {
  return !!hasTaskId_;
}
- (void) setHasTaskId:(BOOL) _value_ {
  hasTaskId_ = !!_value_;
}
@synthesize taskId;
- (BOOL) hasUserId {
  return !!hasUserId_;
}
- (void) setHasUserId:(BOOL) _value_ {
  hasUserId_ = !!_value_;
}
@synthesize userId;
- (BOOL) hasTransMode {
  return !!hasTransMode_;
}
- (void) setHasTransMode:(BOOL) _value_ {
  hasTransMode_ = !!_value_;
}
@synthesize transMode;
- (BOOL) hasOffset {
  return !!hasOffset_;
}
- (void) setHasOffset:(BOOL) _value_ {
  hasOffset_ = !!_value_;
}
@synthesize offset;
- (BOOL) hasDataSize {
  return !!hasDataSize_;
}
- (void) setHasDataSize:(BOOL) _value_ {
  hasDataSize_ = !!_value_;
}
@synthesize dataSize;
- (instancetype) init {
  if ((self = [super init])) {
    self.taskId = @"";
    self.userId = 0;
    self.transMode = TransferFileTypeFileTypeOnline;
    self.offset = 0;
    self.dataSize = 0;
  }
  return self;
}
static IMFilePullDataReq* defaultIMFilePullDataReqInstance = nil;
+ (void) initialize {
  if (self == [IMFilePullDataReq class]) {
    defaultIMFilePullDataReqInstance = [[IMFilePullDataReq alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultIMFilePullDataReqInstance;
}
- (instancetype) defaultInstance {
  return defaultIMFilePullDataReqInstance;
}
- (BOOL) isInitialized {
  if (!self.hasTaskId) {
    return NO;
  }
  if (!self.hasUserId) {
    return NO;
  }
  if (!self.hasTransMode) {
    return NO;
  }
  if (!self.hasOffset) {
    return NO;
  }
  if (!self.hasDataSize) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasTaskId) {
    [output writeString:1 value:self.taskId];
  }
  if (self.hasUserId) {
    [output writeUInt32:2 value:self.userId];
  }
  if (self.hasTransMode) {
    [output writeEnum:3 value:self.transMode];
  }
  if (self.hasOffset) {
    [output writeUInt32:4 value:self.offset];
  }
  if (self.hasDataSize) {
    [output writeUInt32:5 value:self.dataSize];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasTaskId) {
    size_ += computeStringSize(1, self.taskId);
  }
  if (self.hasUserId) {
    size_ += computeUInt32Size(2, self.userId);
  }
  if (self.hasTransMode) {
    size_ += computeEnumSize(3, self.transMode);
  }
  if (self.hasOffset) {
    size_ += computeUInt32Size(4, self.offset);
  }
  if (self.hasDataSize) {
    size_ += computeUInt32Size(5, self.dataSize);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (IMFilePullDataReq*) parseFromData:(NSData*) data {
  return (IMFilePullDataReq*)[[[IMFilePullDataReq builder] mergeFromData:data] build];
}
+ (IMFilePullDataReq*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMFilePullDataReq*)[[[IMFilePullDataReq builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (IMFilePullDataReq*) parseFromInputStream:(NSInputStream*) input {
  return (IMFilePullDataReq*)[[[IMFilePullDataReq builder] mergeFromInputStream:input] build];
}
+ (IMFilePullDataReq*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMFilePullDataReq*)[[[IMFilePullDataReq builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (IMFilePullDataReq*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (IMFilePullDataReq*)[[[IMFilePullDataReq builder] mergeFromCodedInputStream:input] build];
}
+ (IMFilePullDataReq*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMFilePullDataReq*)[[[IMFilePullDataReq builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (IMFilePullDataReqBuilder*) builder {
  return [[IMFilePullDataReqBuilder alloc] init];
}
+ (IMFilePullDataReqBuilder*) builderWithPrototype:(IMFilePullDataReq*) prototype {
  return [[IMFilePullDataReq builder] mergeFrom:prototype];
}
- (IMFilePullDataReqBuilder*) builder {
  return [IMFilePullDataReq builder];
}
- (IMFilePullDataReqBuilder*) toBuilder {
  return [IMFilePullDataReq builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasTaskId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"taskId", self.taskId];
  }
  if (self.hasUserId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"userId", [NSNumber numberWithInteger:self.userId]];
  }
  if (self.hasTransMode) {
    [output appendFormat:@"%@%@: %@\n", indent, @"transMode", NSStringFromTransferFileType(self.transMode)];
  }
  if (self.hasOffset) {
    [output appendFormat:@"%@%@: %@\n", indent, @"offset", [NSNumber numberWithInteger:self.offset]];
  }
  if (self.hasDataSize) {
    [output appendFormat:@"%@%@: %@\n", indent, @"dataSize", [NSNumber numberWithInteger:self.dataSize]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasTaskId) {
    [dictionary setObject: self.taskId forKey: @"taskId"];
  }
  if (self.hasUserId) {
    [dictionary setObject: [NSNumber numberWithInteger:self.userId] forKey: @"userId"];
  }
  if (self.hasTransMode) {
    [dictionary setObject: @(self.transMode) forKey: @"transMode"];
  }
  if (self.hasOffset) {
    [dictionary setObject: [NSNumber numberWithInteger:self.offset] forKey: @"offset"];
  }
  if (self.hasDataSize) {
    [dictionary setObject: [NSNumber numberWithInteger:self.dataSize] forKey: @"dataSize"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[IMFilePullDataReq class]]) {
    return NO;
  }
  IMFilePullDataReq *otherMessage = other;
  return
      self.hasTaskId == otherMessage.hasTaskId &&
      (!self.hasTaskId || [self.taskId isEqual:otherMessage.taskId]) &&
      self.hasUserId == otherMessage.hasUserId &&
      (!self.hasUserId || self.userId == otherMessage.userId) &&
      self.hasTransMode == otherMessage.hasTransMode &&
      (!self.hasTransMode || self.transMode == otherMessage.transMode) &&
      self.hasOffset == otherMessage.hasOffset &&
      (!self.hasOffset || self.offset == otherMessage.offset) &&
      self.hasDataSize == otherMessage.hasDataSize &&
      (!self.hasDataSize || self.dataSize == otherMessage.dataSize) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasTaskId) {
    hashCode = hashCode * 31 + [self.taskId hash];
  }
  if (self.hasUserId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.userId] hash];
  }
  if (self.hasTransMode) {
    hashCode = hashCode * 31 + self.transMode;
  }
  if (self.hasOffset) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.offset] hash];
  }
  if (self.hasDataSize) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.dataSize] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface IMFilePullDataReqBuilder()
@property (strong) IMFilePullDataReq* resultImfilePullDataReq;
@end

@implementation IMFilePullDataReqBuilder
@synthesize resultImfilePullDataReq;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultImfilePullDataReq = [[IMFilePullDataReq alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultImfilePullDataReq;
}
- (IMFilePullDataReqBuilder*) clear {
  self.resultImfilePullDataReq = [[IMFilePullDataReq alloc] init];
  return self;
}
- (IMFilePullDataReqBuilder*) clone {
  return [IMFilePullDataReq builderWithPrototype:resultImfilePullDataReq];
}
- (IMFilePullDataReq*) defaultInstance {
  return [IMFilePullDataReq defaultInstance];
}
- (IMFilePullDataReq*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (IMFilePullDataReq*) buildPartial {
  IMFilePullDataReq* returnMe = resultImfilePullDataReq;
  self.resultImfilePullDataReq = nil;
  return returnMe;
}
- (IMFilePullDataReqBuilder*) mergeFrom:(IMFilePullDataReq*) other {
  if (other == [IMFilePullDataReq defaultInstance]) {
    return self;
  }
  if (other.hasTaskId) {
    [self setTaskId:other.taskId];
  }
  if (other.hasUserId) {
    [self setUserId:other.userId];
  }
  if (other.hasTransMode) {
    [self setTransMode:other.transMode];
  }
  if (other.hasOffset) {
    [self setOffset:other.offset];
  }
  if (other.hasDataSize) {
    [self setDataSize:other.dataSize];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (IMFilePullDataReqBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (IMFilePullDataReqBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setTaskId:[input readString]];
        break;
      }
      case 16: {
        [self setUserId:[input readUInt32]];
        break;
      }
      case 24: {
        TransferFileType value = (TransferFileType)[input readEnum];
        if (TransferFileTypeIsValidValue(value)) {
          [self setTransMode:value];
        } else {
          [unknownFields mergeVarintField:3 value:value];
        }
        break;
      }
      case 32: {
        [self setOffset:[input readUInt32]];
        break;
      }
      case 40: {
        [self setDataSize:[input readUInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasTaskId {
  return resultImfilePullDataReq.hasTaskId;
}
- (NSString*) taskId {
  return resultImfilePullDataReq.taskId;
}
- (IMFilePullDataReqBuilder*) setTaskId:(NSString*) value {
  resultImfilePullDataReq.hasTaskId = YES;
  resultImfilePullDataReq.taskId = value;
  return self;
}
- (IMFilePullDataReqBuilder*) clearTaskId {
  resultImfilePullDataReq.hasTaskId = NO;
  resultImfilePullDataReq.taskId = @"";
  return self;
}
- (BOOL) hasUserId {
  return resultImfilePullDataReq.hasUserId;
}
- (UInt32) userId {
  return resultImfilePullDataReq.userId;
}
- (IMFilePullDataReqBuilder*) setUserId:(UInt32) value {
  resultImfilePullDataReq.hasUserId = YES;
  resultImfilePullDataReq.userId = value;
  return self;
}
- (IMFilePullDataReqBuilder*) clearUserId {
  resultImfilePullDataReq.hasUserId = NO;
  resultImfilePullDataReq.userId = 0;
  return self;
}
- (BOOL) hasTransMode {
  return resultImfilePullDataReq.hasTransMode;
}
- (TransferFileType) transMode {
  return resultImfilePullDataReq.transMode;
}
- (IMFilePullDataReqBuilder*) setTransMode:(TransferFileType) value {
  resultImfilePullDataReq.hasTransMode = YES;
  resultImfilePullDataReq.transMode = value;
  return self;
}
- (IMFilePullDataReqBuilder*) clearTransMode {
  resultImfilePullDataReq.hasTransMode = NO;
  resultImfilePullDataReq.transMode = TransferFileTypeFileTypeOnline;
  return self;
}
- (BOOL) hasOffset {
  return resultImfilePullDataReq.hasOffset;
}
- (UInt32) offset {
  return resultImfilePullDataReq.offset;
}
- (IMFilePullDataReqBuilder*) setOffset:(UInt32) value {
  resultImfilePullDataReq.hasOffset = YES;
  resultImfilePullDataReq.offset = value;
  return self;
}
- (IMFilePullDataReqBuilder*) clearOffset {
  resultImfilePullDataReq.hasOffset = NO;
  resultImfilePullDataReq.offset = 0;
  return self;
}
- (BOOL) hasDataSize {
  return resultImfilePullDataReq.hasDataSize;
}
- (UInt32) dataSize {
  return resultImfilePullDataReq.dataSize;
}
- (IMFilePullDataReqBuilder*) setDataSize:(UInt32) value {
  resultImfilePullDataReq.hasDataSize = YES;
  resultImfilePullDataReq.dataSize = value;
  return self;
}
- (IMFilePullDataReqBuilder*) clearDataSize {
  resultImfilePullDataReq.hasDataSize = NO;
  resultImfilePullDataReq.dataSize = 0;
  return self;
}
@end

@interface IMFilePullDataRsp ()
@property UInt32 resultCode;
@property (strong) NSString* taskId;
@property UInt32 userId;
@property UInt32 offset;
@property (strong) NSData* fileData;
@end

@implementation IMFilePullDataRsp

- (BOOL) hasResultCode {
  return !!hasResultCode_;
}
- (void) setHasResultCode:(BOOL) _value_ {
  hasResultCode_ = !!_value_;
}
@synthesize resultCode;
- (BOOL) hasTaskId {
  return !!hasTaskId_;
}
- (void) setHasTaskId:(BOOL) _value_ {
  hasTaskId_ = !!_value_;
}
@synthesize taskId;
- (BOOL) hasUserId {
  return !!hasUserId_;
}
- (void) setHasUserId:(BOOL) _value_ {
  hasUserId_ = !!_value_;
}
@synthesize userId;
- (BOOL) hasOffset {
  return !!hasOffset_;
}
- (void) setHasOffset:(BOOL) _value_ {
  hasOffset_ = !!_value_;
}
@synthesize offset;
- (BOOL) hasFileData {
  return !!hasFileData_;
}
- (void) setHasFileData:(BOOL) _value_ {
  hasFileData_ = !!_value_;
}
@synthesize fileData;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultCode = 0;
    self.taskId = @"";
    self.userId = 0;
    self.offset = 0;
    self.fileData = [NSData data];
  }
  return self;
}
static IMFilePullDataRsp* defaultIMFilePullDataRspInstance = nil;
+ (void) initialize {
  if (self == [IMFilePullDataRsp class]) {
    defaultIMFilePullDataRspInstance = [[IMFilePullDataRsp alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultIMFilePullDataRspInstance;
}
- (instancetype) defaultInstance {
  return defaultIMFilePullDataRspInstance;
}
- (BOOL) isInitialized {
  if (!self.hasResultCode) {
    return NO;
  }
  if (!self.hasTaskId) {
    return NO;
  }
  if (!self.hasUserId) {
    return NO;
  }
  if (!self.hasOffset) {
    return NO;
  }
  if (!self.hasFileData) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasResultCode) {
    [output writeUInt32:1 value:self.resultCode];
  }
  if (self.hasTaskId) {
    [output writeString:2 value:self.taskId];
  }
  if (self.hasUserId) {
    [output writeUInt32:3 value:self.userId];
  }
  if (self.hasOffset) {
    [output writeUInt32:4 value:self.offset];
  }
  if (self.hasFileData) {
    [output writeData:5 value:self.fileData];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasResultCode) {
    size_ += computeUInt32Size(1, self.resultCode);
  }
  if (self.hasTaskId) {
    size_ += computeStringSize(2, self.taskId);
  }
  if (self.hasUserId) {
    size_ += computeUInt32Size(3, self.userId);
  }
  if (self.hasOffset) {
    size_ += computeUInt32Size(4, self.offset);
  }
  if (self.hasFileData) {
    size_ += computeDataSize(5, self.fileData);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (IMFilePullDataRsp*) parseFromData:(NSData*) data {
  return (IMFilePullDataRsp*)[[[IMFilePullDataRsp builder] mergeFromData:data] build];
}
+ (IMFilePullDataRsp*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMFilePullDataRsp*)[[[IMFilePullDataRsp builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (IMFilePullDataRsp*) parseFromInputStream:(NSInputStream*) input {
  return (IMFilePullDataRsp*)[[[IMFilePullDataRsp builder] mergeFromInputStream:input] build];
}
+ (IMFilePullDataRsp*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMFilePullDataRsp*)[[[IMFilePullDataRsp builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (IMFilePullDataRsp*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (IMFilePullDataRsp*)[[[IMFilePullDataRsp builder] mergeFromCodedInputStream:input] build];
}
+ (IMFilePullDataRsp*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMFilePullDataRsp*)[[[IMFilePullDataRsp builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (IMFilePullDataRspBuilder*) builder {
  return [[IMFilePullDataRspBuilder alloc] init];
}
+ (IMFilePullDataRspBuilder*) builderWithPrototype:(IMFilePullDataRsp*) prototype {
  return [[IMFilePullDataRsp builder] mergeFrom:prototype];
}
- (IMFilePullDataRspBuilder*) builder {
  return [IMFilePullDataRsp builder];
}
- (IMFilePullDataRspBuilder*) toBuilder {
  return [IMFilePullDataRsp builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasResultCode) {
    [output appendFormat:@"%@%@: %@\n", indent, @"resultCode", [NSNumber numberWithInteger:self.resultCode]];
  }
  if (self.hasTaskId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"taskId", self.taskId];
  }
  if (self.hasUserId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"userId", [NSNumber numberWithInteger:self.userId]];
  }
  if (self.hasOffset) {
    [output appendFormat:@"%@%@: %@\n", indent, @"offset", [NSNumber numberWithInteger:self.offset]];
  }
  if (self.hasFileData) {
    [output appendFormat:@"%@%@: %@\n", indent, @"fileData", self.fileData];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasResultCode) {
    [dictionary setObject: [NSNumber numberWithInteger:self.resultCode] forKey: @"resultCode"];
  }
  if (self.hasTaskId) {
    [dictionary setObject: self.taskId forKey: @"taskId"];
  }
  if (self.hasUserId) {
    [dictionary setObject: [NSNumber numberWithInteger:self.userId] forKey: @"userId"];
  }
  if (self.hasOffset) {
    [dictionary setObject: [NSNumber numberWithInteger:self.offset] forKey: @"offset"];
  }
  if (self.hasFileData) {
    [dictionary setObject: self.fileData forKey: @"fileData"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[IMFilePullDataRsp class]]) {
    return NO;
  }
  IMFilePullDataRsp *otherMessage = other;
  return
      self.hasResultCode == otherMessage.hasResultCode &&
      (!self.hasResultCode || self.resultCode == otherMessage.resultCode) &&
      self.hasTaskId == otherMessage.hasTaskId &&
      (!self.hasTaskId || [self.taskId isEqual:otherMessage.taskId]) &&
      self.hasUserId == otherMessage.hasUserId &&
      (!self.hasUserId || self.userId == otherMessage.userId) &&
      self.hasOffset == otherMessage.hasOffset &&
      (!self.hasOffset || self.offset == otherMessage.offset) &&
      self.hasFileData == otherMessage.hasFileData &&
      (!self.hasFileData || [self.fileData isEqual:otherMessage.fileData]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasResultCode) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.resultCode] hash];
  }
  if (self.hasTaskId) {
    hashCode = hashCode * 31 + [self.taskId hash];
  }
  if (self.hasUserId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.userId] hash];
  }
  if (self.hasOffset) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.offset] hash];
  }
  if (self.hasFileData) {
    hashCode = hashCode * 31 + [self.fileData hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface IMFilePullDataRspBuilder()
@property (strong) IMFilePullDataRsp* resultImfilePullDataRsp;
@end

@implementation IMFilePullDataRspBuilder
@synthesize resultImfilePullDataRsp;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultImfilePullDataRsp = [[IMFilePullDataRsp alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultImfilePullDataRsp;
}
- (IMFilePullDataRspBuilder*) clear {
  self.resultImfilePullDataRsp = [[IMFilePullDataRsp alloc] init];
  return self;
}
- (IMFilePullDataRspBuilder*) clone {
  return [IMFilePullDataRsp builderWithPrototype:resultImfilePullDataRsp];
}
- (IMFilePullDataRsp*) defaultInstance {
  return [IMFilePullDataRsp defaultInstance];
}
- (IMFilePullDataRsp*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (IMFilePullDataRsp*) buildPartial {
  IMFilePullDataRsp* returnMe = resultImfilePullDataRsp;
  self.resultImfilePullDataRsp = nil;
  return returnMe;
}
- (IMFilePullDataRspBuilder*) mergeFrom:(IMFilePullDataRsp*) other {
  if (other == [IMFilePullDataRsp defaultInstance]) {
    return self;
  }
  if (other.hasResultCode) {
    [self setResultCode:other.resultCode];
  }
  if (other.hasTaskId) {
    [self setTaskId:other.taskId];
  }
  if (other.hasUserId) {
    [self setUserId:other.userId];
  }
  if (other.hasOffset) {
    [self setOffset:other.offset];
  }
  if (other.hasFileData) {
    [self setFileData:other.fileData];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (IMFilePullDataRspBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (IMFilePullDataRspBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setResultCode:[input readUInt32]];
        break;
      }
      case 18: {
        [self setTaskId:[input readString]];
        break;
      }
      case 24: {
        [self setUserId:[input readUInt32]];
        break;
      }
      case 32: {
        [self setOffset:[input readUInt32]];
        break;
      }
      case 42: {
        [self setFileData:[input readData]];
        break;
      }
    }
  }
}
- (BOOL) hasResultCode {
  return resultImfilePullDataRsp.hasResultCode;
}
- (UInt32) resultCode {
  return resultImfilePullDataRsp.resultCode;
}
- (IMFilePullDataRspBuilder*) setResultCode:(UInt32) value {
  resultImfilePullDataRsp.hasResultCode = YES;
  resultImfilePullDataRsp.resultCode = value;
  return self;
}
- (IMFilePullDataRspBuilder*) clearResultCode {
  resultImfilePullDataRsp.hasResultCode = NO;
  resultImfilePullDataRsp.resultCode = 0;
  return self;
}
- (BOOL) hasTaskId {
  return resultImfilePullDataRsp.hasTaskId;
}
- (NSString*) taskId {
  return resultImfilePullDataRsp.taskId;
}
- (IMFilePullDataRspBuilder*) setTaskId:(NSString*) value {
  resultImfilePullDataRsp.hasTaskId = YES;
  resultImfilePullDataRsp.taskId = value;
  return self;
}
- (IMFilePullDataRspBuilder*) clearTaskId {
  resultImfilePullDataRsp.hasTaskId = NO;
  resultImfilePullDataRsp.taskId = @"";
  return self;
}
- (BOOL) hasUserId {
  return resultImfilePullDataRsp.hasUserId;
}
- (UInt32) userId {
  return resultImfilePullDataRsp.userId;
}
- (IMFilePullDataRspBuilder*) setUserId:(UInt32) value {
  resultImfilePullDataRsp.hasUserId = YES;
  resultImfilePullDataRsp.userId = value;
  return self;
}
- (IMFilePullDataRspBuilder*) clearUserId {
  resultImfilePullDataRsp.hasUserId = NO;
  resultImfilePullDataRsp.userId = 0;
  return self;
}
- (BOOL) hasOffset {
  return resultImfilePullDataRsp.hasOffset;
}
- (UInt32) offset {
  return resultImfilePullDataRsp.offset;
}
- (IMFilePullDataRspBuilder*) setOffset:(UInt32) value {
  resultImfilePullDataRsp.hasOffset = YES;
  resultImfilePullDataRsp.offset = value;
  return self;
}
- (IMFilePullDataRspBuilder*) clearOffset {
  resultImfilePullDataRsp.hasOffset = NO;
  resultImfilePullDataRsp.offset = 0;
  return self;
}
- (BOOL) hasFileData {
  return resultImfilePullDataRsp.hasFileData;
}
- (NSData*) fileData {
  return resultImfilePullDataRsp.fileData;
}
- (IMFilePullDataRspBuilder*) setFileData:(NSData*) value {
  resultImfilePullDataRsp.hasFileData = YES;
  resultImfilePullDataRsp.fileData = value;
  return self;
}
- (IMFilePullDataRspBuilder*) clearFileData {
  resultImfilePullDataRsp.hasFileData = NO;
  resultImfilePullDataRsp.fileData = [NSData data];
  return self;
}
@end

@interface IMFileReq ()
@property UInt32 fromUserId;
@property UInt32 toUserId;
@property (strong) NSString* fileName;
@property UInt32 fileSize;
@property TransferFileType transMode;
@end

@implementation IMFileReq

- (BOOL) hasFromUserId {
  return !!hasFromUserId_;
}
- (void) setHasFromUserId:(BOOL) _value_ {
  hasFromUserId_ = !!_value_;
}
@synthesize fromUserId;
- (BOOL) hasToUserId {
  return !!hasToUserId_;
}
- (void) setHasToUserId:(BOOL) _value_ {
  hasToUserId_ = !!_value_;
}
@synthesize toUserId;
- (BOOL) hasFileName {
  return !!hasFileName_;
}
- (void) setHasFileName:(BOOL) _value_ {
  hasFileName_ = !!_value_;
}
@synthesize fileName;
- (BOOL) hasFileSize {
  return !!hasFileSize_;
}
- (void) setHasFileSize:(BOOL) _value_ {
  hasFileSize_ = !!_value_;
}
@synthesize fileSize;
- (BOOL) hasTransMode {
  return !!hasTransMode_;
}
- (void) setHasTransMode:(BOOL) _value_ {
  hasTransMode_ = !!_value_;
}
@synthesize transMode;
- (instancetype) init {
  if ((self = [super init])) {
    self.fromUserId = 0;
    self.toUserId = 0;
    self.fileName = @"";
    self.fileSize = 0;
    self.transMode = TransferFileTypeFileTypeOnline;
  }
  return self;
}
static IMFileReq* defaultIMFileReqInstance = nil;
+ (void) initialize {
  if (self == [IMFileReq class]) {
    defaultIMFileReqInstance = [[IMFileReq alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultIMFileReqInstance;
}
- (instancetype) defaultInstance {
  return defaultIMFileReqInstance;
}
- (BOOL) isInitialized {
  if (!self.hasFromUserId) {
    return NO;
  }
  if (!self.hasToUserId) {
    return NO;
  }
  if (!self.hasFileName) {
    return NO;
  }
  if (!self.hasFileSize) {
    return NO;
  }
  if (!self.hasTransMode) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasFromUserId) {
    [output writeUInt32:1 value:self.fromUserId];
  }
  if (self.hasToUserId) {
    [output writeUInt32:2 value:self.toUserId];
  }
  if (self.hasFileName) {
    [output writeString:3 value:self.fileName];
  }
  if (self.hasFileSize) {
    [output writeUInt32:4 value:self.fileSize];
  }
  if (self.hasTransMode) {
    [output writeEnum:5 value:self.transMode];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasFromUserId) {
    size_ += computeUInt32Size(1, self.fromUserId);
  }
  if (self.hasToUserId) {
    size_ += computeUInt32Size(2, self.toUserId);
  }
  if (self.hasFileName) {
    size_ += computeStringSize(3, self.fileName);
  }
  if (self.hasFileSize) {
    size_ += computeUInt32Size(4, self.fileSize);
  }
  if (self.hasTransMode) {
    size_ += computeEnumSize(5, self.transMode);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (IMFileReq*) parseFromData:(NSData*) data {
  return (IMFileReq*)[[[IMFileReq builder] mergeFromData:data] build];
}
+ (IMFileReq*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMFileReq*)[[[IMFileReq builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (IMFileReq*) parseFromInputStream:(NSInputStream*) input {
  return (IMFileReq*)[[[IMFileReq builder] mergeFromInputStream:input] build];
}
+ (IMFileReq*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMFileReq*)[[[IMFileReq builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (IMFileReq*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (IMFileReq*)[[[IMFileReq builder] mergeFromCodedInputStream:input] build];
}
+ (IMFileReq*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMFileReq*)[[[IMFileReq builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (IMFileReqBuilder*) builder {
  return [[IMFileReqBuilder alloc] init];
}
+ (IMFileReqBuilder*) builderWithPrototype:(IMFileReq*) prototype {
  return [[IMFileReq builder] mergeFrom:prototype];
}
- (IMFileReqBuilder*) builder {
  return [IMFileReq builder];
}
- (IMFileReqBuilder*) toBuilder {
  return [IMFileReq builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasFromUserId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"fromUserId", [NSNumber numberWithInteger:self.fromUserId]];
  }
  if (self.hasToUserId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"toUserId", [NSNumber numberWithInteger:self.toUserId]];
  }
  if (self.hasFileName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"fileName", self.fileName];
  }
  if (self.hasFileSize) {
    [output appendFormat:@"%@%@: %@\n", indent, @"fileSize", [NSNumber numberWithInteger:self.fileSize]];
  }
  if (self.hasTransMode) {
    [output appendFormat:@"%@%@: %@\n", indent, @"transMode", NSStringFromTransferFileType(self.transMode)];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasFromUserId) {
    [dictionary setObject: [NSNumber numberWithInteger:self.fromUserId] forKey: @"fromUserId"];
  }
  if (self.hasToUserId) {
    [dictionary setObject: [NSNumber numberWithInteger:self.toUserId] forKey: @"toUserId"];
  }
  if (self.hasFileName) {
    [dictionary setObject: self.fileName forKey: @"fileName"];
  }
  if (self.hasFileSize) {
    [dictionary setObject: [NSNumber numberWithInteger:self.fileSize] forKey: @"fileSize"];
  }
  if (self.hasTransMode) {
    [dictionary setObject: @(self.transMode) forKey: @"transMode"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[IMFileReq class]]) {
    return NO;
  }
  IMFileReq *otherMessage = other;
  return
      self.hasFromUserId == otherMessage.hasFromUserId &&
      (!self.hasFromUserId || self.fromUserId == otherMessage.fromUserId) &&
      self.hasToUserId == otherMessage.hasToUserId &&
      (!self.hasToUserId || self.toUserId == otherMessage.toUserId) &&
      self.hasFileName == otherMessage.hasFileName &&
      (!self.hasFileName || [self.fileName isEqual:otherMessage.fileName]) &&
      self.hasFileSize == otherMessage.hasFileSize &&
      (!self.hasFileSize || self.fileSize == otherMessage.fileSize) &&
      self.hasTransMode == otherMessage.hasTransMode &&
      (!self.hasTransMode || self.transMode == otherMessage.transMode) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasFromUserId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.fromUserId] hash];
  }
  if (self.hasToUserId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.toUserId] hash];
  }
  if (self.hasFileName) {
    hashCode = hashCode * 31 + [self.fileName hash];
  }
  if (self.hasFileSize) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.fileSize] hash];
  }
  if (self.hasTransMode) {
    hashCode = hashCode * 31 + self.transMode;
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface IMFileReqBuilder()
@property (strong) IMFileReq* resultImfileReq;
@end

@implementation IMFileReqBuilder
@synthesize resultImfileReq;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultImfileReq = [[IMFileReq alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultImfileReq;
}
- (IMFileReqBuilder*) clear {
  self.resultImfileReq = [[IMFileReq alloc] init];
  return self;
}
- (IMFileReqBuilder*) clone {
  return [IMFileReq builderWithPrototype:resultImfileReq];
}
- (IMFileReq*) defaultInstance {
  return [IMFileReq defaultInstance];
}
- (IMFileReq*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (IMFileReq*) buildPartial {
  IMFileReq* returnMe = resultImfileReq;
  self.resultImfileReq = nil;
  return returnMe;
}
- (IMFileReqBuilder*) mergeFrom:(IMFileReq*) other {
  if (other == [IMFileReq defaultInstance]) {
    return self;
  }
  if (other.hasFromUserId) {
    [self setFromUserId:other.fromUserId];
  }
  if (other.hasToUserId) {
    [self setToUserId:other.toUserId];
  }
  if (other.hasFileName) {
    [self setFileName:other.fileName];
  }
  if (other.hasFileSize) {
    [self setFileSize:other.fileSize];
  }
  if (other.hasTransMode) {
    [self setTransMode:other.transMode];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (IMFileReqBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (IMFileReqBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setFromUserId:[input readUInt32]];
        break;
      }
      case 16: {
        [self setToUserId:[input readUInt32]];
        break;
      }
      case 26: {
        [self setFileName:[input readString]];
        break;
      }
      case 32: {
        [self setFileSize:[input readUInt32]];
        break;
      }
      case 40: {
        TransferFileType value = (TransferFileType)[input readEnum];
        if (TransferFileTypeIsValidValue(value)) {
          [self setTransMode:value];
        } else {
          [unknownFields mergeVarintField:5 value:value];
        }
        break;
      }
    }
  }
}
- (BOOL) hasFromUserId {
  return resultImfileReq.hasFromUserId;
}
- (UInt32) fromUserId {
  return resultImfileReq.fromUserId;
}
- (IMFileReqBuilder*) setFromUserId:(UInt32) value {
  resultImfileReq.hasFromUserId = YES;
  resultImfileReq.fromUserId = value;
  return self;
}
- (IMFileReqBuilder*) clearFromUserId {
  resultImfileReq.hasFromUserId = NO;
  resultImfileReq.fromUserId = 0;
  return self;
}
- (BOOL) hasToUserId {
  return resultImfileReq.hasToUserId;
}
- (UInt32) toUserId {
  return resultImfileReq.toUserId;
}
- (IMFileReqBuilder*) setToUserId:(UInt32) value {
  resultImfileReq.hasToUserId = YES;
  resultImfileReq.toUserId = value;
  return self;
}
- (IMFileReqBuilder*) clearToUserId {
  resultImfileReq.hasToUserId = NO;
  resultImfileReq.toUserId = 0;
  return self;
}
- (BOOL) hasFileName {
  return resultImfileReq.hasFileName;
}
- (NSString*) fileName {
  return resultImfileReq.fileName;
}
- (IMFileReqBuilder*) setFileName:(NSString*) value {
  resultImfileReq.hasFileName = YES;
  resultImfileReq.fileName = value;
  return self;
}
- (IMFileReqBuilder*) clearFileName {
  resultImfileReq.hasFileName = NO;
  resultImfileReq.fileName = @"";
  return self;
}
- (BOOL) hasFileSize {
  return resultImfileReq.hasFileSize;
}
- (UInt32) fileSize {
  return resultImfileReq.fileSize;
}
- (IMFileReqBuilder*) setFileSize:(UInt32) value {
  resultImfileReq.hasFileSize = YES;
  resultImfileReq.fileSize = value;
  return self;
}
- (IMFileReqBuilder*) clearFileSize {
  resultImfileReq.hasFileSize = NO;
  resultImfileReq.fileSize = 0;
  return self;
}
- (BOOL) hasTransMode {
  return resultImfileReq.hasTransMode;
}
- (TransferFileType) transMode {
  return resultImfileReq.transMode;
}
- (IMFileReqBuilder*) setTransMode:(TransferFileType) value {
  resultImfileReq.hasTransMode = YES;
  resultImfileReq.transMode = value;
  return self;
}
- (IMFileReqBuilder*) clearTransMode {
  resultImfileReq.hasTransMode = NO;
  resultImfileReq.transMode = TransferFileTypeFileTypeOnline;
  return self;
}
@end

@interface IMFileRsp ()
@property UInt32 resultCode;
@property UInt32 fromUserId;
@property UInt32 toUserId;
@property (strong) NSString* fileName;
@property (strong) NSString* taskId;
@property (strong) NSMutableArray * ipAddrListArray;
@property TransferFileType transMode;
@end

@implementation IMFileRsp

- (BOOL) hasResultCode {
  return !!hasResultCode_;
}
- (void) setHasResultCode:(BOOL) _value_ {
  hasResultCode_ = !!_value_;
}
@synthesize resultCode;
- (BOOL) hasFromUserId {
  return !!hasFromUserId_;
}
- (void) setHasFromUserId:(BOOL) _value_ {
  hasFromUserId_ = !!_value_;
}
@synthesize fromUserId;
- (BOOL) hasToUserId {
  return !!hasToUserId_;
}
- (void) setHasToUserId:(BOOL) _value_ {
  hasToUserId_ = !!_value_;
}
@synthesize toUserId;
- (BOOL) hasFileName {
  return !!hasFileName_;
}
- (void) setHasFileName:(BOOL) _value_ {
  hasFileName_ = !!_value_;
}
@synthesize fileName;
- (BOOL) hasTaskId {
  return !!hasTaskId_;
}
- (void) setHasTaskId:(BOOL) _value_ {
  hasTaskId_ = !!_value_;
}
@synthesize taskId;
@synthesize ipAddrListArray;
@dynamic ipAddrList;
- (BOOL) hasTransMode {
  return !!hasTransMode_;
}
- (void) setHasTransMode:(BOOL) _value_ {
  hasTransMode_ = !!_value_;
}
@synthesize transMode;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultCode = 0;
    self.fromUserId = 0;
    self.toUserId = 0;
    self.fileName = @"";
    self.taskId = @"";
    self.transMode = TransferFileTypeFileTypeOnline;
  }
  return self;
}
static IMFileRsp* defaultIMFileRspInstance = nil;
+ (void) initialize {
  if (self == [IMFileRsp class]) {
    defaultIMFileRspInstance = [[IMFileRsp alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultIMFileRspInstance;
}
- (instancetype) defaultInstance {
  return defaultIMFileRspInstance;
}
- (NSArray *)ipAddrList {
  return ipAddrListArray;
}
- (IpAddr*)ipAddrListAtIndex:(NSUInteger)index {
  return [ipAddrListArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  if (!self.hasResultCode) {
    return NO;
  }
  if (!self.hasFromUserId) {
    return NO;
  }
  if (!self.hasToUserId) {
    return NO;
  }
  if (!self.hasFileName) {
    return NO;
  }
  if (!self.hasTaskId) {
    return NO;
  }
  if (!self.hasTransMode) {
    return NO;
  }
  __block BOOL isInitipAddrList = YES;
   [self.ipAddrList enumerateObjectsUsingBlock:^(IpAddr *element, NSUInteger idx, BOOL *stop) {
    if (!element.isInitialized) {
      isInitipAddrList = NO;
      *stop = YES;
    }
  }];
  if (!isInitipAddrList) return isInitipAddrList;
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasResultCode) {
    [output writeUInt32:1 value:self.resultCode];
  }
  if (self.hasFromUserId) {
    [output writeUInt32:2 value:self.fromUserId];
  }
  if (self.hasToUserId) {
    [output writeUInt32:3 value:self.toUserId];
  }
  if (self.hasFileName) {
    [output writeString:4 value:self.fileName];
  }
  if (self.hasTaskId) {
    [output writeString:5 value:self.taskId];
  }
  [self.ipAddrListArray enumerateObjectsUsingBlock:^(IpAddr *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:6 value:element];
  }];
  if (self.hasTransMode) {
    [output writeEnum:7 value:self.transMode];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasResultCode) {
    size_ += computeUInt32Size(1, self.resultCode);
  }
  if (self.hasFromUserId) {
    size_ += computeUInt32Size(2, self.fromUserId);
  }
  if (self.hasToUserId) {
    size_ += computeUInt32Size(3, self.toUserId);
  }
  if (self.hasFileName) {
    size_ += computeStringSize(4, self.fileName);
  }
  if (self.hasTaskId) {
    size_ += computeStringSize(5, self.taskId);
  }
  [self.ipAddrListArray enumerateObjectsUsingBlock:^(IpAddr *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(6, element);
  }];
  if (self.hasTransMode) {
    size_ += computeEnumSize(7, self.transMode);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (IMFileRsp*) parseFromData:(NSData*) data {
  return (IMFileRsp*)[[[IMFileRsp builder] mergeFromData:data] build];
}
+ (IMFileRsp*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMFileRsp*)[[[IMFileRsp builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (IMFileRsp*) parseFromInputStream:(NSInputStream*) input {
  return (IMFileRsp*)[[[IMFileRsp builder] mergeFromInputStream:input] build];
}
+ (IMFileRsp*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMFileRsp*)[[[IMFileRsp builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (IMFileRsp*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (IMFileRsp*)[[[IMFileRsp builder] mergeFromCodedInputStream:input] build];
}
+ (IMFileRsp*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMFileRsp*)[[[IMFileRsp builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (IMFileRspBuilder*) builder {
  return [[IMFileRspBuilder alloc] init];
}
+ (IMFileRspBuilder*) builderWithPrototype:(IMFileRsp*) prototype {
  return [[IMFileRsp builder] mergeFrom:prototype];
}
- (IMFileRspBuilder*) builder {
  return [IMFileRsp builder];
}
- (IMFileRspBuilder*) toBuilder {
  return [IMFileRsp builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasResultCode) {
    [output appendFormat:@"%@%@: %@\n", indent, @"resultCode", [NSNumber numberWithInteger:self.resultCode]];
  }
  if (self.hasFromUserId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"fromUserId", [NSNumber numberWithInteger:self.fromUserId]];
  }
  if (self.hasToUserId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"toUserId", [NSNumber numberWithInteger:self.toUserId]];
  }
  if (self.hasFileName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"fileName", self.fileName];
  }
  if (self.hasTaskId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"taskId", self.taskId];
  }
  [self.ipAddrListArray enumerateObjectsUsingBlock:^(IpAddr *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"ipAddrList"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  if (self.hasTransMode) {
    [output appendFormat:@"%@%@: %@\n", indent, @"transMode", NSStringFromTransferFileType(self.transMode)];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasResultCode) {
    [dictionary setObject: [NSNumber numberWithInteger:self.resultCode] forKey: @"resultCode"];
  }
  if (self.hasFromUserId) {
    [dictionary setObject: [NSNumber numberWithInteger:self.fromUserId] forKey: @"fromUserId"];
  }
  if (self.hasToUserId) {
    [dictionary setObject: [NSNumber numberWithInteger:self.toUserId] forKey: @"toUserId"];
  }
  if (self.hasFileName) {
    [dictionary setObject: self.fileName forKey: @"fileName"];
  }
  if (self.hasTaskId) {
    [dictionary setObject: self.taskId forKey: @"taskId"];
  }
  for (IpAddr* element in self.ipAddrListArray) {
    NSMutableDictionary *elementDictionary = [NSMutableDictionary dictionary];
    [element storeInDictionary:elementDictionary];
    [dictionary setObject:[NSDictionary dictionaryWithDictionary:elementDictionary] forKey:@"ipAddrList"];
  }
  if (self.hasTransMode) {
    [dictionary setObject: @(self.transMode) forKey: @"transMode"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[IMFileRsp class]]) {
    return NO;
  }
  IMFileRsp *otherMessage = other;
  return
      self.hasResultCode == otherMessage.hasResultCode &&
      (!self.hasResultCode || self.resultCode == otherMessage.resultCode) &&
      self.hasFromUserId == otherMessage.hasFromUserId &&
      (!self.hasFromUserId || self.fromUserId == otherMessage.fromUserId) &&
      self.hasToUserId == otherMessage.hasToUserId &&
      (!self.hasToUserId || self.toUserId == otherMessage.toUserId) &&
      self.hasFileName == otherMessage.hasFileName &&
      (!self.hasFileName || [self.fileName isEqual:otherMessage.fileName]) &&
      self.hasTaskId == otherMessage.hasTaskId &&
      (!self.hasTaskId || [self.taskId isEqual:otherMessage.taskId]) &&
      [self.ipAddrListArray isEqualToArray:otherMessage.ipAddrListArray] &&
      self.hasTransMode == otherMessage.hasTransMode &&
      (!self.hasTransMode || self.transMode == otherMessage.transMode) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasResultCode) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.resultCode] hash];
  }
  if (self.hasFromUserId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.fromUserId] hash];
  }
  if (self.hasToUserId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.toUserId] hash];
  }
  if (self.hasFileName) {
    hashCode = hashCode * 31 + [self.fileName hash];
  }
  if (self.hasTaskId) {
    hashCode = hashCode * 31 + [self.taskId hash];
  }
  [self.ipAddrListArray enumerateObjectsUsingBlock:^(IpAddr *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  if (self.hasTransMode) {
    hashCode = hashCode * 31 + self.transMode;
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface IMFileRspBuilder()
@property (strong) IMFileRsp* resultImfileRsp;
@end

@implementation IMFileRspBuilder
@synthesize resultImfileRsp;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultImfileRsp = [[IMFileRsp alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultImfileRsp;
}
- (IMFileRspBuilder*) clear {
  self.resultImfileRsp = [[IMFileRsp alloc] init];
  return self;
}
- (IMFileRspBuilder*) clone {
  return [IMFileRsp builderWithPrototype:resultImfileRsp];
}
- (IMFileRsp*) defaultInstance {
  return [IMFileRsp defaultInstance];
}
- (IMFileRsp*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (IMFileRsp*) buildPartial {
  IMFileRsp* returnMe = resultImfileRsp;
  self.resultImfileRsp = nil;
  return returnMe;
}
- (IMFileRspBuilder*) mergeFrom:(IMFileRsp*) other {
  if (other == [IMFileRsp defaultInstance]) {
    return self;
  }
  if (other.hasResultCode) {
    [self setResultCode:other.resultCode];
  }
  if (other.hasFromUserId) {
    [self setFromUserId:other.fromUserId];
  }
  if (other.hasToUserId) {
    [self setToUserId:other.toUserId];
  }
  if (other.hasFileName) {
    [self setFileName:other.fileName];
  }
  if (other.hasTaskId) {
    [self setTaskId:other.taskId];
  }
  if (other.ipAddrListArray.count > 0) {
    if (resultImfileRsp.ipAddrListArray == nil) {
      resultImfileRsp.ipAddrListArray = [[NSMutableArray alloc] initWithArray:other.ipAddrListArray];
    } else {
      [resultImfileRsp.ipAddrListArray addObjectsFromArray:other.ipAddrListArray];
    }
  }
  if (other.hasTransMode) {
    [self setTransMode:other.transMode];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (IMFileRspBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (IMFileRspBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setResultCode:[input readUInt32]];
        break;
      }
      case 16: {
        [self setFromUserId:[input readUInt32]];
        break;
      }
      case 24: {
        [self setToUserId:[input readUInt32]];
        break;
      }
      case 34: {
        [self setFileName:[input readString]];
        break;
      }
      case 42: {
        [self setTaskId:[input readString]];
        break;
      }
      case 50: {
        IpAddrBuilder* subBuilder = [IpAddr builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addIpAddrList:[subBuilder buildPartial]];
        break;
      }
      case 56: {
        TransferFileType value = (TransferFileType)[input readEnum];
        if (TransferFileTypeIsValidValue(value)) {
          [self setTransMode:value];
        } else {
          [unknownFields mergeVarintField:7 value:value];
        }
        break;
      }
    }
  }
}
- (BOOL) hasResultCode {
  return resultImfileRsp.hasResultCode;
}
- (UInt32) resultCode {
  return resultImfileRsp.resultCode;
}
- (IMFileRspBuilder*) setResultCode:(UInt32) value {
  resultImfileRsp.hasResultCode = YES;
  resultImfileRsp.resultCode = value;
  return self;
}
- (IMFileRspBuilder*) clearResultCode {
  resultImfileRsp.hasResultCode = NO;
  resultImfileRsp.resultCode = 0;
  return self;
}
- (BOOL) hasFromUserId {
  return resultImfileRsp.hasFromUserId;
}
- (UInt32) fromUserId {
  return resultImfileRsp.fromUserId;
}
- (IMFileRspBuilder*) setFromUserId:(UInt32) value {
  resultImfileRsp.hasFromUserId = YES;
  resultImfileRsp.fromUserId = value;
  return self;
}
- (IMFileRspBuilder*) clearFromUserId {
  resultImfileRsp.hasFromUserId = NO;
  resultImfileRsp.fromUserId = 0;
  return self;
}
- (BOOL) hasToUserId {
  return resultImfileRsp.hasToUserId;
}
- (UInt32) toUserId {
  return resultImfileRsp.toUserId;
}
- (IMFileRspBuilder*) setToUserId:(UInt32) value {
  resultImfileRsp.hasToUserId = YES;
  resultImfileRsp.toUserId = value;
  return self;
}
- (IMFileRspBuilder*) clearToUserId {
  resultImfileRsp.hasToUserId = NO;
  resultImfileRsp.toUserId = 0;
  return self;
}
- (BOOL) hasFileName {
  return resultImfileRsp.hasFileName;
}
- (NSString*) fileName {
  return resultImfileRsp.fileName;
}
- (IMFileRspBuilder*) setFileName:(NSString*) value {
  resultImfileRsp.hasFileName = YES;
  resultImfileRsp.fileName = value;
  return self;
}
- (IMFileRspBuilder*) clearFileName {
  resultImfileRsp.hasFileName = NO;
  resultImfileRsp.fileName = @"";
  return self;
}
- (BOOL) hasTaskId {
  return resultImfileRsp.hasTaskId;
}
- (NSString*) taskId {
  return resultImfileRsp.taskId;
}
- (IMFileRspBuilder*) setTaskId:(NSString*) value {
  resultImfileRsp.hasTaskId = YES;
  resultImfileRsp.taskId = value;
  return self;
}
- (IMFileRspBuilder*) clearTaskId {
  resultImfileRsp.hasTaskId = NO;
  resultImfileRsp.taskId = @"";
  return self;
}
- (NSMutableArray *)ipAddrList {
  return resultImfileRsp.ipAddrListArray;
}
- (IpAddr*)ipAddrListAtIndex:(NSUInteger)index {
  return [resultImfileRsp ipAddrListAtIndex:index];
}
- (IMFileRspBuilder *)addIpAddrList:(IpAddr*)value {
  if (resultImfileRsp.ipAddrListArray == nil) {
    resultImfileRsp.ipAddrListArray = [[NSMutableArray alloc]init];
  }
  [resultImfileRsp.ipAddrListArray addObject:value];
  return self;
}
- (IMFileRspBuilder *)setIpAddrListArray:(NSArray *)array {
  resultImfileRsp.ipAddrListArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (IMFileRspBuilder *)clearIpAddrList {
  resultImfileRsp.ipAddrListArray = nil;
  return self;
}
- (BOOL) hasTransMode {
  return resultImfileRsp.hasTransMode;
}
- (TransferFileType) transMode {
  return resultImfileRsp.transMode;
}
- (IMFileRspBuilder*) setTransMode:(TransferFileType) value {
  resultImfileRsp.hasTransMode = YES;
  resultImfileRsp.transMode = value;
  return self;
}
- (IMFileRspBuilder*) clearTransMode {
  resultImfileRsp.hasTransMode = NO;
  resultImfileRsp.transMode = TransferFileTypeFileTypeOnline;
  return self;
}
@end

@interface IMFileNotify ()
@property UInt32 fromUserId;
@property UInt32 toUserId;
@property (strong) NSString* fileName;
@property UInt32 fileSize;
@property (strong) NSString* taskId;
@property (strong) NSMutableArray * ipAddrListArray;
@property TransferFileType transMode;
@property UInt32 offlineReady;
@end

@implementation IMFileNotify

- (BOOL) hasFromUserId {
  return !!hasFromUserId_;
}
- (void) setHasFromUserId:(BOOL) _value_ {
  hasFromUserId_ = !!_value_;
}
@synthesize fromUserId;
- (BOOL) hasToUserId {
  return !!hasToUserId_;
}
- (void) setHasToUserId:(BOOL) _value_ {
  hasToUserId_ = !!_value_;
}
@synthesize toUserId;
- (BOOL) hasFileName {
  return !!hasFileName_;
}
- (void) setHasFileName:(BOOL) _value_ {
  hasFileName_ = !!_value_;
}
@synthesize fileName;
- (BOOL) hasFileSize {
  return !!hasFileSize_;
}
- (void) setHasFileSize:(BOOL) _value_ {
  hasFileSize_ = !!_value_;
}
@synthesize fileSize;
- (BOOL) hasTaskId {
  return !!hasTaskId_;
}
- (void) setHasTaskId:(BOOL) _value_ {
  hasTaskId_ = !!_value_;
}
@synthesize taskId;
@synthesize ipAddrListArray;
@dynamic ipAddrList;
- (BOOL) hasTransMode {
  return !!hasTransMode_;
}
- (void) setHasTransMode:(BOOL) _value_ {
  hasTransMode_ = !!_value_;
}
@synthesize transMode;
- (BOOL) hasOfflineReady {
  return !!hasOfflineReady_;
}
- (void) setHasOfflineReady:(BOOL) _value_ {
  hasOfflineReady_ = !!_value_;
}
@synthesize offlineReady;
- (instancetype) init {
  if ((self = [super init])) {
    self.fromUserId = 0;
    self.toUserId = 0;
    self.fileName = @"";
    self.fileSize = 0;
    self.taskId = @"";
    self.transMode = TransferFileTypeFileTypeOnline;
    self.offlineReady = 0;
  }
  return self;
}
static IMFileNotify* defaultIMFileNotifyInstance = nil;
+ (void) initialize {
  if (self == [IMFileNotify class]) {
    defaultIMFileNotifyInstance = [[IMFileNotify alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultIMFileNotifyInstance;
}
- (instancetype) defaultInstance {
  return defaultIMFileNotifyInstance;
}
- (NSArray *)ipAddrList {
  return ipAddrListArray;
}
- (IpAddr*)ipAddrListAtIndex:(NSUInteger)index {
  return [ipAddrListArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  if (!self.hasFromUserId) {
    return NO;
  }
  if (!self.hasToUserId) {
    return NO;
  }
  if (!self.hasFileName) {
    return NO;
  }
  if (!self.hasFileSize) {
    return NO;
  }
  if (!self.hasTaskId) {
    return NO;
  }
  if (!self.hasTransMode) {
    return NO;
  }
  if (!self.hasOfflineReady) {
    return NO;
  }
  __block BOOL isInitipAddrList = YES;
   [self.ipAddrList enumerateObjectsUsingBlock:^(IpAddr *element, NSUInteger idx, BOOL *stop) {
    if (!element.isInitialized) {
      isInitipAddrList = NO;
      *stop = YES;
    }
  }];
  if (!isInitipAddrList) return isInitipAddrList;
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasFromUserId) {
    [output writeUInt32:1 value:self.fromUserId];
  }
  if (self.hasToUserId) {
    [output writeUInt32:2 value:self.toUserId];
  }
  if (self.hasFileName) {
    [output writeString:3 value:self.fileName];
  }
  if (self.hasFileSize) {
    [output writeUInt32:4 value:self.fileSize];
  }
  if (self.hasTaskId) {
    [output writeString:5 value:self.taskId];
  }
  [self.ipAddrListArray enumerateObjectsUsingBlock:^(IpAddr *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:6 value:element];
  }];
  if (self.hasTransMode) {
    [output writeEnum:7 value:self.transMode];
  }
  if (self.hasOfflineReady) {
    [output writeUInt32:8 value:self.offlineReady];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasFromUserId) {
    size_ += computeUInt32Size(1, self.fromUserId);
  }
  if (self.hasToUserId) {
    size_ += computeUInt32Size(2, self.toUserId);
  }
  if (self.hasFileName) {
    size_ += computeStringSize(3, self.fileName);
  }
  if (self.hasFileSize) {
    size_ += computeUInt32Size(4, self.fileSize);
  }
  if (self.hasTaskId) {
    size_ += computeStringSize(5, self.taskId);
  }
  [self.ipAddrListArray enumerateObjectsUsingBlock:^(IpAddr *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(6, element);
  }];
  if (self.hasTransMode) {
    size_ += computeEnumSize(7, self.transMode);
  }
  if (self.hasOfflineReady) {
    size_ += computeUInt32Size(8, self.offlineReady);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (IMFileNotify*) parseFromData:(NSData*) data {
  return (IMFileNotify*)[[[IMFileNotify builder] mergeFromData:data] build];
}
+ (IMFileNotify*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMFileNotify*)[[[IMFileNotify builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (IMFileNotify*) parseFromInputStream:(NSInputStream*) input {
  return (IMFileNotify*)[[[IMFileNotify builder] mergeFromInputStream:input] build];
}
+ (IMFileNotify*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMFileNotify*)[[[IMFileNotify builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (IMFileNotify*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (IMFileNotify*)[[[IMFileNotify builder] mergeFromCodedInputStream:input] build];
}
+ (IMFileNotify*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMFileNotify*)[[[IMFileNotify builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (IMFileNotifyBuilder*) builder {
  return [[IMFileNotifyBuilder alloc] init];
}
+ (IMFileNotifyBuilder*) builderWithPrototype:(IMFileNotify*) prototype {
  return [[IMFileNotify builder] mergeFrom:prototype];
}
- (IMFileNotifyBuilder*) builder {
  return [IMFileNotify builder];
}
- (IMFileNotifyBuilder*) toBuilder {
  return [IMFileNotify builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasFromUserId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"fromUserId", [NSNumber numberWithInteger:self.fromUserId]];
  }
  if (self.hasToUserId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"toUserId", [NSNumber numberWithInteger:self.toUserId]];
  }
  if (self.hasFileName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"fileName", self.fileName];
  }
  if (self.hasFileSize) {
    [output appendFormat:@"%@%@: %@\n", indent, @"fileSize", [NSNumber numberWithInteger:self.fileSize]];
  }
  if (self.hasTaskId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"taskId", self.taskId];
  }
  [self.ipAddrListArray enumerateObjectsUsingBlock:^(IpAddr *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"ipAddrList"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  if (self.hasTransMode) {
    [output appendFormat:@"%@%@: %@\n", indent, @"transMode", NSStringFromTransferFileType(self.transMode)];
  }
  if (self.hasOfflineReady) {
    [output appendFormat:@"%@%@: %@\n", indent, @"offlineReady", [NSNumber numberWithInteger:self.offlineReady]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasFromUserId) {
    [dictionary setObject: [NSNumber numberWithInteger:self.fromUserId] forKey: @"fromUserId"];
  }
  if (self.hasToUserId) {
    [dictionary setObject: [NSNumber numberWithInteger:self.toUserId] forKey: @"toUserId"];
  }
  if (self.hasFileName) {
    [dictionary setObject: self.fileName forKey: @"fileName"];
  }
  if (self.hasFileSize) {
    [dictionary setObject: [NSNumber numberWithInteger:self.fileSize] forKey: @"fileSize"];
  }
  if (self.hasTaskId) {
    [dictionary setObject: self.taskId forKey: @"taskId"];
  }
  for (IpAddr* element in self.ipAddrListArray) {
    NSMutableDictionary *elementDictionary = [NSMutableDictionary dictionary];
    [element storeInDictionary:elementDictionary];
    [dictionary setObject:[NSDictionary dictionaryWithDictionary:elementDictionary] forKey:@"ipAddrList"];
  }
  if (self.hasTransMode) {
    [dictionary setObject: @(self.transMode) forKey: @"transMode"];
  }
  if (self.hasOfflineReady) {
    [dictionary setObject: [NSNumber numberWithInteger:self.offlineReady] forKey: @"offlineReady"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[IMFileNotify class]]) {
    return NO;
  }
  IMFileNotify *otherMessage = other;
  return
      self.hasFromUserId == otherMessage.hasFromUserId &&
      (!self.hasFromUserId || self.fromUserId == otherMessage.fromUserId) &&
      self.hasToUserId == otherMessage.hasToUserId &&
      (!self.hasToUserId || self.toUserId == otherMessage.toUserId) &&
      self.hasFileName == otherMessage.hasFileName &&
      (!self.hasFileName || [self.fileName isEqual:otherMessage.fileName]) &&
      self.hasFileSize == otherMessage.hasFileSize &&
      (!self.hasFileSize || self.fileSize == otherMessage.fileSize) &&
      self.hasTaskId == otherMessage.hasTaskId &&
      (!self.hasTaskId || [self.taskId isEqual:otherMessage.taskId]) &&
      [self.ipAddrListArray isEqualToArray:otherMessage.ipAddrListArray] &&
      self.hasTransMode == otherMessage.hasTransMode &&
      (!self.hasTransMode || self.transMode == otherMessage.transMode) &&
      self.hasOfflineReady == otherMessage.hasOfflineReady &&
      (!self.hasOfflineReady || self.offlineReady == otherMessage.offlineReady) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasFromUserId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.fromUserId] hash];
  }
  if (self.hasToUserId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.toUserId] hash];
  }
  if (self.hasFileName) {
    hashCode = hashCode * 31 + [self.fileName hash];
  }
  if (self.hasFileSize) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.fileSize] hash];
  }
  if (self.hasTaskId) {
    hashCode = hashCode * 31 + [self.taskId hash];
  }
  [self.ipAddrListArray enumerateObjectsUsingBlock:^(IpAddr *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  if (self.hasTransMode) {
    hashCode = hashCode * 31 + self.transMode;
  }
  if (self.hasOfflineReady) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.offlineReady] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface IMFileNotifyBuilder()
@property (strong) IMFileNotify* resultImfileNotify;
@end

@implementation IMFileNotifyBuilder
@synthesize resultImfileNotify;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultImfileNotify = [[IMFileNotify alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultImfileNotify;
}
- (IMFileNotifyBuilder*) clear {
  self.resultImfileNotify = [[IMFileNotify alloc] init];
  return self;
}
- (IMFileNotifyBuilder*) clone {
  return [IMFileNotify builderWithPrototype:resultImfileNotify];
}
- (IMFileNotify*) defaultInstance {
  return [IMFileNotify defaultInstance];
}
- (IMFileNotify*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (IMFileNotify*) buildPartial {
  IMFileNotify* returnMe = resultImfileNotify;
  self.resultImfileNotify = nil;
  return returnMe;
}
- (IMFileNotifyBuilder*) mergeFrom:(IMFileNotify*) other {
  if (other == [IMFileNotify defaultInstance]) {
    return self;
  }
  if (other.hasFromUserId) {
    [self setFromUserId:other.fromUserId];
  }
  if (other.hasToUserId) {
    [self setToUserId:other.toUserId];
  }
  if (other.hasFileName) {
    [self setFileName:other.fileName];
  }
  if (other.hasFileSize) {
    [self setFileSize:other.fileSize];
  }
  if (other.hasTaskId) {
    [self setTaskId:other.taskId];
  }
  if (other.ipAddrListArray.count > 0) {
    if (resultImfileNotify.ipAddrListArray == nil) {
      resultImfileNotify.ipAddrListArray = [[NSMutableArray alloc] initWithArray:other.ipAddrListArray];
    } else {
      [resultImfileNotify.ipAddrListArray addObjectsFromArray:other.ipAddrListArray];
    }
  }
  if (other.hasTransMode) {
    [self setTransMode:other.transMode];
  }
  if (other.hasOfflineReady) {
    [self setOfflineReady:other.offlineReady];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (IMFileNotifyBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (IMFileNotifyBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setFromUserId:[input readUInt32]];
        break;
      }
      case 16: {
        [self setToUserId:[input readUInt32]];
        break;
      }
      case 26: {
        [self setFileName:[input readString]];
        break;
      }
      case 32: {
        [self setFileSize:[input readUInt32]];
        break;
      }
      case 42: {
        [self setTaskId:[input readString]];
        break;
      }
      case 50: {
        IpAddrBuilder* subBuilder = [IpAddr builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addIpAddrList:[subBuilder buildPartial]];
        break;
      }
      case 56: {
        TransferFileType value = (TransferFileType)[input readEnum];
        if (TransferFileTypeIsValidValue(value)) {
          [self setTransMode:value];
        } else {
          [unknownFields mergeVarintField:7 value:value];
        }
        break;
      }
      case 64: {
        [self setOfflineReady:[input readUInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasFromUserId {
  return resultImfileNotify.hasFromUserId;
}
- (UInt32) fromUserId {
  return resultImfileNotify.fromUserId;
}
- (IMFileNotifyBuilder*) setFromUserId:(UInt32) value {
  resultImfileNotify.hasFromUserId = YES;
  resultImfileNotify.fromUserId = value;
  return self;
}
- (IMFileNotifyBuilder*) clearFromUserId {
  resultImfileNotify.hasFromUserId = NO;
  resultImfileNotify.fromUserId = 0;
  return self;
}
- (BOOL) hasToUserId {
  return resultImfileNotify.hasToUserId;
}
- (UInt32) toUserId {
  return resultImfileNotify.toUserId;
}
- (IMFileNotifyBuilder*) setToUserId:(UInt32) value {
  resultImfileNotify.hasToUserId = YES;
  resultImfileNotify.toUserId = value;
  return self;
}
- (IMFileNotifyBuilder*) clearToUserId {
  resultImfileNotify.hasToUserId = NO;
  resultImfileNotify.toUserId = 0;
  return self;
}
- (BOOL) hasFileName {
  return resultImfileNotify.hasFileName;
}
- (NSString*) fileName {
  return resultImfileNotify.fileName;
}
- (IMFileNotifyBuilder*) setFileName:(NSString*) value {
  resultImfileNotify.hasFileName = YES;
  resultImfileNotify.fileName = value;
  return self;
}
- (IMFileNotifyBuilder*) clearFileName {
  resultImfileNotify.hasFileName = NO;
  resultImfileNotify.fileName = @"";
  return self;
}
- (BOOL) hasFileSize {
  return resultImfileNotify.hasFileSize;
}
- (UInt32) fileSize {
  return resultImfileNotify.fileSize;
}
- (IMFileNotifyBuilder*) setFileSize:(UInt32) value {
  resultImfileNotify.hasFileSize = YES;
  resultImfileNotify.fileSize = value;
  return self;
}
- (IMFileNotifyBuilder*) clearFileSize {
  resultImfileNotify.hasFileSize = NO;
  resultImfileNotify.fileSize = 0;
  return self;
}
- (BOOL) hasTaskId {
  return resultImfileNotify.hasTaskId;
}
- (NSString*) taskId {
  return resultImfileNotify.taskId;
}
- (IMFileNotifyBuilder*) setTaskId:(NSString*) value {
  resultImfileNotify.hasTaskId = YES;
  resultImfileNotify.taskId = value;
  return self;
}
- (IMFileNotifyBuilder*) clearTaskId {
  resultImfileNotify.hasTaskId = NO;
  resultImfileNotify.taskId = @"";
  return self;
}
- (NSMutableArray *)ipAddrList {
  return resultImfileNotify.ipAddrListArray;
}
- (IpAddr*)ipAddrListAtIndex:(NSUInteger)index {
  return [resultImfileNotify ipAddrListAtIndex:index];
}
- (IMFileNotifyBuilder *)addIpAddrList:(IpAddr*)value {
  if (resultImfileNotify.ipAddrListArray == nil) {
    resultImfileNotify.ipAddrListArray = [[NSMutableArray alloc]init];
  }
  [resultImfileNotify.ipAddrListArray addObject:value];
  return self;
}
- (IMFileNotifyBuilder *)setIpAddrListArray:(NSArray *)array {
  resultImfileNotify.ipAddrListArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (IMFileNotifyBuilder *)clearIpAddrList {
  resultImfileNotify.ipAddrListArray = nil;
  return self;
}
- (BOOL) hasTransMode {
  return resultImfileNotify.hasTransMode;
}
- (TransferFileType) transMode {
  return resultImfileNotify.transMode;
}
- (IMFileNotifyBuilder*) setTransMode:(TransferFileType) value {
  resultImfileNotify.hasTransMode = YES;
  resultImfileNotify.transMode = value;
  return self;
}
- (IMFileNotifyBuilder*) clearTransMode {
  resultImfileNotify.hasTransMode = NO;
  resultImfileNotify.transMode = TransferFileTypeFileTypeOnline;
  return self;
}
- (BOOL) hasOfflineReady {
  return resultImfileNotify.hasOfflineReady;
}
- (UInt32) offlineReady {
  return resultImfileNotify.offlineReady;
}
- (IMFileNotifyBuilder*) setOfflineReady:(UInt32) value {
  resultImfileNotify.hasOfflineReady = YES;
  resultImfileNotify.offlineReady = value;
  return self;
}
- (IMFileNotifyBuilder*) clearOfflineReady {
  resultImfileNotify.hasOfflineReady = NO;
  resultImfileNotify.offlineReady = 0;
  return self;
}
@end

@interface IMFileHasOfflineReq ()
@property UInt32 userId;
@property (strong) NSData* attachData;
@end

@implementation IMFileHasOfflineReq

- (BOOL) hasUserId {
  return !!hasUserId_;
}
- (void) setHasUserId:(BOOL) _value_ {
  hasUserId_ = !!_value_;
}
@synthesize userId;
- (BOOL) hasAttachData {
  return !!hasAttachData_;
}
- (void) setHasAttachData:(BOOL) _value_ {
  hasAttachData_ = !!_value_;
}
@synthesize attachData;
- (instancetype) init {
  if ((self = [super init])) {
    self.userId = 0;
    self.attachData = [NSData data];
  }
  return self;
}
static IMFileHasOfflineReq* defaultIMFileHasOfflineReqInstance = nil;
+ (void) initialize {
  if (self == [IMFileHasOfflineReq class]) {
    defaultIMFileHasOfflineReqInstance = [[IMFileHasOfflineReq alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultIMFileHasOfflineReqInstance;
}
- (instancetype) defaultInstance {
  return defaultIMFileHasOfflineReqInstance;
}
- (BOOL) isInitialized {
  if (!self.hasUserId) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasUserId) {
    [output writeUInt32:1 value:self.userId];
  }
  if (self.hasAttachData) {
    [output writeData:20 value:self.attachData];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasUserId) {
    size_ += computeUInt32Size(1, self.userId);
  }
  if (self.hasAttachData) {
    size_ += computeDataSize(20, self.attachData);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (IMFileHasOfflineReq*) parseFromData:(NSData*) data {
  return (IMFileHasOfflineReq*)[[[IMFileHasOfflineReq builder] mergeFromData:data] build];
}
+ (IMFileHasOfflineReq*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMFileHasOfflineReq*)[[[IMFileHasOfflineReq builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (IMFileHasOfflineReq*) parseFromInputStream:(NSInputStream*) input {
  return (IMFileHasOfflineReq*)[[[IMFileHasOfflineReq builder] mergeFromInputStream:input] build];
}
+ (IMFileHasOfflineReq*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMFileHasOfflineReq*)[[[IMFileHasOfflineReq builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (IMFileHasOfflineReq*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (IMFileHasOfflineReq*)[[[IMFileHasOfflineReq builder] mergeFromCodedInputStream:input] build];
}
+ (IMFileHasOfflineReq*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMFileHasOfflineReq*)[[[IMFileHasOfflineReq builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (IMFileHasOfflineReqBuilder*) builder {
  return [[IMFileHasOfflineReqBuilder alloc] init];
}
+ (IMFileHasOfflineReqBuilder*) builderWithPrototype:(IMFileHasOfflineReq*) prototype {
  return [[IMFileHasOfflineReq builder] mergeFrom:prototype];
}
- (IMFileHasOfflineReqBuilder*) builder {
  return [IMFileHasOfflineReq builder];
}
- (IMFileHasOfflineReqBuilder*) toBuilder {
  return [IMFileHasOfflineReq builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasUserId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"userId", [NSNumber numberWithInteger:self.userId]];
  }
  if (self.hasAttachData) {
    [output appendFormat:@"%@%@: %@\n", indent, @"attachData", self.attachData];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasUserId) {
    [dictionary setObject: [NSNumber numberWithInteger:self.userId] forKey: @"userId"];
  }
  if (self.hasAttachData) {
    [dictionary setObject: self.attachData forKey: @"attachData"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[IMFileHasOfflineReq class]]) {
    return NO;
  }
  IMFileHasOfflineReq *otherMessage = other;
  return
      self.hasUserId == otherMessage.hasUserId &&
      (!self.hasUserId || self.userId == otherMessage.userId) &&
      self.hasAttachData == otherMessage.hasAttachData &&
      (!self.hasAttachData || [self.attachData isEqual:otherMessage.attachData]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasUserId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.userId] hash];
  }
  if (self.hasAttachData) {
    hashCode = hashCode * 31 + [self.attachData hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface IMFileHasOfflineReqBuilder()
@property (strong) IMFileHasOfflineReq* resultImfileHasOfflineReq;
@end

@implementation IMFileHasOfflineReqBuilder
@synthesize resultImfileHasOfflineReq;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultImfileHasOfflineReq = [[IMFileHasOfflineReq alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultImfileHasOfflineReq;
}
- (IMFileHasOfflineReqBuilder*) clear {
  self.resultImfileHasOfflineReq = [[IMFileHasOfflineReq alloc] init];
  return self;
}
- (IMFileHasOfflineReqBuilder*) clone {
  return [IMFileHasOfflineReq builderWithPrototype:resultImfileHasOfflineReq];
}
- (IMFileHasOfflineReq*) defaultInstance {
  return [IMFileHasOfflineReq defaultInstance];
}
- (IMFileHasOfflineReq*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (IMFileHasOfflineReq*) buildPartial {
  IMFileHasOfflineReq* returnMe = resultImfileHasOfflineReq;
  self.resultImfileHasOfflineReq = nil;
  return returnMe;
}
- (IMFileHasOfflineReqBuilder*) mergeFrom:(IMFileHasOfflineReq*) other {
  if (other == [IMFileHasOfflineReq defaultInstance]) {
    return self;
  }
  if (other.hasUserId) {
    [self setUserId:other.userId];
  }
  if (other.hasAttachData) {
    [self setAttachData:other.attachData];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (IMFileHasOfflineReqBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (IMFileHasOfflineReqBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setUserId:[input readUInt32]];
        break;
      }
      case 162: {
        [self setAttachData:[input readData]];
        break;
      }
    }
  }
}
- (BOOL) hasUserId {
  return resultImfileHasOfflineReq.hasUserId;
}
- (UInt32) userId {
  return resultImfileHasOfflineReq.userId;
}
- (IMFileHasOfflineReqBuilder*) setUserId:(UInt32) value {
  resultImfileHasOfflineReq.hasUserId = YES;
  resultImfileHasOfflineReq.userId = value;
  return self;
}
- (IMFileHasOfflineReqBuilder*) clearUserId {
  resultImfileHasOfflineReq.hasUserId = NO;
  resultImfileHasOfflineReq.userId = 0;
  return self;
}
- (BOOL) hasAttachData {
  return resultImfileHasOfflineReq.hasAttachData;
}
- (NSData*) attachData {
  return resultImfileHasOfflineReq.attachData;
}
- (IMFileHasOfflineReqBuilder*) setAttachData:(NSData*) value {
  resultImfileHasOfflineReq.hasAttachData = YES;
  resultImfileHasOfflineReq.attachData = value;
  return self;
}
- (IMFileHasOfflineReqBuilder*) clearAttachData {
  resultImfileHasOfflineReq.hasAttachData = NO;
  resultImfileHasOfflineReq.attachData = [NSData data];
  return self;
}
@end

@interface IMFileHasOfflineRsp ()
@property UInt32 userId;
@property (strong) NSMutableArray * offlineFileListArray;
@property (strong) NSMutableArray * ipAddrListArray;
@property (strong) NSData* attachData;
@end

@implementation IMFileHasOfflineRsp

- (BOOL) hasUserId {
  return !!hasUserId_;
}
- (void) setHasUserId:(BOOL) _value_ {
  hasUserId_ = !!_value_;
}
@synthesize userId;
@synthesize offlineFileListArray;
@dynamic offlineFileList;
@synthesize ipAddrListArray;
@dynamic ipAddrList;
- (BOOL) hasAttachData {
  return !!hasAttachData_;
}
- (void) setHasAttachData:(BOOL) _value_ {
  hasAttachData_ = !!_value_;
}
@synthesize attachData;
- (instancetype) init {
  if ((self = [super init])) {
    self.userId = 0;
    self.attachData = [NSData data];
  }
  return self;
}
static IMFileHasOfflineRsp* defaultIMFileHasOfflineRspInstance = nil;
+ (void) initialize {
  if (self == [IMFileHasOfflineRsp class]) {
    defaultIMFileHasOfflineRspInstance = [[IMFileHasOfflineRsp alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultIMFileHasOfflineRspInstance;
}
- (instancetype) defaultInstance {
  return defaultIMFileHasOfflineRspInstance;
}
- (NSArray *)offlineFileList {
  return offlineFileListArray;
}
- (OfflineFileInfo*)offlineFileListAtIndex:(NSUInteger)index {
  return [offlineFileListArray objectAtIndex:index];
}
- (NSArray *)ipAddrList {
  return ipAddrListArray;
}
- (IpAddr*)ipAddrListAtIndex:(NSUInteger)index {
  return [ipAddrListArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  if (!self.hasUserId) {
    return NO;
  }
  __block BOOL isInitofflineFileList = YES;
   [self.offlineFileList enumerateObjectsUsingBlock:^(OfflineFileInfo *element, NSUInteger idx, BOOL *stop) {
    if (!element.isInitialized) {
      isInitofflineFileList = NO;
      *stop = YES;
    }
  }];
  if (!isInitofflineFileList) return isInitofflineFileList;
  __block BOOL isInitipAddrList = YES;
   [self.ipAddrList enumerateObjectsUsingBlock:^(IpAddr *element, NSUInteger idx, BOOL *stop) {
    if (!element.isInitialized) {
      isInitipAddrList = NO;
      *stop = YES;
    }
  }];
  if (!isInitipAddrList) return isInitipAddrList;
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasUserId) {
    [output writeUInt32:1 value:self.userId];
  }
  [self.offlineFileListArray enumerateObjectsUsingBlock:^(OfflineFileInfo *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:2 value:element];
  }];
  [self.ipAddrListArray enumerateObjectsUsingBlock:^(IpAddr *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:3 value:element];
  }];
  if (self.hasAttachData) {
    [output writeData:20 value:self.attachData];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasUserId) {
    size_ += computeUInt32Size(1, self.userId);
  }
  [self.offlineFileListArray enumerateObjectsUsingBlock:^(OfflineFileInfo *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(2, element);
  }];
  [self.ipAddrListArray enumerateObjectsUsingBlock:^(IpAddr *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(3, element);
  }];
  if (self.hasAttachData) {
    size_ += computeDataSize(20, self.attachData);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (IMFileHasOfflineRsp*) parseFromData:(NSData*) data {
  return (IMFileHasOfflineRsp*)[[[IMFileHasOfflineRsp builder] mergeFromData:data] build];
}
+ (IMFileHasOfflineRsp*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMFileHasOfflineRsp*)[[[IMFileHasOfflineRsp builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (IMFileHasOfflineRsp*) parseFromInputStream:(NSInputStream*) input {
  return (IMFileHasOfflineRsp*)[[[IMFileHasOfflineRsp builder] mergeFromInputStream:input] build];
}
+ (IMFileHasOfflineRsp*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMFileHasOfflineRsp*)[[[IMFileHasOfflineRsp builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (IMFileHasOfflineRsp*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (IMFileHasOfflineRsp*)[[[IMFileHasOfflineRsp builder] mergeFromCodedInputStream:input] build];
}
+ (IMFileHasOfflineRsp*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMFileHasOfflineRsp*)[[[IMFileHasOfflineRsp builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (IMFileHasOfflineRspBuilder*) builder {
  return [[IMFileHasOfflineRspBuilder alloc] init];
}
+ (IMFileHasOfflineRspBuilder*) builderWithPrototype:(IMFileHasOfflineRsp*) prototype {
  return [[IMFileHasOfflineRsp builder] mergeFrom:prototype];
}
- (IMFileHasOfflineRspBuilder*) builder {
  return [IMFileHasOfflineRsp builder];
}
- (IMFileHasOfflineRspBuilder*) toBuilder {
  return [IMFileHasOfflineRsp builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasUserId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"userId", [NSNumber numberWithInteger:self.userId]];
  }
  [self.offlineFileListArray enumerateObjectsUsingBlock:^(OfflineFileInfo *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"offlineFileList"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  [self.ipAddrListArray enumerateObjectsUsingBlock:^(IpAddr *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"ipAddrList"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  if (self.hasAttachData) {
    [output appendFormat:@"%@%@: %@\n", indent, @"attachData", self.attachData];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasUserId) {
    [dictionary setObject: [NSNumber numberWithInteger:self.userId] forKey: @"userId"];
  }
  for (OfflineFileInfo* element in self.offlineFileListArray) {
    NSMutableDictionary *elementDictionary = [NSMutableDictionary dictionary];
    [element storeInDictionary:elementDictionary];
    [dictionary setObject:[NSDictionary dictionaryWithDictionary:elementDictionary] forKey:@"offlineFileList"];
  }
  for (IpAddr* element in self.ipAddrListArray) {
    NSMutableDictionary *elementDictionary = [NSMutableDictionary dictionary];
    [element storeInDictionary:elementDictionary];
    [dictionary setObject:[NSDictionary dictionaryWithDictionary:elementDictionary] forKey:@"ipAddrList"];
  }
  if (self.hasAttachData) {
    [dictionary setObject: self.attachData forKey: @"attachData"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[IMFileHasOfflineRsp class]]) {
    return NO;
  }
  IMFileHasOfflineRsp *otherMessage = other;
  return
      self.hasUserId == otherMessage.hasUserId &&
      (!self.hasUserId || self.userId == otherMessage.userId) &&
      [self.offlineFileListArray isEqualToArray:otherMessage.offlineFileListArray] &&
      [self.ipAddrListArray isEqualToArray:otherMessage.ipAddrListArray] &&
      self.hasAttachData == otherMessage.hasAttachData &&
      (!self.hasAttachData || [self.attachData isEqual:otherMessage.attachData]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasUserId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.userId] hash];
  }
  [self.offlineFileListArray enumerateObjectsUsingBlock:^(OfflineFileInfo *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  [self.ipAddrListArray enumerateObjectsUsingBlock:^(IpAddr *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  if (self.hasAttachData) {
    hashCode = hashCode * 31 + [self.attachData hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface IMFileHasOfflineRspBuilder()
@property (strong) IMFileHasOfflineRsp* resultImfileHasOfflineRsp;
@end

@implementation IMFileHasOfflineRspBuilder
@synthesize resultImfileHasOfflineRsp;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultImfileHasOfflineRsp = [[IMFileHasOfflineRsp alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultImfileHasOfflineRsp;
}
- (IMFileHasOfflineRspBuilder*) clear {
  self.resultImfileHasOfflineRsp = [[IMFileHasOfflineRsp alloc] init];
  return self;
}
- (IMFileHasOfflineRspBuilder*) clone {
  return [IMFileHasOfflineRsp builderWithPrototype:resultImfileHasOfflineRsp];
}
- (IMFileHasOfflineRsp*) defaultInstance {
  return [IMFileHasOfflineRsp defaultInstance];
}
- (IMFileHasOfflineRsp*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (IMFileHasOfflineRsp*) buildPartial {
  IMFileHasOfflineRsp* returnMe = resultImfileHasOfflineRsp;
  self.resultImfileHasOfflineRsp = nil;
  return returnMe;
}
- (IMFileHasOfflineRspBuilder*) mergeFrom:(IMFileHasOfflineRsp*) other {
  if (other == [IMFileHasOfflineRsp defaultInstance]) {
    return self;
  }
  if (other.hasUserId) {
    [self setUserId:other.userId];
  }
  if (other.offlineFileListArray.count > 0) {
    if (resultImfileHasOfflineRsp.offlineFileListArray == nil) {
      resultImfileHasOfflineRsp.offlineFileListArray = [[NSMutableArray alloc] initWithArray:other.offlineFileListArray];
    } else {
      [resultImfileHasOfflineRsp.offlineFileListArray addObjectsFromArray:other.offlineFileListArray];
    }
  }
  if (other.ipAddrListArray.count > 0) {
    if (resultImfileHasOfflineRsp.ipAddrListArray == nil) {
      resultImfileHasOfflineRsp.ipAddrListArray = [[NSMutableArray alloc] initWithArray:other.ipAddrListArray];
    } else {
      [resultImfileHasOfflineRsp.ipAddrListArray addObjectsFromArray:other.ipAddrListArray];
    }
  }
  if (other.hasAttachData) {
    [self setAttachData:other.attachData];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (IMFileHasOfflineRspBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (IMFileHasOfflineRspBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setUserId:[input readUInt32]];
        break;
      }
      case 18: {
        OfflineFileInfoBuilder* subBuilder = [OfflineFileInfo builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addOfflineFileList:[subBuilder buildPartial]];
        break;
      }
      case 26: {
        IpAddrBuilder* subBuilder = [IpAddr builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addIpAddrList:[subBuilder buildPartial]];
        break;
      }
      case 162: {
        [self setAttachData:[input readData]];
        break;
      }
    }
  }
}
- (BOOL) hasUserId {
  return resultImfileHasOfflineRsp.hasUserId;
}
- (UInt32) userId {
  return resultImfileHasOfflineRsp.userId;
}
- (IMFileHasOfflineRspBuilder*) setUserId:(UInt32) value {
  resultImfileHasOfflineRsp.hasUserId = YES;
  resultImfileHasOfflineRsp.userId = value;
  return self;
}
- (IMFileHasOfflineRspBuilder*) clearUserId {
  resultImfileHasOfflineRsp.hasUserId = NO;
  resultImfileHasOfflineRsp.userId = 0;
  return self;
}
- (NSMutableArray *)offlineFileList {
  return resultImfileHasOfflineRsp.offlineFileListArray;
}
- (OfflineFileInfo*)offlineFileListAtIndex:(NSUInteger)index {
  return [resultImfileHasOfflineRsp offlineFileListAtIndex:index];
}
- (IMFileHasOfflineRspBuilder *)addOfflineFileList:(OfflineFileInfo*)value {
  if (resultImfileHasOfflineRsp.offlineFileListArray == nil) {
    resultImfileHasOfflineRsp.offlineFileListArray = [[NSMutableArray alloc]init];
  }
  [resultImfileHasOfflineRsp.offlineFileListArray addObject:value];
  return self;
}
- (IMFileHasOfflineRspBuilder *)setOfflineFileListArray:(NSArray *)array {
  resultImfileHasOfflineRsp.offlineFileListArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (IMFileHasOfflineRspBuilder *)clearOfflineFileList {
  resultImfileHasOfflineRsp.offlineFileListArray = nil;
  return self;
}
- (NSMutableArray *)ipAddrList {
  return resultImfileHasOfflineRsp.ipAddrListArray;
}
- (IpAddr*)ipAddrListAtIndex:(NSUInteger)index {
  return [resultImfileHasOfflineRsp ipAddrListAtIndex:index];
}
- (IMFileHasOfflineRspBuilder *)addIpAddrList:(IpAddr*)value {
  if (resultImfileHasOfflineRsp.ipAddrListArray == nil) {
    resultImfileHasOfflineRsp.ipAddrListArray = [[NSMutableArray alloc]init];
  }
  [resultImfileHasOfflineRsp.ipAddrListArray addObject:value];
  return self;
}
- (IMFileHasOfflineRspBuilder *)setIpAddrListArray:(NSArray *)array {
  resultImfileHasOfflineRsp.ipAddrListArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (IMFileHasOfflineRspBuilder *)clearIpAddrList {
  resultImfileHasOfflineRsp.ipAddrListArray = nil;
  return self;
}
- (BOOL) hasAttachData {
  return resultImfileHasOfflineRsp.hasAttachData;
}
- (NSData*) attachData {
  return resultImfileHasOfflineRsp.attachData;
}
- (IMFileHasOfflineRspBuilder*) setAttachData:(NSData*) value {
  resultImfileHasOfflineRsp.hasAttachData = YES;
  resultImfileHasOfflineRsp.attachData = value;
  return self;
}
- (IMFileHasOfflineRspBuilder*) clearAttachData {
  resultImfileHasOfflineRsp.hasAttachData = NO;
  resultImfileHasOfflineRsp.attachData = [NSData data];
  return self;
}
@end

@interface IMFileAddOfflineReq ()
@property UInt32 fromUserId;
@property UInt32 toUserId;
@property (strong) NSString* taskId;
@property (strong) NSString* fileName;
@property UInt32 fileSize;
@end

@implementation IMFileAddOfflineReq

- (BOOL) hasFromUserId {
  return !!hasFromUserId_;
}
- (void) setHasFromUserId:(BOOL) _value_ {
  hasFromUserId_ = !!_value_;
}
@synthesize fromUserId;
- (BOOL) hasToUserId {
  return !!hasToUserId_;
}
- (void) setHasToUserId:(BOOL) _value_ {
  hasToUserId_ = !!_value_;
}
@synthesize toUserId;
- (BOOL) hasTaskId {
  return !!hasTaskId_;
}
- (void) setHasTaskId:(BOOL) _value_ {
  hasTaskId_ = !!_value_;
}
@synthesize taskId;
- (BOOL) hasFileName {
  return !!hasFileName_;
}
- (void) setHasFileName:(BOOL) _value_ {
  hasFileName_ = !!_value_;
}
@synthesize fileName;
- (BOOL) hasFileSize {
  return !!hasFileSize_;
}
- (void) setHasFileSize:(BOOL) _value_ {
  hasFileSize_ = !!_value_;
}
@synthesize fileSize;
- (instancetype) init {
  if ((self = [super init])) {
    self.fromUserId = 0;
    self.toUserId = 0;
    self.taskId = @"";
    self.fileName = @"";
    self.fileSize = 0;
  }
  return self;
}
static IMFileAddOfflineReq* defaultIMFileAddOfflineReqInstance = nil;
+ (void) initialize {
  if (self == [IMFileAddOfflineReq class]) {
    defaultIMFileAddOfflineReqInstance = [[IMFileAddOfflineReq alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultIMFileAddOfflineReqInstance;
}
- (instancetype) defaultInstance {
  return defaultIMFileAddOfflineReqInstance;
}
- (BOOL) isInitialized {
  if (!self.hasFromUserId) {
    return NO;
  }
  if (!self.hasToUserId) {
    return NO;
  }
  if (!self.hasTaskId) {
    return NO;
  }
  if (!self.hasFileName) {
    return NO;
  }
  if (!self.hasFileSize) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasFromUserId) {
    [output writeUInt32:1 value:self.fromUserId];
  }
  if (self.hasToUserId) {
    [output writeUInt32:2 value:self.toUserId];
  }
  if (self.hasTaskId) {
    [output writeString:3 value:self.taskId];
  }
  if (self.hasFileName) {
    [output writeString:4 value:self.fileName];
  }
  if (self.hasFileSize) {
    [output writeUInt32:5 value:self.fileSize];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasFromUserId) {
    size_ += computeUInt32Size(1, self.fromUserId);
  }
  if (self.hasToUserId) {
    size_ += computeUInt32Size(2, self.toUserId);
  }
  if (self.hasTaskId) {
    size_ += computeStringSize(3, self.taskId);
  }
  if (self.hasFileName) {
    size_ += computeStringSize(4, self.fileName);
  }
  if (self.hasFileSize) {
    size_ += computeUInt32Size(5, self.fileSize);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (IMFileAddOfflineReq*) parseFromData:(NSData*) data {
  return (IMFileAddOfflineReq*)[[[IMFileAddOfflineReq builder] mergeFromData:data] build];
}
+ (IMFileAddOfflineReq*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMFileAddOfflineReq*)[[[IMFileAddOfflineReq builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (IMFileAddOfflineReq*) parseFromInputStream:(NSInputStream*) input {
  return (IMFileAddOfflineReq*)[[[IMFileAddOfflineReq builder] mergeFromInputStream:input] build];
}
+ (IMFileAddOfflineReq*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMFileAddOfflineReq*)[[[IMFileAddOfflineReq builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (IMFileAddOfflineReq*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (IMFileAddOfflineReq*)[[[IMFileAddOfflineReq builder] mergeFromCodedInputStream:input] build];
}
+ (IMFileAddOfflineReq*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMFileAddOfflineReq*)[[[IMFileAddOfflineReq builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (IMFileAddOfflineReqBuilder*) builder {
  return [[IMFileAddOfflineReqBuilder alloc] init];
}
+ (IMFileAddOfflineReqBuilder*) builderWithPrototype:(IMFileAddOfflineReq*) prototype {
  return [[IMFileAddOfflineReq builder] mergeFrom:prototype];
}
- (IMFileAddOfflineReqBuilder*) builder {
  return [IMFileAddOfflineReq builder];
}
- (IMFileAddOfflineReqBuilder*) toBuilder {
  return [IMFileAddOfflineReq builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasFromUserId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"fromUserId", [NSNumber numberWithInteger:self.fromUserId]];
  }
  if (self.hasToUserId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"toUserId", [NSNumber numberWithInteger:self.toUserId]];
  }
  if (self.hasTaskId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"taskId", self.taskId];
  }
  if (self.hasFileName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"fileName", self.fileName];
  }
  if (self.hasFileSize) {
    [output appendFormat:@"%@%@: %@\n", indent, @"fileSize", [NSNumber numberWithInteger:self.fileSize]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasFromUserId) {
    [dictionary setObject: [NSNumber numberWithInteger:self.fromUserId] forKey: @"fromUserId"];
  }
  if (self.hasToUserId) {
    [dictionary setObject: [NSNumber numberWithInteger:self.toUserId] forKey: @"toUserId"];
  }
  if (self.hasTaskId) {
    [dictionary setObject: self.taskId forKey: @"taskId"];
  }
  if (self.hasFileName) {
    [dictionary setObject: self.fileName forKey: @"fileName"];
  }
  if (self.hasFileSize) {
    [dictionary setObject: [NSNumber numberWithInteger:self.fileSize] forKey: @"fileSize"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[IMFileAddOfflineReq class]]) {
    return NO;
  }
  IMFileAddOfflineReq *otherMessage = other;
  return
      self.hasFromUserId == otherMessage.hasFromUserId &&
      (!self.hasFromUserId || self.fromUserId == otherMessage.fromUserId) &&
      self.hasToUserId == otherMessage.hasToUserId &&
      (!self.hasToUserId || self.toUserId == otherMessage.toUserId) &&
      self.hasTaskId == otherMessage.hasTaskId &&
      (!self.hasTaskId || [self.taskId isEqual:otherMessage.taskId]) &&
      self.hasFileName == otherMessage.hasFileName &&
      (!self.hasFileName || [self.fileName isEqual:otherMessage.fileName]) &&
      self.hasFileSize == otherMessage.hasFileSize &&
      (!self.hasFileSize || self.fileSize == otherMessage.fileSize) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasFromUserId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.fromUserId] hash];
  }
  if (self.hasToUserId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.toUserId] hash];
  }
  if (self.hasTaskId) {
    hashCode = hashCode * 31 + [self.taskId hash];
  }
  if (self.hasFileName) {
    hashCode = hashCode * 31 + [self.fileName hash];
  }
  if (self.hasFileSize) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.fileSize] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface IMFileAddOfflineReqBuilder()
@property (strong) IMFileAddOfflineReq* resultImfileAddOfflineReq;
@end

@implementation IMFileAddOfflineReqBuilder
@synthesize resultImfileAddOfflineReq;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultImfileAddOfflineReq = [[IMFileAddOfflineReq alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultImfileAddOfflineReq;
}
- (IMFileAddOfflineReqBuilder*) clear {
  self.resultImfileAddOfflineReq = [[IMFileAddOfflineReq alloc] init];
  return self;
}
- (IMFileAddOfflineReqBuilder*) clone {
  return [IMFileAddOfflineReq builderWithPrototype:resultImfileAddOfflineReq];
}
- (IMFileAddOfflineReq*) defaultInstance {
  return [IMFileAddOfflineReq defaultInstance];
}
- (IMFileAddOfflineReq*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (IMFileAddOfflineReq*) buildPartial {
  IMFileAddOfflineReq* returnMe = resultImfileAddOfflineReq;
  self.resultImfileAddOfflineReq = nil;
  return returnMe;
}
- (IMFileAddOfflineReqBuilder*) mergeFrom:(IMFileAddOfflineReq*) other {
  if (other == [IMFileAddOfflineReq defaultInstance]) {
    return self;
  }
  if (other.hasFromUserId) {
    [self setFromUserId:other.fromUserId];
  }
  if (other.hasToUserId) {
    [self setToUserId:other.toUserId];
  }
  if (other.hasTaskId) {
    [self setTaskId:other.taskId];
  }
  if (other.hasFileName) {
    [self setFileName:other.fileName];
  }
  if (other.hasFileSize) {
    [self setFileSize:other.fileSize];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (IMFileAddOfflineReqBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (IMFileAddOfflineReqBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setFromUserId:[input readUInt32]];
        break;
      }
      case 16: {
        [self setToUserId:[input readUInt32]];
        break;
      }
      case 26: {
        [self setTaskId:[input readString]];
        break;
      }
      case 34: {
        [self setFileName:[input readString]];
        break;
      }
      case 40: {
        [self setFileSize:[input readUInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasFromUserId {
  return resultImfileAddOfflineReq.hasFromUserId;
}
- (UInt32) fromUserId {
  return resultImfileAddOfflineReq.fromUserId;
}
- (IMFileAddOfflineReqBuilder*) setFromUserId:(UInt32) value {
  resultImfileAddOfflineReq.hasFromUserId = YES;
  resultImfileAddOfflineReq.fromUserId = value;
  return self;
}
- (IMFileAddOfflineReqBuilder*) clearFromUserId {
  resultImfileAddOfflineReq.hasFromUserId = NO;
  resultImfileAddOfflineReq.fromUserId = 0;
  return self;
}
- (BOOL) hasToUserId {
  return resultImfileAddOfflineReq.hasToUserId;
}
- (UInt32) toUserId {
  return resultImfileAddOfflineReq.toUserId;
}
- (IMFileAddOfflineReqBuilder*) setToUserId:(UInt32) value {
  resultImfileAddOfflineReq.hasToUserId = YES;
  resultImfileAddOfflineReq.toUserId = value;
  return self;
}
- (IMFileAddOfflineReqBuilder*) clearToUserId {
  resultImfileAddOfflineReq.hasToUserId = NO;
  resultImfileAddOfflineReq.toUserId = 0;
  return self;
}
- (BOOL) hasTaskId {
  return resultImfileAddOfflineReq.hasTaskId;
}
- (NSString*) taskId {
  return resultImfileAddOfflineReq.taskId;
}
- (IMFileAddOfflineReqBuilder*) setTaskId:(NSString*) value {
  resultImfileAddOfflineReq.hasTaskId = YES;
  resultImfileAddOfflineReq.taskId = value;
  return self;
}
- (IMFileAddOfflineReqBuilder*) clearTaskId {
  resultImfileAddOfflineReq.hasTaskId = NO;
  resultImfileAddOfflineReq.taskId = @"";
  return self;
}
- (BOOL) hasFileName {
  return resultImfileAddOfflineReq.hasFileName;
}
- (NSString*) fileName {
  return resultImfileAddOfflineReq.fileName;
}
- (IMFileAddOfflineReqBuilder*) setFileName:(NSString*) value {
  resultImfileAddOfflineReq.hasFileName = YES;
  resultImfileAddOfflineReq.fileName = value;
  return self;
}
- (IMFileAddOfflineReqBuilder*) clearFileName {
  resultImfileAddOfflineReq.hasFileName = NO;
  resultImfileAddOfflineReq.fileName = @"";
  return self;
}
- (BOOL) hasFileSize {
  return resultImfileAddOfflineReq.hasFileSize;
}
- (UInt32) fileSize {
  return resultImfileAddOfflineReq.fileSize;
}
- (IMFileAddOfflineReqBuilder*) setFileSize:(UInt32) value {
  resultImfileAddOfflineReq.hasFileSize = YES;
  resultImfileAddOfflineReq.fileSize = value;
  return self;
}
- (IMFileAddOfflineReqBuilder*) clearFileSize {
  resultImfileAddOfflineReq.hasFileSize = NO;
  resultImfileAddOfflineReq.fileSize = 0;
  return self;
}
@end

@interface IMFileDelOfflineReq ()
@property UInt32 fromUserId;
@property UInt32 toUserId;
@property (strong) NSString* taskId;
@end

@implementation IMFileDelOfflineReq

- (BOOL) hasFromUserId {
  return !!hasFromUserId_;
}
- (void) setHasFromUserId:(BOOL) _value_ {
  hasFromUserId_ = !!_value_;
}
@synthesize fromUserId;
- (BOOL) hasToUserId {
  return !!hasToUserId_;
}
- (void) setHasToUserId:(BOOL) _value_ {
  hasToUserId_ = !!_value_;
}
@synthesize toUserId;
- (BOOL) hasTaskId {
  return !!hasTaskId_;
}
- (void) setHasTaskId:(BOOL) _value_ {
  hasTaskId_ = !!_value_;
}
@synthesize taskId;
- (instancetype) init {
  if ((self = [super init])) {
    self.fromUserId = 0;
    self.toUserId = 0;
    self.taskId = @"";
  }
  return self;
}
static IMFileDelOfflineReq* defaultIMFileDelOfflineReqInstance = nil;
+ (void) initialize {
  if (self == [IMFileDelOfflineReq class]) {
    defaultIMFileDelOfflineReqInstance = [[IMFileDelOfflineReq alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultIMFileDelOfflineReqInstance;
}
- (instancetype) defaultInstance {
  return defaultIMFileDelOfflineReqInstance;
}
- (BOOL) isInitialized {
  if (!self.hasFromUserId) {
    return NO;
  }
  if (!self.hasToUserId) {
    return NO;
  }
  if (!self.hasTaskId) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasFromUserId) {
    [output writeUInt32:1 value:self.fromUserId];
  }
  if (self.hasToUserId) {
    [output writeUInt32:2 value:self.toUserId];
  }
  if (self.hasTaskId) {
    [output writeString:3 value:self.taskId];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasFromUserId) {
    size_ += computeUInt32Size(1, self.fromUserId);
  }
  if (self.hasToUserId) {
    size_ += computeUInt32Size(2, self.toUserId);
  }
  if (self.hasTaskId) {
    size_ += computeStringSize(3, self.taskId);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (IMFileDelOfflineReq*) parseFromData:(NSData*) data {
  return (IMFileDelOfflineReq*)[[[IMFileDelOfflineReq builder] mergeFromData:data] build];
}
+ (IMFileDelOfflineReq*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMFileDelOfflineReq*)[[[IMFileDelOfflineReq builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (IMFileDelOfflineReq*) parseFromInputStream:(NSInputStream*) input {
  return (IMFileDelOfflineReq*)[[[IMFileDelOfflineReq builder] mergeFromInputStream:input] build];
}
+ (IMFileDelOfflineReq*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMFileDelOfflineReq*)[[[IMFileDelOfflineReq builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (IMFileDelOfflineReq*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (IMFileDelOfflineReq*)[[[IMFileDelOfflineReq builder] mergeFromCodedInputStream:input] build];
}
+ (IMFileDelOfflineReq*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMFileDelOfflineReq*)[[[IMFileDelOfflineReq builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (IMFileDelOfflineReqBuilder*) builder {
  return [[IMFileDelOfflineReqBuilder alloc] init];
}
+ (IMFileDelOfflineReqBuilder*) builderWithPrototype:(IMFileDelOfflineReq*) prototype {
  return [[IMFileDelOfflineReq builder] mergeFrom:prototype];
}
- (IMFileDelOfflineReqBuilder*) builder {
  return [IMFileDelOfflineReq builder];
}
- (IMFileDelOfflineReqBuilder*) toBuilder {
  return [IMFileDelOfflineReq builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasFromUserId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"fromUserId", [NSNumber numberWithInteger:self.fromUserId]];
  }
  if (self.hasToUserId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"toUserId", [NSNumber numberWithInteger:self.toUserId]];
  }
  if (self.hasTaskId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"taskId", self.taskId];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasFromUserId) {
    [dictionary setObject: [NSNumber numberWithInteger:self.fromUserId] forKey: @"fromUserId"];
  }
  if (self.hasToUserId) {
    [dictionary setObject: [NSNumber numberWithInteger:self.toUserId] forKey: @"toUserId"];
  }
  if (self.hasTaskId) {
    [dictionary setObject: self.taskId forKey: @"taskId"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[IMFileDelOfflineReq class]]) {
    return NO;
  }
  IMFileDelOfflineReq *otherMessage = other;
  return
      self.hasFromUserId == otherMessage.hasFromUserId &&
      (!self.hasFromUserId || self.fromUserId == otherMessage.fromUserId) &&
      self.hasToUserId == otherMessage.hasToUserId &&
      (!self.hasToUserId || self.toUserId == otherMessage.toUserId) &&
      self.hasTaskId == otherMessage.hasTaskId &&
      (!self.hasTaskId || [self.taskId isEqual:otherMessage.taskId]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasFromUserId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.fromUserId] hash];
  }
  if (self.hasToUserId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.toUserId] hash];
  }
  if (self.hasTaskId) {
    hashCode = hashCode * 31 + [self.taskId hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface IMFileDelOfflineReqBuilder()
@property (strong) IMFileDelOfflineReq* resultImfileDelOfflineReq;
@end

@implementation IMFileDelOfflineReqBuilder
@synthesize resultImfileDelOfflineReq;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultImfileDelOfflineReq = [[IMFileDelOfflineReq alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultImfileDelOfflineReq;
}
- (IMFileDelOfflineReqBuilder*) clear {
  self.resultImfileDelOfflineReq = [[IMFileDelOfflineReq alloc] init];
  return self;
}
- (IMFileDelOfflineReqBuilder*) clone {
  return [IMFileDelOfflineReq builderWithPrototype:resultImfileDelOfflineReq];
}
- (IMFileDelOfflineReq*) defaultInstance {
  return [IMFileDelOfflineReq defaultInstance];
}
- (IMFileDelOfflineReq*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (IMFileDelOfflineReq*) buildPartial {
  IMFileDelOfflineReq* returnMe = resultImfileDelOfflineReq;
  self.resultImfileDelOfflineReq = nil;
  return returnMe;
}
- (IMFileDelOfflineReqBuilder*) mergeFrom:(IMFileDelOfflineReq*) other {
  if (other == [IMFileDelOfflineReq defaultInstance]) {
    return self;
  }
  if (other.hasFromUserId) {
    [self setFromUserId:other.fromUserId];
  }
  if (other.hasToUserId) {
    [self setToUserId:other.toUserId];
  }
  if (other.hasTaskId) {
    [self setTaskId:other.taskId];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (IMFileDelOfflineReqBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (IMFileDelOfflineReqBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setFromUserId:[input readUInt32]];
        break;
      }
      case 16: {
        [self setToUserId:[input readUInt32]];
        break;
      }
      case 26: {
        [self setTaskId:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasFromUserId {
  return resultImfileDelOfflineReq.hasFromUserId;
}
- (UInt32) fromUserId {
  return resultImfileDelOfflineReq.fromUserId;
}
- (IMFileDelOfflineReqBuilder*) setFromUserId:(UInt32) value {
  resultImfileDelOfflineReq.hasFromUserId = YES;
  resultImfileDelOfflineReq.fromUserId = value;
  return self;
}
- (IMFileDelOfflineReqBuilder*) clearFromUserId {
  resultImfileDelOfflineReq.hasFromUserId = NO;
  resultImfileDelOfflineReq.fromUserId = 0;
  return self;
}
- (BOOL) hasToUserId {
  return resultImfileDelOfflineReq.hasToUserId;
}
- (UInt32) toUserId {
  return resultImfileDelOfflineReq.toUserId;
}
- (IMFileDelOfflineReqBuilder*) setToUserId:(UInt32) value {
  resultImfileDelOfflineReq.hasToUserId = YES;
  resultImfileDelOfflineReq.toUserId = value;
  return self;
}
- (IMFileDelOfflineReqBuilder*) clearToUserId {
  resultImfileDelOfflineReq.hasToUserId = NO;
  resultImfileDelOfflineReq.toUserId = 0;
  return self;
}
- (BOOL) hasTaskId {
  return resultImfileDelOfflineReq.hasTaskId;
}
- (NSString*) taskId {
  return resultImfileDelOfflineReq.taskId;
}
- (IMFileDelOfflineReqBuilder*) setTaskId:(NSString*) value {
  resultImfileDelOfflineReq.hasTaskId = YES;
  resultImfileDelOfflineReq.taskId = value;
  return self;
}
- (IMFileDelOfflineReqBuilder*) clearTaskId {
  resultImfileDelOfflineReq.hasTaskId = NO;
  resultImfileDelOfflineReq.taskId = @"";
  return self;
}
@end


// @@protoc_insertion_point(global_scope)
