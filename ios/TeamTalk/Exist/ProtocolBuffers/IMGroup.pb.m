// Generated by the protocol buffer compiler.  DO NOT EDIT!

#import "IMGroup.pb.h"
// @@protoc_insertion_point(imports)

@implementation ImgroupRoot
static PBExtensionRegistry* extensionRegistry = nil;
+ (PBExtensionRegistry*) extensionRegistry {
  return extensionRegistry;
}

+ (void) initialize {
  if (self == [ImgroupRoot class]) {
    PBMutableExtensionRegistry* registry = [PBMutableExtensionRegistry registry];
    [self registerAllExtensions:registry];
    [ImbaseDefineRoot registerAllExtensions:registry];
    extensionRegistry = registry;
  }
}
+ (void) registerAllExtensions:(PBMutableExtensionRegistry*) registry {
}
@end

@interface IMNormalGroupListReq ()
@property UInt32 userId;
@property (strong) NSData* attachData;
@end

@implementation IMNormalGroupListReq

- (BOOL) hasUserId {
  return !!hasUserId_;
}
- (void) setHasUserId:(BOOL) _value_ {
  hasUserId_ = !!_value_;
}
@synthesize userId;
- (BOOL) hasAttachData {
  return !!hasAttachData_;
}
- (void) setHasAttachData:(BOOL) _value_ {
  hasAttachData_ = !!_value_;
}
@synthesize attachData;
- (instancetype) init {
  if ((self = [super init])) {
    self.userId = 0;
    self.attachData = [NSData data];
  }
  return self;
}
static IMNormalGroupListReq* defaultIMNormalGroupListReqInstance = nil;
+ (void) initialize {
  if (self == [IMNormalGroupListReq class]) {
    defaultIMNormalGroupListReqInstance = [[IMNormalGroupListReq alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultIMNormalGroupListReqInstance;
}
- (instancetype) defaultInstance {
  return defaultIMNormalGroupListReqInstance;
}
- (BOOL) isInitialized {
  if (!self.hasUserId) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasUserId) {
    [output writeUInt32:1 value:self.userId];
  }
  if (self.hasAttachData) {
    [output writeData:20 value:self.attachData];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasUserId) {
    size_ += computeUInt32Size(1, self.userId);
  }
  if (self.hasAttachData) {
    size_ += computeDataSize(20, self.attachData);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (IMNormalGroupListReq*) parseFromData:(NSData*) data {
  return (IMNormalGroupListReq*)[[[IMNormalGroupListReq builder] mergeFromData:data] build];
}
+ (IMNormalGroupListReq*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMNormalGroupListReq*)[[[IMNormalGroupListReq builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (IMNormalGroupListReq*) parseFromInputStream:(NSInputStream*) input {
  return (IMNormalGroupListReq*)[[[IMNormalGroupListReq builder] mergeFromInputStream:input] build];
}
+ (IMNormalGroupListReq*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMNormalGroupListReq*)[[[IMNormalGroupListReq builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (IMNormalGroupListReq*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (IMNormalGroupListReq*)[[[IMNormalGroupListReq builder] mergeFromCodedInputStream:input] build];
}
+ (IMNormalGroupListReq*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMNormalGroupListReq*)[[[IMNormalGroupListReq builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (IMNormalGroupListReqBuilder*) builder {
  return [[IMNormalGroupListReqBuilder alloc] init];
}
+ (IMNormalGroupListReqBuilder*) builderWithPrototype:(IMNormalGroupListReq*) prototype {
  return [[IMNormalGroupListReq builder] mergeFrom:prototype];
}
- (IMNormalGroupListReqBuilder*) builder {
  return [IMNormalGroupListReq builder];
}
- (IMNormalGroupListReqBuilder*) toBuilder {
  return [IMNormalGroupListReq builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasUserId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"userId", [NSNumber numberWithInteger:self.userId]];
  }
  if (self.hasAttachData) {
    [output appendFormat:@"%@%@: %@\n", indent, @"attachData", self.attachData];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasUserId) {
    [dictionary setObject: [NSNumber numberWithInteger:self.userId] forKey: @"userId"];
  }
  if (self.hasAttachData) {
    [dictionary setObject: self.attachData forKey: @"attachData"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[IMNormalGroupListReq class]]) {
    return NO;
  }
  IMNormalGroupListReq *otherMessage = other;
  return
      self.hasUserId == otherMessage.hasUserId &&
      (!self.hasUserId || self.userId == otherMessage.userId) &&
      self.hasAttachData == otherMessage.hasAttachData &&
      (!self.hasAttachData || [self.attachData isEqual:otherMessage.attachData]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasUserId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.userId] hash];
  }
  if (self.hasAttachData) {
    hashCode = hashCode * 31 + [self.attachData hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface IMNormalGroupListReqBuilder()
@property (strong) IMNormalGroupListReq* resultImnormalGroupListReq;
@end

@implementation IMNormalGroupListReqBuilder
@synthesize resultImnormalGroupListReq;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultImnormalGroupListReq = [[IMNormalGroupListReq alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultImnormalGroupListReq;
}
- (IMNormalGroupListReqBuilder*) clear {
  self.resultImnormalGroupListReq = [[IMNormalGroupListReq alloc] init];
  return self;
}
- (IMNormalGroupListReqBuilder*) clone {
  return [IMNormalGroupListReq builderWithPrototype:resultImnormalGroupListReq];
}
- (IMNormalGroupListReq*) defaultInstance {
  return [IMNormalGroupListReq defaultInstance];
}
- (IMNormalGroupListReq*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (IMNormalGroupListReq*) buildPartial {
  IMNormalGroupListReq* returnMe = resultImnormalGroupListReq;
  self.resultImnormalGroupListReq = nil;
  return returnMe;
}
- (IMNormalGroupListReqBuilder*) mergeFrom:(IMNormalGroupListReq*) other {
  if (other == [IMNormalGroupListReq defaultInstance]) {
    return self;
  }
  if (other.hasUserId) {
    [self setUserId:other.userId];
  }
  if (other.hasAttachData) {
    [self setAttachData:other.attachData];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (IMNormalGroupListReqBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (IMNormalGroupListReqBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setUserId:[input readUInt32]];
        break;
      }
      case 162: {
        [self setAttachData:[input readData]];
        break;
      }
    }
  }
}
- (BOOL) hasUserId {
  return resultImnormalGroupListReq.hasUserId;
}
- (UInt32) userId {
  return resultImnormalGroupListReq.userId;
}
- (IMNormalGroupListReqBuilder*) setUserId:(UInt32) value {
  resultImnormalGroupListReq.hasUserId = YES;
  resultImnormalGroupListReq.userId = value;
  return self;
}
- (IMNormalGroupListReqBuilder*) clearUserId {
  resultImnormalGroupListReq.hasUserId = NO;
  resultImnormalGroupListReq.userId = 0;
  return self;
}
- (BOOL) hasAttachData {
  return resultImnormalGroupListReq.hasAttachData;
}
- (NSData*) attachData {
  return resultImnormalGroupListReq.attachData;
}
- (IMNormalGroupListReqBuilder*) setAttachData:(NSData*) value {
  resultImnormalGroupListReq.hasAttachData = YES;
  resultImnormalGroupListReq.attachData = value;
  return self;
}
- (IMNormalGroupListReqBuilder*) clearAttachData {
  resultImnormalGroupListReq.hasAttachData = NO;
  resultImnormalGroupListReq.attachData = [NSData data];
  return self;
}
@end

@interface IMNormalGroupListRsp ()
@property UInt32 userId;
@property (strong) NSMutableArray * groupVersionListArray;
@property (strong) NSData* attachData;
@end

@implementation IMNormalGroupListRsp

- (BOOL) hasUserId {
  return !!hasUserId_;
}
- (void) setHasUserId:(BOOL) _value_ {
  hasUserId_ = !!_value_;
}
@synthesize userId;
@synthesize groupVersionListArray;
@dynamic groupVersionList;
- (BOOL) hasAttachData {
  return !!hasAttachData_;
}
- (void) setHasAttachData:(BOOL) _value_ {
  hasAttachData_ = !!_value_;
}
@synthesize attachData;
- (instancetype) init {
  if ((self = [super init])) {
    self.userId = 0;
    self.attachData = [NSData data];
  }
  return self;
}
static IMNormalGroupListRsp* defaultIMNormalGroupListRspInstance = nil;
+ (void) initialize {
  if (self == [IMNormalGroupListRsp class]) {
    defaultIMNormalGroupListRspInstance = [[IMNormalGroupListRsp alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultIMNormalGroupListRspInstance;
}
- (instancetype) defaultInstance {
  return defaultIMNormalGroupListRspInstance;
}
- (NSArray *)groupVersionList {
  return groupVersionListArray;
}
- (GroupVersionInfo*)groupVersionListAtIndex:(NSUInteger)index {
  return [groupVersionListArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  if (!self.hasUserId) {
    return NO;
  }
  __block BOOL isInitgroupVersionList = YES;
   [self.groupVersionList enumerateObjectsUsingBlock:^(GroupVersionInfo *element, NSUInteger idx, BOOL *stop) {
    if (!element.isInitialized) {
      isInitgroupVersionList = NO;
      *stop = YES;
    }
  }];
  if (!isInitgroupVersionList) return isInitgroupVersionList;
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasUserId) {
    [output writeUInt32:1 value:self.userId];
  }
  [self.groupVersionListArray enumerateObjectsUsingBlock:^(GroupVersionInfo *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:2 value:element];
  }];
  if (self.hasAttachData) {
    [output writeData:20 value:self.attachData];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasUserId) {
    size_ += computeUInt32Size(1, self.userId);
  }
  [self.groupVersionListArray enumerateObjectsUsingBlock:^(GroupVersionInfo *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(2, element);
  }];
  if (self.hasAttachData) {
    size_ += computeDataSize(20, self.attachData);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (IMNormalGroupListRsp*) parseFromData:(NSData*) data {
  return (IMNormalGroupListRsp*)[[[IMNormalGroupListRsp builder] mergeFromData:data] build];
}
+ (IMNormalGroupListRsp*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMNormalGroupListRsp*)[[[IMNormalGroupListRsp builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (IMNormalGroupListRsp*) parseFromInputStream:(NSInputStream*) input {
  return (IMNormalGroupListRsp*)[[[IMNormalGroupListRsp builder] mergeFromInputStream:input] build];
}
+ (IMNormalGroupListRsp*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMNormalGroupListRsp*)[[[IMNormalGroupListRsp builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (IMNormalGroupListRsp*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (IMNormalGroupListRsp*)[[[IMNormalGroupListRsp builder] mergeFromCodedInputStream:input] build];
}
+ (IMNormalGroupListRsp*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMNormalGroupListRsp*)[[[IMNormalGroupListRsp builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (IMNormalGroupListRspBuilder*) builder {
  return [[IMNormalGroupListRspBuilder alloc] init];
}
+ (IMNormalGroupListRspBuilder*) builderWithPrototype:(IMNormalGroupListRsp*) prototype {
  return [[IMNormalGroupListRsp builder] mergeFrom:prototype];
}
- (IMNormalGroupListRspBuilder*) builder {
  return [IMNormalGroupListRsp builder];
}
- (IMNormalGroupListRspBuilder*) toBuilder {
  return [IMNormalGroupListRsp builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasUserId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"userId", [NSNumber numberWithInteger:self.userId]];
  }
  [self.groupVersionListArray enumerateObjectsUsingBlock:^(GroupVersionInfo *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"groupVersionList"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  if (self.hasAttachData) {
    [output appendFormat:@"%@%@: %@\n", indent, @"attachData", self.attachData];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasUserId) {
    [dictionary setObject: [NSNumber numberWithInteger:self.userId] forKey: @"userId"];
  }
  for (GroupVersionInfo* element in self.groupVersionListArray) {
    NSMutableDictionary *elementDictionary = [NSMutableDictionary dictionary];
    [element storeInDictionary:elementDictionary];
    [dictionary setObject:[NSDictionary dictionaryWithDictionary:elementDictionary] forKey:@"groupVersionList"];
  }
  if (self.hasAttachData) {
    [dictionary setObject: self.attachData forKey: @"attachData"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[IMNormalGroupListRsp class]]) {
    return NO;
  }
  IMNormalGroupListRsp *otherMessage = other;
  return
      self.hasUserId == otherMessage.hasUserId &&
      (!self.hasUserId || self.userId == otherMessage.userId) &&
      [self.groupVersionListArray isEqualToArray:otherMessage.groupVersionListArray] &&
      self.hasAttachData == otherMessage.hasAttachData &&
      (!self.hasAttachData || [self.attachData isEqual:otherMessage.attachData]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasUserId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.userId] hash];
  }
  [self.groupVersionListArray enumerateObjectsUsingBlock:^(GroupVersionInfo *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  if (self.hasAttachData) {
    hashCode = hashCode * 31 + [self.attachData hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface IMNormalGroupListRspBuilder()
@property (strong) IMNormalGroupListRsp* resultImnormalGroupListRsp;
@end

@implementation IMNormalGroupListRspBuilder
@synthesize resultImnormalGroupListRsp;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultImnormalGroupListRsp = [[IMNormalGroupListRsp alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultImnormalGroupListRsp;
}
- (IMNormalGroupListRspBuilder*) clear {
  self.resultImnormalGroupListRsp = [[IMNormalGroupListRsp alloc] init];
  return self;
}
- (IMNormalGroupListRspBuilder*) clone {
  return [IMNormalGroupListRsp builderWithPrototype:resultImnormalGroupListRsp];
}
- (IMNormalGroupListRsp*) defaultInstance {
  return [IMNormalGroupListRsp defaultInstance];
}
- (IMNormalGroupListRsp*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (IMNormalGroupListRsp*) buildPartial {
  IMNormalGroupListRsp* returnMe = resultImnormalGroupListRsp;
  self.resultImnormalGroupListRsp = nil;
  return returnMe;
}
- (IMNormalGroupListRspBuilder*) mergeFrom:(IMNormalGroupListRsp*) other {
  if (other == [IMNormalGroupListRsp defaultInstance]) {
    return self;
  }
  if (other.hasUserId) {
    [self setUserId:other.userId];
  }
  if (other.groupVersionListArray.count > 0) {
    if (resultImnormalGroupListRsp.groupVersionListArray == nil) {
      resultImnormalGroupListRsp.groupVersionListArray = [[NSMutableArray alloc] initWithArray:other.groupVersionListArray];
    } else {
      [resultImnormalGroupListRsp.groupVersionListArray addObjectsFromArray:other.groupVersionListArray];
    }
  }
  if (other.hasAttachData) {
    [self setAttachData:other.attachData];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (IMNormalGroupListRspBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (IMNormalGroupListRspBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setUserId:[input readUInt32]];
        break;
      }
      case 18: {
        GroupVersionInfoBuilder* subBuilder = [GroupVersionInfo builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addGroupVersionList:[subBuilder buildPartial]];
        break;
      }
      case 162: {
        [self setAttachData:[input readData]];
        break;
      }
    }
  }
}
- (BOOL) hasUserId {
  return resultImnormalGroupListRsp.hasUserId;
}
- (UInt32) userId {
  return resultImnormalGroupListRsp.userId;
}
- (IMNormalGroupListRspBuilder*) setUserId:(UInt32) value {
  resultImnormalGroupListRsp.hasUserId = YES;
  resultImnormalGroupListRsp.userId = value;
  return self;
}
- (IMNormalGroupListRspBuilder*) clearUserId {
  resultImnormalGroupListRsp.hasUserId = NO;
  resultImnormalGroupListRsp.userId = 0;
  return self;
}
- (NSMutableArray *)groupVersionList {
  return resultImnormalGroupListRsp.groupVersionListArray;
}
- (GroupVersionInfo*)groupVersionListAtIndex:(NSUInteger)index {
  return [resultImnormalGroupListRsp groupVersionListAtIndex:index];
}
- (IMNormalGroupListRspBuilder *)addGroupVersionList:(GroupVersionInfo*)value {
  if (resultImnormalGroupListRsp.groupVersionListArray == nil) {
    resultImnormalGroupListRsp.groupVersionListArray = [[NSMutableArray alloc]init];
  }
  [resultImnormalGroupListRsp.groupVersionListArray addObject:value];
  return self;
}
- (IMNormalGroupListRspBuilder *)setGroupVersionListArray:(NSArray *)array {
  resultImnormalGroupListRsp.groupVersionListArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (IMNormalGroupListRspBuilder *)clearGroupVersionList {
  resultImnormalGroupListRsp.groupVersionListArray = nil;
  return self;
}
- (BOOL) hasAttachData {
  return resultImnormalGroupListRsp.hasAttachData;
}
- (NSData*) attachData {
  return resultImnormalGroupListRsp.attachData;
}
- (IMNormalGroupListRspBuilder*) setAttachData:(NSData*) value {
  resultImnormalGroupListRsp.hasAttachData = YES;
  resultImnormalGroupListRsp.attachData = value;
  return self;
}
- (IMNormalGroupListRspBuilder*) clearAttachData {
  resultImnormalGroupListRsp.hasAttachData = NO;
  resultImnormalGroupListRsp.attachData = [NSData data];
  return self;
}
@end

@interface IMGroupInfoListReq ()
@property UInt32 userId;
@property (strong) NSMutableArray * groupVersionListArray;
@property (strong) NSData* attachData;
@end

@implementation IMGroupInfoListReq

- (BOOL) hasUserId {
  return !!hasUserId_;
}
- (void) setHasUserId:(BOOL) _value_ {
  hasUserId_ = !!_value_;
}
@synthesize userId;
@synthesize groupVersionListArray;
@dynamic groupVersionList;
- (BOOL) hasAttachData {
  return !!hasAttachData_;
}
- (void) setHasAttachData:(BOOL) _value_ {
  hasAttachData_ = !!_value_;
}
@synthesize attachData;
- (instancetype) init {
  if ((self = [super init])) {
    self.userId = 0;
    self.attachData = [NSData data];
  }
  return self;
}
static IMGroupInfoListReq* defaultIMGroupInfoListReqInstance = nil;
+ (void) initialize {
  if (self == [IMGroupInfoListReq class]) {
    defaultIMGroupInfoListReqInstance = [[IMGroupInfoListReq alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultIMGroupInfoListReqInstance;
}
- (instancetype) defaultInstance {
  return defaultIMGroupInfoListReqInstance;
}
- (NSArray *)groupVersionList {
  return groupVersionListArray;
}
- (GroupVersionInfo*)groupVersionListAtIndex:(NSUInteger)index {
  return [groupVersionListArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  if (!self.hasUserId) {
    return NO;
  }
  __block BOOL isInitgroupVersionList = YES;
   [self.groupVersionList enumerateObjectsUsingBlock:^(GroupVersionInfo *element, NSUInteger idx, BOOL *stop) {
    if (!element.isInitialized) {
      isInitgroupVersionList = NO;
      *stop = YES;
    }
  }];
  if (!isInitgroupVersionList) return isInitgroupVersionList;
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasUserId) {
    [output writeUInt32:1 value:self.userId];
  }
  [self.groupVersionListArray enumerateObjectsUsingBlock:^(GroupVersionInfo *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:2 value:element];
  }];
  if (self.hasAttachData) {
    [output writeData:20 value:self.attachData];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasUserId) {
    size_ += computeUInt32Size(1, self.userId);
  }
  [self.groupVersionListArray enumerateObjectsUsingBlock:^(GroupVersionInfo *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(2, element);
  }];
  if (self.hasAttachData) {
    size_ += computeDataSize(20, self.attachData);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (IMGroupInfoListReq*) parseFromData:(NSData*) data {
  return (IMGroupInfoListReq*)[[[IMGroupInfoListReq builder] mergeFromData:data] build];
}
+ (IMGroupInfoListReq*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMGroupInfoListReq*)[[[IMGroupInfoListReq builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (IMGroupInfoListReq*) parseFromInputStream:(NSInputStream*) input {
  return (IMGroupInfoListReq*)[[[IMGroupInfoListReq builder] mergeFromInputStream:input] build];
}
+ (IMGroupInfoListReq*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMGroupInfoListReq*)[[[IMGroupInfoListReq builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (IMGroupInfoListReq*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (IMGroupInfoListReq*)[[[IMGroupInfoListReq builder] mergeFromCodedInputStream:input] build];
}
+ (IMGroupInfoListReq*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMGroupInfoListReq*)[[[IMGroupInfoListReq builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (IMGroupInfoListReqBuilder*) builder {
  return [[IMGroupInfoListReqBuilder alloc] init];
}
+ (IMGroupInfoListReqBuilder*) builderWithPrototype:(IMGroupInfoListReq*) prototype {
  return [[IMGroupInfoListReq builder] mergeFrom:prototype];
}
- (IMGroupInfoListReqBuilder*) builder {
  return [IMGroupInfoListReq builder];
}
- (IMGroupInfoListReqBuilder*) toBuilder {
  return [IMGroupInfoListReq builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasUserId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"userId", [NSNumber numberWithInteger:self.userId]];
  }
  [self.groupVersionListArray enumerateObjectsUsingBlock:^(GroupVersionInfo *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"groupVersionList"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  if (self.hasAttachData) {
    [output appendFormat:@"%@%@: %@\n", indent, @"attachData", self.attachData];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasUserId) {
    [dictionary setObject: [NSNumber numberWithInteger:self.userId] forKey: @"userId"];
  }
  for (GroupVersionInfo* element in self.groupVersionListArray) {
    NSMutableDictionary *elementDictionary = [NSMutableDictionary dictionary];
    [element storeInDictionary:elementDictionary];
    [dictionary setObject:[NSDictionary dictionaryWithDictionary:elementDictionary] forKey:@"groupVersionList"];
  }
  if (self.hasAttachData) {
    [dictionary setObject: self.attachData forKey: @"attachData"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[IMGroupInfoListReq class]]) {
    return NO;
  }
  IMGroupInfoListReq *otherMessage = other;
  return
      self.hasUserId == otherMessage.hasUserId &&
      (!self.hasUserId || self.userId == otherMessage.userId) &&
      [self.groupVersionListArray isEqualToArray:otherMessage.groupVersionListArray] &&
      self.hasAttachData == otherMessage.hasAttachData &&
      (!self.hasAttachData || [self.attachData isEqual:otherMessage.attachData]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasUserId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.userId] hash];
  }
  [self.groupVersionListArray enumerateObjectsUsingBlock:^(GroupVersionInfo *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  if (self.hasAttachData) {
    hashCode = hashCode * 31 + [self.attachData hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface IMGroupInfoListReqBuilder()
@property (strong) IMGroupInfoListReq* resultImgroupInfoListReq;
@end

@implementation IMGroupInfoListReqBuilder
@synthesize resultImgroupInfoListReq;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultImgroupInfoListReq = [[IMGroupInfoListReq alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultImgroupInfoListReq;
}
- (IMGroupInfoListReqBuilder*) clear {
  self.resultImgroupInfoListReq = [[IMGroupInfoListReq alloc] init];
  return self;
}
- (IMGroupInfoListReqBuilder*) clone {
  return [IMGroupInfoListReq builderWithPrototype:resultImgroupInfoListReq];
}
- (IMGroupInfoListReq*) defaultInstance {
  return [IMGroupInfoListReq defaultInstance];
}
- (IMGroupInfoListReq*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (IMGroupInfoListReq*) buildPartial {
  IMGroupInfoListReq* returnMe = resultImgroupInfoListReq;
  self.resultImgroupInfoListReq = nil;
  return returnMe;
}
- (IMGroupInfoListReqBuilder*) mergeFrom:(IMGroupInfoListReq*) other {
  if (other == [IMGroupInfoListReq defaultInstance]) {
    return self;
  }
  if (other.hasUserId) {
    [self setUserId:other.userId];
  }
  if (other.groupVersionListArray.count > 0) {
    if (resultImgroupInfoListReq.groupVersionListArray == nil) {
      resultImgroupInfoListReq.groupVersionListArray = [[NSMutableArray alloc] initWithArray:other.groupVersionListArray];
    } else {
      [resultImgroupInfoListReq.groupVersionListArray addObjectsFromArray:other.groupVersionListArray];
    }
  }
  if (other.hasAttachData) {
    [self setAttachData:other.attachData];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (IMGroupInfoListReqBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (IMGroupInfoListReqBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setUserId:[input readUInt32]];
        break;
      }
      case 18: {
        GroupVersionInfoBuilder* subBuilder = [GroupVersionInfo builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addGroupVersionList:[subBuilder buildPartial]];
        break;
      }
      case 162: {
        [self setAttachData:[input readData]];
        break;
      }
    }
  }
}
- (BOOL) hasUserId {
  return resultImgroupInfoListReq.hasUserId;
}
- (UInt32) userId {
  return resultImgroupInfoListReq.userId;
}
- (IMGroupInfoListReqBuilder*) setUserId:(UInt32) value {
  resultImgroupInfoListReq.hasUserId = YES;
  resultImgroupInfoListReq.userId = value;
  return self;
}
- (IMGroupInfoListReqBuilder*) clearUserId {
  resultImgroupInfoListReq.hasUserId = NO;
  resultImgroupInfoListReq.userId = 0;
  return self;
}
- (NSMutableArray *)groupVersionList {
  return resultImgroupInfoListReq.groupVersionListArray;
}
- (GroupVersionInfo*)groupVersionListAtIndex:(NSUInteger)index {
  return [resultImgroupInfoListReq groupVersionListAtIndex:index];
}
- (IMGroupInfoListReqBuilder *)addGroupVersionList:(GroupVersionInfo*)value {
  if (resultImgroupInfoListReq.groupVersionListArray == nil) {
    resultImgroupInfoListReq.groupVersionListArray = [[NSMutableArray alloc]init];
  }
  [resultImgroupInfoListReq.groupVersionListArray addObject:value];
  return self;
}
- (IMGroupInfoListReqBuilder *)setGroupVersionListArray:(NSArray *)array {
  resultImgroupInfoListReq.groupVersionListArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (IMGroupInfoListReqBuilder *)clearGroupVersionList {
  resultImgroupInfoListReq.groupVersionListArray = nil;
  return self;
}
- (BOOL) hasAttachData {
  return resultImgroupInfoListReq.hasAttachData;
}
- (NSData*) attachData {
  return resultImgroupInfoListReq.attachData;
}
- (IMGroupInfoListReqBuilder*) setAttachData:(NSData*) value {
  resultImgroupInfoListReq.hasAttachData = YES;
  resultImgroupInfoListReq.attachData = value;
  return self;
}
- (IMGroupInfoListReqBuilder*) clearAttachData {
  resultImgroupInfoListReq.hasAttachData = NO;
  resultImgroupInfoListReq.attachData = [NSData data];
  return self;
}
@end

@interface IMGroupInfoListRsp ()
@property UInt32 userId;
@property (strong) NSMutableArray * groupInfoListArray;
@property (strong) NSData* attachData;
@end

@implementation IMGroupInfoListRsp

- (BOOL) hasUserId {
  return !!hasUserId_;
}
- (void) setHasUserId:(BOOL) _value_ {
  hasUserId_ = !!_value_;
}
@synthesize userId;
@synthesize groupInfoListArray;
@dynamic groupInfoList;
- (BOOL) hasAttachData {
  return !!hasAttachData_;
}
- (void) setHasAttachData:(BOOL) _value_ {
  hasAttachData_ = !!_value_;
}
@synthesize attachData;
- (instancetype) init {
  if ((self = [super init])) {
    self.userId = 0;
    self.attachData = [NSData data];
  }
  return self;
}
static IMGroupInfoListRsp* defaultIMGroupInfoListRspInstance = nil;
+ (void) initialize {
  if (self == [IMGroupInfoListRsp class]) {
    defaultIMGroupInfoListRspInstance = [[IMGroupInfoListRsp alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultIMGroupInfoListRspInstance;
}
- (instancetype) defaultInstance {
  return defaultIMGroupInfoListRspInstance;
}
- (NSArray *)groupInfoList {
  return groupInfoListArray;
}
- (GroupInfo*)groupInfoListAtIndex:(NSUInteger)index {
  return [groupInfoListArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  if (!self.hasUserId) {
    return NO;
  }
  __block BOOL isInitgroupInfoList = YES;
   [self.groupInfoList enumerateObjectsUsingBlock:^(GroupInfo *element, NSUInteger idx, BOOL *stop) {
    if (!element.isInitialized) {
      isInitgroupInfoList = NO;
      *stop = YES;
    }
  }];
  if (!isInitgroupInfoList) return isInitgroupInfoList;
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasUserId) {
    [output writeUInt32:1 value:self.userId];
  }
  [self.groupInfoListArray enumerateObjectsUsingBlock:^(GroupInfo *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:2 value:element];
  }];
  if (self.hasAttachData) {
    [output writeData:20 value:self.attachData];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasUserId) {
    size_ += computeUInt32Size(1, self.userId);
  }
  [self.groupInfoListArray enumerateObjectsUsingBlock:^(GroupInfo *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(2, element);
  }];
  if (self.hasAttachData) {
    size_ += computeDataSize(20, self.attachData);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (IMGroupInfoListRsp*) parseFromData:(NSData*) data {
  return (IMGroupInfoListRsp*)[[[IMGroupInfoListRsp builder] mergeFromData:data] build];
}
+ (IMGroupInfoListRsp*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMGroupInfoListRsp*)[[[IMGroupInfoListRsp builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (IMGroupInfoListRsp*) parseFromInputStream:(NSInputStream*) input {
  return (IMGroupInfoListRsp*)[[[IMGroupInfoListRsp builder] mergeFromInputStream:input] build];
}
+ (IMGroupInfoListRsp*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMGroupInfoListRsp*)[[[IMGroupInfoListRsp builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (IMGroupInfoListRsp*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (IMGroupInfoListRsp*)[[[IMGroupInfoListRsp builder] mergeFromCodedInputStream:input] build];
}
+ (IMGroupInfoListRsp*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMGroupInfoListRsp*)[[[IMGroupInfoListRsp builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (IMGroupInfoListRspBuilder*) builder {
  return [[IMGroupInfoListRspBuilder alloc] init];
}
+ (IMGroupInfoListRspBuilder*) builderWithPrototype:(IMGroupInfoListRsp*) prototype {
  return [[IMGroupInfoListRsp builder] mergeFrom:prototype];
}
- (IMGroupInfoListRspBuilder*) builder {
  return [IMGroupInfoListRsp builder];
}
- (IMGroupInfoListRspBuilder*) toBuilder {
  return [IMGroupInfoListRsp builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasUserId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"userId", [NSNumber numberWithInteger:self.userId]];
  }
  [self.groupInfoListArray enumerateObjectsUsingBlock:^(GroupInfo *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"groupInfoList"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  if (self.hasAttachData) {
    [output appendFormat:@"%@%@: %@\n", indent, @"attachData", self.attachData];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasUserId) {
    [dictionary setObject: [NSNumber numberWithInteger:self.userId] forKey: @"userId"];
  }
  for (GroupInfo* element in self.groupInfoListArray) {
    NSMutableDictionary *elementDictionary = [NSMutableDictionary dictionary];
    [element storeInDictionary:elementDictionary];
    [dictionary setObject:[NSDictionary dictionaryWithDictionary:elementDictionary] forKey:@"groupInfoList"];
  }
  if (self.hasAttachData) {
    [dictionary setObject: self.attachData forKey: @"attachData"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[IMGroupInfoListRsp class]]) {
    return NO;
  }
  IMGroupInfoListRsp *otherMessage = other;
  return
      self.hasUserId == otherMessage.hasUserId &&
      (!self.hasUserId || self.userId == otherMessage.userId) &&
      [self.groupInfoListArray isEqualToArray:otherMessage.groupInfoListArray] &&
      self.hasAttachData == otherMessage.hasAttachData &&
      (!self.hasAttachData || [self.attachData isEqual:otherMessage.attachData]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasUserId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.userId] hash];
  }
  [self.groupInfoListArray enumerateObjectsUsingBlock:^(GroupInfo *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  if (self.hasAttachData) {
    hashCode = hashCode * 31 + [self.attachData hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface IMGroupInfoListRspBuilder()
@property (strong) IMGroupInfoListRsp* resultImgroupInfoListRsp;
@end

@implementation IMGroupInfoListRspBuilder
@synthesize resultImgroupInfoListRsp;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultImgroupInfoListRsp = [[IMGroupInfoListRsp alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultImgroupInfoListRsp;
}
- (IMGroupInfoListRspBuilder*) clear {
  self.resultImgroupInfoListRsp = [[IMGroupInfoListRsp alloc] init];
  return self;
}
- (IMGroupInfoListRspBuilder*) clone {
  return [IMGroupInfoListRsp builderWithPrototype:resultImgroupInfoListRsp];
}
- (IMGroupInfoListRsp*) defaultInstance {
  return [IMGroupInfoListRsp defaultInstance];
}
- (IMGroupInfoListRsp*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (IMGroupInfoListRsp*) buildPartial {
  IMGroupInfoListRsp* returnMe = resultImgroupInfoListRsp;
  self.resultImgroupInfoListRsp = nil;
  return returnMe;
}
- (IMGroupInfoListRspBuilder*) mergeFrom:(IMGroupInfoListRsp*) other {
  if (other == [IMGroupInfoListRsp defaultInstance]) {
    return self;
  }
  if (other.hasUserId) {
    [self setUserId:other.userId];
  }
  if (other.groupInfoListArray.count > 0) {
    if (resultImgroupInfoListRsp.groupInfoListArray == nil) {
      resultImgroupInfoListRsp.groupInfoListArray = [[NSMutableArray alloc] initWithArray:other.groupInfoListArray];
    } else {
      [resultImgroupInfoListRsp.groupInfoListArray addObjectsFromArray:other.groupInfoListArray];
    }
  }
  if (other.hasAttachData) {
    [self setAttachData:other.attachData];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (IMGroupInfoListRspBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (IMGroupInfoListRspBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setUserId:[input readUInt32]];
        break;
      }
      case 18: {
        GroupInfoBuilder* subBuilder = [GroupInfo builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addGroupInfoList:[subBuilder buildPartial]];
        break;
      }
      case 162: {
        [self setAttachData:[input readData]];
        break;
      }
    }
  }
}
- (BOOL) hasUserId {
  return resultImgroupInfoListRsp.hasUserId;
}
- (UInt32) userId {
  return resultImgroupInfoListRsp.userId;
}
- (IMGroupInfoListRspBuilder*) setUserId:(UInt32) value {
  resultImgroupInfoListRsp.hasUserId = YES;
  resultImgroupInfoListRsp.userId = value;
  return self;
}
- (IMGroupInfoListRspBuilder*) clearUserId {
  resultImgroupInfoListRsp.hasUserId = NO;
  resultImgroupInfoListRsp.userId = 0;
  return self;
}
- (NSMutableArray *)groupInfoList {
  return resultImgroupInfoListRsp.groupInfoListArray;
}
- (GroupInfo*)groupInfoListAtIndex:(NSUInteger)index {
  return [resultImgroupInfoListRsp groupInfoListAtIndex:index];
}
- (IMGroupInfoListRspBuilder *)addGroupInfoList:(GroupInfo*)value {
  if (resultImgroupInfoListRsp.groupInfoListArray == nil) {
    resultImgroupInfoListRsp.groupInfoListArray = [[NSMutableArray alloc]init];
  }
  [resultImgroupInfoListRsp.groupInfoListArray addObject:value];
  return self;
}
- (IMGroupInfoListRspBuilder *)setGroupInfoListArray:(NSArray *)array {
  resultImgroupInfoListRsp.groupInfoListArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (IMGroupInfoListRspBuilder *)clearGroupInfoList {
  resultImgroupInfoListRsp.groupInfoListArray = nil;
  return self;
}
- (BOOL) hasAttachData {
  return resultImgroupInfoListRsp.hasAttachData;
}
- (NSData*) attachData {
  return resultImgroupInfoListRsp.attachData;
}
- (IMGroupInfoListRspBuilder*) setAttachData:(NSData*) value {
  resultImgroupInfoListRsp.hasAttachData = YES;
  resultImgroupInfoListRsp.attachData = value;
  return self;
}
- (IMGroupInfoListRspBuilder*) clearAttachData {
  resultImgroupInfoListRsp.hasAttachData = NO;
  resultImgroupInfoListRsp.attachData = [NSData data];
  return self;
}
@end

@interface IMGroupCreateReq ()
@property UInt32 userId;
@property GroupType groupType;
@property (strong) NSString* groupName;
@property (strong) NSString* groupAvatar;
@property (strong) PBAppendableArray * memberIdListArray;
@property (strong) NSData* attachData;
@end

@implementation IMGroupCreateReq

- (BOOL) hasUserId {
  return !!hasUserId_;
}
- (void) setHasUserId:(BOOL) _value_ {
  hasUserId_ = !!_value_;
}
@synthesize userId;
- (BOOL) hasGroupType {
  return !!hasGroupType_;
}
- (void) setHasGroupType:(BOOL) _value_ {
  hasGroupType_ = !!_value_;
}
@synthesize groupType;
- (BOOL) hasGroupName {
  return !!hasGroupName_;
}
- (void) setHasGroupName:(BOOL) _value_ {
  hasGroupName_ = !!_value_;
}
@synthesize groupName;
- (BOOL) hasGroupAvatar {
  return !!hasGroupAvatar_;
}
- (void) setHasGroupAvatar:(BOOL) _value_ {
  hasGroupAvatar_ = !!_value_;
}
@synthesize groupAvatar;
@synthesize memberIdListArray;
@dynamic memberIdList;
- (BOOL) hasAttachData {
  return !!hasAttachData_;
}
- (void) setHasAttachData:(BOOL) _value_ {
  hasAttachData_ = !!_value_;
}
@synthesize attachData;
- (instancetype) init {
  if ((self = [super init])) {
    self.userId = 0;
    self.groupType = GroupTypeGroupTypeTmp;
    self.groupName = @"";
    self.groupAvatar = @"";
    self.attachData = [NSData data];
  }
  return self;
}
static IMGroupCreateReq* defaultIMGroupCreateReqInstance = nil;
+ (void) initialize {
  if (self == [IMGroupCreateReq class]) {
    defaultIMGroupCreateReqInstance = [[IMGroupCreateReq alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultIMGroupCreateReqInstance;
}
- (instancetype) defaultInstance {
  return defaultIMGroupCreateReqInstance;
}
- (PBArray *)memberIdList {
  return memberIdListArray;
}
- (UInt32)memberIdListAtIndex:(NSUInteger)index {
  return [memberIdListArray uint32AtIndex:index];
}
- (BOOL) isInitialized {
  if (!self.hasUserId) {
    return NO;
  }
  if (!self.hasGroupType) {
    return NO;
  }
  if (!self.hasGroupName) {
    return NO;
  }
  if (!self.hasGroupAvatar) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasUserId) {
    [output writeUInt32:1 value:self.userId];
  }
  if (self.hasGroupType) {
    [output writeEnum:2 value:self.groupType];
  }
  if (self.hasGroupName) {
    [output writeString:3 value:self.groupName];
  }
  if (self.hasGroupAvatar) {
    [output writeString:4 value:self.groupAvatar];
  }
  const NSUInteger memberIdListArrayCount = self.memberIdListArray.count;
  if (memberIdListArrayCount > 0) {
    const UInt32 *values = (const UInt32 *)self.memberIdListArray.data;
    for (NSUInteger i = 0; i < memberIdListArrayCount; ++i) {
      [output writeUInt32:5 value:values[i]];
    }
  }
  if (self.hasAttachData) {
    [output writeData:20 value:self.attachData];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasUserId) {
    size_ += computeUInt32Size(1, self.userId);
  }
  if (self.hasGroupType) {
    size_ += computeEnumSize(2, self.groupType);
  }
  if (self.hasGroupName) {
    size_ += computeStringSize(3, self.groupName);
  }
  if (self.hasGroupAvatar) {
    size_ += computeStringSize(4, self.groupAvatar);
  }
  {
    __block SInt32 dataSize = 0;
    const NSUInteger count = self.memberIdListArray.count;
    const UInt32 *values = (const UInt32 *)self.memberIdListArray.data;
    for (NSUInteger i = 0; i < count; ++i) {
      dataSize += computeUInt32SizeNoTag(values[i]);
    }
    size_ += dataSize;
    size_ += (SInt32)(1 * count);
  }
  if (self.hasAttachData) {
    size_ += computeDataSize(20, self.attachData);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (IMGroupCreateReq*) parseFromData:(NSData*) data {
  return (IMGroupCreateReq*)[[[IMGroupCreateReq builder] mergeFromData:data] build];
}
+ (IMGroupCreateReq*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMGroupCreateReq*)[[[IMGroupCreateReq builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (IMGroupCreateReq*) parseFromInputStream:(NSInputStream*) input {
  return (IMGroupCreateReq*)[[[IMGroupCreateReq builder] mergeFromInputStream:input] build];
}
+ (IMGroupCreateReq*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMGroupCreateReq*)[[[IMGroupCreateReq builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (IMGroupCreateReq*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (IMGroupCreateReq*)[[[IMGroupCreateReq builder] mergeFromCodedInputStream:input] build];
}
+ (IMGroupCreateReq*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMGroupCreateReq*)[[[IMGroupCreateReq builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (IMGroupCreateReqBuilder*) builder {
  return [[IMGroupCreateReqBuilder alloc] init];
}
+ (IMGroupCreateReqBuilder*) builderWithPrototype:(IMGroupCreateReq*) prototype {
  return [[IMGroupCreateReq builder] mergeFrom:prototype];
}
- (IMGroupCreateReqBuilder*) builder {
  return [IMGroupCreateReq builder];
}
- (IMGroupCreateReqBuilder*) toBuilder {
  return [IMGroupCreateReq builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasUserId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"userId", [NSNumber numberWithInteger:self.userId]];
  }
  if (self.hasGroupType) {
    [output appendFormat:@"%@%@: %@\n", indent, @"groupType", NSStringFromGroupType(self.groupType)];
  }
  if (self.hasGroupName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"groupName", self.groupName];
  }
  if (self.hasGroupAvatar) {
    [output appendFormat:@"%@%@: %@\n", indent, @"groupAvatar", self.groupAvatar];
  }
  [self.memberIdListArray enumerateObjectsUsingBlock:^(id obj, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@: %@\n", indent, @"memberIdList", obj];
  }];
  if (self.hasAttachData) {
    [output appendFormat:@"%@%@: %@\n", indent, @"attachData", self.attachData];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasUserId) {
    [dictionary setObject: [NSNumber numberWithInteger:self.userId] forKey: @"userId"];
  }
  if (self.hasGroupType) {
    [dictionary setObject: @(self.groupType) forKey: @"groupType"];
  }
  if (self.hasGroupName) {
    [dictionary setObject: self.groupName forKey: @"groupName"];
  }
  if (self.hasGroupAvatar) {
    [dictionary setObject: self.groupAvatar forKey: @"groupAvatar"];
  }
  NSMutableArray * memberIdListArrayArray = [NSMutableArray new];
  NSUInteger memberIdListArrayCount=self.memberIdListArray.count;
  for(int i=0;i<memberIdListArrayCount;i++){
    [memberIdListArrayArray addObject: @([self.memberIdListArray uint32AtIndex:i])];
  }
  [dictionary setObject: memberIdListArrayArray forKey: @"memberIdList"];
  if (self.hasAttachData) {
    [dictionary setObject: self.attachData forKey: @"attachData"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[IMGroupCreateReq class]]) {
    return NO;
  }
  IMGroupCreateReq *otherMessage = other;
  return
      self.hasUserId == otherMessage.hasUserId &&
      (!self.hasUserId || self.userId == otherMessage.userId) &&
      self.hasGroupType == otherMessage.hasGroupType &&
      (!self.hasGroupType || self.groupType == otherMessage.groupType) &&
      self.hasGroupName == otherMessage.hasGroupName &&
      (!self.hasGroupName || [self.groupName isEqual:otherMessage.groupName]) &&
      self.hasGroupAvatar == otherMessage.hasGroupAvatar &&
      (!self.hasGroupAvatar || [self.groupAvatar isEqual:otherMessage.groupAvatar]) &&
      [self.memberIdListArray isEqualToArray:otherMessage.memberIdListArray] &&
      self.hasAttachData == otherMessage.hasAttachData &&
      (!self.hasAttachData || [self.attachData isEqual:otherMessage.attachData]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasUserId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.userId] hash];
  }
  if (self.hasGroupType) {
    hashCode = hashCode * 31 + self.groupType;
  }
  if (self.hasGroupName) {
    hashCode = hashCode * 31 + [self.groupName hash];
  }
  if (self.hasGroupAvatar) {
    hashCode = hashCode * 31 + [self.groupAvatar hash];
  }
  [self.memberIdListArray enumerateObjectsUsingBlock:^(NSNumber *obj, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [obj longValue];
  }];
  if (self.hasAttachData) {
    hashCode = hashCode * 31 + [self.attachData hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface IMGroupCreateReqBuilder()
@property (strong) IMGroupCreateReq* resultImgroupCreateReq;
@end

@implementation IMGroupCreateReqBuilder
@synthesize resultImgroupCreateReq;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultImgroupCreateReq = [[IMGroupCreateReq alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultImgroupCreateReq;
}
- (IMGroupCreateReqBuilder*) clear {
  self.resultImgroupCreateReq = [[IMGroupCreateReq alloc] init];
  return self;
}
- (IMGroupCreateReqBuilder*) clone {
  return [IMGroupCreateReq builderWithPrototype:resultImgroupCreateReq];
}
- (IMGroupCreateReq*) defaultInstance {
  return [IMGroupCreateReq defaultInstance];
}
- (IMGroupCreateReq*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (IMGroupCreateReq*) buildPartial {
  IMGroupCreateReq* returnMe = resultImgroupCreateReq;
  self.resultImgroupCreateReq = nil;
  return returnMe;
}
- (IMGroupCreateReqBuilder*) mergeFrom:(IMGroupCreateReq*) other {
  if (other == [IMGroupCreateReq defaultInstance]) {
    return self;
  }
  if (other.hasUserId) {
    [self setUserId:other.userId];
  }
  if (other.hasGroupType) {
    [self setGroupType:other.groupType];
  }
  if (other.hasGroupName) {
    [self setGroupName:other.groupName];
  }
  if (other.hasGroupAvatar) {
    [self setGroupAvatar:other.groupAvatar];
  }
  if (other.memberIdListArray.count > 0) {
    if (resultImgroupCreateReq.memberIdListArray == nil) {
      resultImgroupCreateReq.memberIdListArray = [other.memberIdListArray copy];
    } else {
      [resultImgroupCreateReq.memberIdListArray appendArray:other.memberIdListArray];
    }
  }
  if (other.hasAttachData) {
    [self setAttachData:other.attachData];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (IMGroupCreateReqBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (IMGroupCreateReqBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setUserId:[input readUInt32]];
        break;
      }
      case 16: {
        GroupType value = (GroupType)[input readEnum];
        if (GroupTypeIsValidValue(value)) {
          [self setGroupType:value];
        } else {
          [unknownFields mergeVarintField:2 value:value];
        }
        break;
      }
      case 26: {
        [self setGroupName:[input readString]];
        break;
      }
      case 34: {
        [self setGroupAvatar:[input readString]];
        break;
      }
      case 40: {
        [self addMemberIdList:[input readUInt32]];
        break;
      }
      case 162: {
        [self setAttachData:[input readData]];
        break;
      }
    }
  }
}
- (BOOL) hasUserId {
  return resultImgroupCreateReq.hasUserId;
}
- (UInt32) userId {
  return resultImgroupCreateReq.userId;
}
- (IMGroupCreateReqBuilder*) setUserId:(UInt32) value {
  resultImgroupCreateReq.hasUserId = YES;
  resultImgroupCreateReq.userId = value;
  return self;
}
- (IMGroupCreateReqBuilder*) clearUserId {
  resultImgroupCreateReq.hasUserId = NO;
  resultImgroupCreateReq.userId = 0;
  return self;
}
- (BOOL) hasGroupType {
  return resultImgroupCreateReq.hasGroupType;
}
- (GroupType) groupType {
  return resultImgroupCreateReq.groupType;
}
- (IMGroupCreateReqBuilder*) setGroupType:(GroupType) value {
  resultImgroupCreateReq.hasGroupType = YES;
  resultImgroupCreateReq.groupType = value;
  return self;
}
- (IMGroupCreateReqBuilder*) clearGroupType {
  resultImgroupCreateReq.hasGroupType = NO;
  resultImgroupCreateReq.groupType = GroupTypeGroupTypeTmp;
  return self;
}
- (BOOL) hasGroupName {
  return resultImgroupCreateReq.hasGroupName;
}
- (NSString*) groupName {
  return resultImgroupCreateReq.groupName;
}
- (IMGroupCreateReqBuilder*) setGroupName:(NSString*) value {
  resultImgroupCreateReq.hasGroupName = YES;
  resultImgroupCreateReq.groupName = value;
  return self;
}
- (IMGroupCreateReqBuilder*) clearGroupName {
  resultImgroupCreateReq.hasGroupName = NO;
  resultImgroupCreateReq.groupName = @"";
  return self;
}
- (BOOL) hasGroupAvatar {
  return resultImgroupCreateReq.hasGroupAvatar;
}
- (NSString*) groupAvatar {
  return resultImgroupCreateReq.groupAvatar;
}
- (IMGroupCreateReqBuilder*) setGroupAvatar:(NSString*) value {
  resultImgroupCreateReq.hasGroupAvatar = YES;
  resultImgroupCreateReq.groupAvatar = value;
  return self;
}
- (IMGroupCreateReqBuilder*) clearGroupAvatar {
  resultImgroupCreateReq.hasGroupAvatar = NO;
  resultImgroupCreateReq.groupAvatar = @"";
  return self;
}
- (PBAppendableArray *)memberIdList {
  return resultImgroupCreateReq.memberIdListArray;
}
- (UInt32)memberIdListAtIndex:(NSUInteger)index {
  return [resultImgroupCreateReq memberIdListAtIndex:index];
}
- (IMGroupCreateReqBuilder *)addMemberIdList:(UInt32)value {
  if (resultImgroupCreateReq.memberIdListArray == nil) {
    resultImgroupCreateReq.memberIdListArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeUInt32];
  }
  [resultImgroupCreateReq.memberIdListArray addUint32:value];
  return self;
}
- (IMGroupCreateReqBuilder *)setMemberIdListArray:(NSArray *)array {
  resultImgroupCreateReq.memberIdListArray = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeUInt32];
  return self;
}
- (IMGroupCreateReqBuilder *)setMemberIdListValues:(const UInt32 *)values count:(NSUInteger)count {
  resultImgroupCreateReq.memberIdListArray = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeUInt32];
  return self;
}
- (IMGroupCreateReqBuilder *)clearMemberIdList {
  resultImgroupCreateReq.memberIdListArray = nil;
  return self;
}
- (BOOL) hasAttachData {
  return resultImgroupCreateReq.hasAttachData;
}
- (NSData*) attachData {
  return resultImgroupCreateReq.attachData;
}
- (IMGroupCreateReqBuilder*) setAttachData:(NSData*) value {
  resultImgroupCreateReq.hasAttachData = YES;
  resultImgroupCreateReq.attachData = value;
  return self;
}
- (IMGroupCreateReqBuilder*) clearAttachData {
  resultImgroupCreateReq.hasAttachData = NO;
  resultImgroupCreateReq.attachData = [NSData data];
  return self;
}
@end

@interface IMGroupCreateRsp ()
@property UInt32 userId;
@property UInt32 resultCode;
@property UInt32 groupId;
@property (strong) NSString* groupName;
@property (strong) PBAppendableArray * userIdListArray;
@property (strong) NSData* attachData;
@end

@implementation IMGroupCreateRsp

- (BOOL) hasUserId {
  return !!hasUserId_;
}
- (void) setHasUserId:(BOOL) _value_ {
  hasUserId_ = !!_value_;
}
@synthesize userId;
- (BOOL) hasResultCode {
  return !!hasResultCode_;
}
- (void) setHasResultCode:(BOOL) _value_ {
  hasResultCode_ = !!_value_;
}
@synthesize resultCode;
- (BOOL) hasGroupId {
  return !!hasGroupId_;
}
- (void) setHasGroupId:(BOOL) _value_ {
  hasGroupId_ = !!_value_;
}
@synthesize groupId;
- (BOOL) hasGroupName {
  return !!hasGroupName_;
}
- (void) setHasGroupName:(BOOL) _value_ {
  hasGroupName_ = !!_value_;
}
@synthesize groupName;
@synthesize userIdListArray;
@dynamic userIdList;
- (BOOL) hasAttachData {
  return !!hasAttachData_;
}
- (void) setHasAttachData:(BOOL) _value_ {
  hasAttachData_ = !!_value_;
}
@synthesize attachData;
- (instancetype) init {
  if ((self = [super init])) {
    self.userId = 0;
    self.resultCode = 0;
    self.groupId = 0;
    self.groupName = @"";
    self.attachData = [NSData data];
  }
  return self;
}
static IMGroupCreateRsp* defaultIMGroupCreateRspInstance = nil;
+ (void) initialize {
  if (self == [IMGroupCreateRsp class]) {
    defaultIMGroupCreateRspInstance = [[IMGroupCreateRsp alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultIMGroupCreateRspInstance;
}
- (instancetype) defaultInstance {
  return defaultIMGroupCreateRspInstance;
}
- (PBArray *)userIdList {
  return userIdListArray;
}
- (UInt32)userIdListAtIndex:(NSUInteger)index {
  return [userIdListArray uint32AtIndex:index];
}
- (BOOL) isInitialized {
  if (!self.hasUserId) {
    return NO;
  }
  if (!self.hasResultCode) {
    return NO;
  }
  if (!self.hasGroupName) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasUserId) {
    [output writeUInt32:1 value:self.userId];
  }
  if (self.hasResultCode) {
    [output writeUInt32:2 value:self.resultCode];
  }
  if (self.hasGroupId) {
    [output writeUInt32:3 value:self.groupId];
  }
  if (self.hasGroupName) {
    [output writeString:4 value:self.groupName];
  }
  const NSUInteger userIdListArrayCount = self.userIdListArray.count;
  if (userIdListArrayCount > 0) {
    const UInt32 *values = (const UInt32 *)self.userIdListArray.data;
    for (NSUInteger i = 0; i < userIdListArrayCount; ++i) {
      [output writeUInt32:5 value:values[i]];
    }
  }
  if (self.hasAttachData) {
    [output writeData:20 value:self.attachData];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasUserId) {
    size_ += computeUInt32Size(1, self.userId);
  }
  if (self.hasResultCode) {
    size_ += computeUInt32Size(2, self.resultCode);
  }
  if (self.hasGroupId) {
    size_ += computeUInt32Size(3, self.groupId);
  }
  if (self.hasGroupName) {
    size_ += computeStringSize(4, self.groupName);
  }
  {
    __block SInt32 dataSize = 0;
    const NSUInteger count = self.userIdListArray.count;
    const UInt32 *values = (const UInt32 *)self.userIdListArray.data;
    for (NSUInteger i = 0; i < count; ++i) {
      dataSize += computeUInt32SizeNoTag(values[i]);
    }
    size_ += dataSize;
    size_ += (SInt32)(1 * count);
  }
  if (self.hasAttachData) {
    size_ += computeDataSize(20, self.attachData);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (IMGroupCreateRsp*) parseFromData:(NSData*) data {
  return (IMGroupCreateRsp*)[[[IMGroupCreateRsp builder] mergeFromData:data] build];
}
+ (IMGroupCreateRsp*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMGroupCreateRsp*)[[[IMGroupCreateRsp builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (IMGroupCreateRsp*) parseFromInputStream:(NSInputStream*) input {
  return (IMGroupCreateRsp*)[[[IMGroupCreateRsp builder] mergeFromInputStream:input] build];
}
+ (IMGroupCreateRsp*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMGroupCreateRsp*)[[[IMGroupCreateRsp builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (IMGroupCreateRsp*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (IMGroupCreateRsp*)[[[IMGroupCreateRsp builder] mergeFromCodedInputStream:input] build];
}
+ (IMGroupCreateRsp*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMGroupCreateRsp*)[[[IMGroupCreateRsp builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (IMGroupCreateRspBuilder*) builder {
  return [[IMGroupCreateRspBuilder alloc] init];
}
+ (IMGroupCreateRspBuilder*) builderWithPrototype:(IMGroupCreateRsp*) prototype {
  return [[IMGroupCreateRsp builder] mergeFrom:prototype];
}
- (IMGroupCreateRspBuilder*) builder {
  return [IMGroupCreateRsp builder];
}
- (IMGroupCreateRspBuilder*) toBuilder {
  return [IMGroupCreateRsp builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasUserId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"userId", [NSNumber numberWithInteger:self.userId]];
  }
  if (self.hasResultCode) {
    [output appendFormat:@"%@%@: %@\n", indent, @"resultCode", [NSNumber numberWithInteger:self.resultCode]];
  }
  if (self.hasGroupId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"groupId", [NSNumber numberWithInteger:self.groupId]];
  }
  if (self.hasGroupName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"groupName", self.groupName];
  }
  [self.userIdListArray enumerateObjectsUsingBlock:^(id obj, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@: %@\n", indent, @"userIdList", obj];
  }];
  if (self.hasAttachData) {
    [output appendFormat:@"%@%@: %@\n", indent, @"attachData", self.attachData];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasUserId) {
    [dictionary setObject: [NSNumber numberWithInteger:self.userId] forKey: @"userId"];
  }
  if (self.hasResultCode) {
    [dictionary setObject: [NSNumber numberWithInteger:self.resultCode] forKey: @"resultCode"];
  }
  if (self.hasGroupId) {
    [dictionary setObject: [NSNumber numberWithInteger:self.groupId] forKey: @"groupId"];
  }
  if (self.hasGroupName) {
    [dictionary setObject: self.groupName forKey: @"groupName"];
  }
  NSMutableArray * userIdListArrayArray = [NSMutableArray new];
  NSUInteger userIdListArrayCount=self.userIdListArray.count;
  for(int i=0;i<userIdListArrayCount;i++){
    [userIdListArrayArray addObject: @([self.userIdListArray uint32AtIndex:i])];
  }
  [dictionary setObject: userIdListArrayArray forKey: @"userIdList"];
  if (self.hasAttachData) {
    [dictionary setObject: self.attachData forKey: @"attachData"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[IMGroupCreateRsp class]]) {
    return NO;
  }
  IMGroupCreateRsp *otherMessage = other;
  return
      self.hasUserId == otherMessage.hasUserId &&
      (!self.hasUserId || self.userId == otherMessage.userId) &&
      self.hasResultCode == otherMessage.hasResultCode &&
      (!self.hasResultCode || self.resultCode == otherMessage.resultCode) &&
      self.hasGroupId == otherMessage.hasGroupId &&
      (!self.hasGroupId || self.groupId == otherMessage.groupId) &&
      self.hasGroupName == otherMessage.hasGroupName &&
      (!self.hasGroupName || [self.groupName isEqual:otherMessage.groupName]) &&
      [self.userIdListArray isEqualToArray:otherMessage.userIdListArray] &&
      self.hasAttachData == otherMessage.hasAttachData &&
      (!self.hasAttachData || [self.attachData isEqual:otherMessage.attachData]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasUserId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.userId] hash];
  }
  if (self.hasResultCode) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.resultCode] hash];
  }
  if (self.hasGroupId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.groupId] hash];
  }
  if (self.hasGroupName) {
    hashCode = hashCode * 31 + [self.groupName hash];
  }
  [self.userIdListArray enumerateObjectsUsingBlock:^(NSNumber *obj, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [obj longValue];
  }];
  if (self.hasAttachData) {
    hashCode = hashCode * 31 + [self.attachData hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface IMGroupCreateRspBuilder()
@property (strong) IMGroupCreateRsp* resultImgroupCreateRsp;
@end

@implementation IMGroupCreateRspBuilder
@synthesize resultImgroupCreateRsp;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultImgroupCreateRsp = [[IMGroupCreateRsp alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultImgroupCreateRsp;
}
- (IMGroupCreateRspBuilder*) clear {
  self.resultImgroupCreateRsp = [[IMGroupCreateRsp alloc] init];
  return self;
}
- (IMGroupCreateRspBuilder*) clone {
  return [IMGroupCreateRsp builderWithPrototype:resultImgroupCreateRsp];
}
- (IMGroupCreateRsp*) defaultInstance {
  return [IMGroupCreateRsp defaultInstance];
}
- (IMGroupCreateRsp*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (IMGroupCreateRsp*) buildPartial {
  IMGroupCreateRsp* returnMe = resultImgroupCreateRsp;
  self.resultImgroupCreateRsp = nil;
  return returnMe;
}
- (IMGroupCreateRspBuilder*) mergeFrom:(IMGroupCreateRsp*) other {
  if (other == [IMGroupCreateRsp defaultInstance]) {
    return self;
  }
  if (other.hasUserId) {
    [self setUserId:other.userId];
  }
  if (other.hasResultCode) {
    [self setResultCode:other.resultCode];
  }
  if (other.hasGroupId) {
    [self setGroupId:other.groupId];
  }
  if (other.hasGroupName) {
    [self setGroupName:other.groupName];
  }
  if (other.userIdListArray.count > 0) {
    if (resultImgroupCreateRsp.userIdListArray == nil) {
      resultImgroupCreateRsp.userIdListArray = [other.userIdListArray copy];
    } else {
      [resultImgroupCreateRsp.userIdListArray appendArray:other.userIdListArray];
    }
  }
  if (other.hasAttachData) {
    [self setAttachData:other.attachData];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (IMGroupCreateRspBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (IMGroupCreateRspBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setUserId:[input readUInt32]];
        break;
      }
      case 16: {
        [self setResultCode:[input readUInt32]];
        break;
      }
      case 24: {
        [self setGroupId:[input readUInt32]];
        break;
      }
      case 34: {
        [self setGroupName:[input readString]];
        break;
      }
      case 40: {
        [self addUserIdList:[input readUInt32]];
        break;
      }
      case 162: {
        [self setAttachData:[input readData]];
        break;
      }
    }
  }
}
- (BOOL) hasUserId {
  return resultImgroupCreateRsp.hasUserId;
}
- (UInt32) userId {
  return resultImgroupCreateRsp.userId;
}
- (IMGroupCreateRspBuilder*) setUserId:(UInt32) value {
  resultImgroupCreateRsp.hasUserId = YES;
  resultImgroupCreateRsp.userId = value;
  return self;
}
- (IMGroupCreateRspBuilder*) clearUserId {
  resultImgroupCreateRsp.hasUserId = NO;
  resultImgroupCreateRsp.userId = 0;
  return self;
}
- (BOOL) hasResultCode {
  return resultImgroupCreateRsp.hasResultCode;
}
- (UInt32) resultCode {
  return resultImgroupCreateRsp.resultCode;
}
- (IMGroupCreateRspBuilder*) setResultCode:(UInt32) value {
  resultImgroupCreateRsp.hasResultCode = YES;
  resultImgroupCreateRsp.resultCode = value;
  return self;
}
- (IMGroupCreateRspBuilder*) clearResultCode {
  resultImgroupCreateRsp.hasResultCode = NO;
  resultImgroupCreateRsp.resultCode = 0;
  return self;
}
- (BOOL) hasGroupId {
  return resultImgroupCreateRsp.hasGroupId;
}
- (UInt32) groupId {
  return resultImgroupCreateRsp.groupId;
}
- (IMGroupCreateRspBuilder*) setGroupId:(UInt32) value {
  resultImgroupCreateRsp.hasGroupId = YES;
  resultImgroupCreateRsp.groupId = value;
  return self;
}
- (IMGroupCreateRspBuilder*) clearGroupId {
  resultImgroupCreateRsp.hasGroupId = NO;
  resultImgroupCreateRsp.groupId = 0;
  return self;
}
- (BOOL) hasGroupName {
  return resultImgroupCreateRsp.hasGroupName;
}
- (NSString*) groupName {
  return resultImgroupCreateRsp.groupName;
}
- (IMGroupCreateRspBuilder*) setGroupName:(NSString*) value {
  resultImgroupCreateRsp.hasGroupName = YES;
  resultImgroupCreateRsp.groupName = value;
  return self;
}
- (IMGroupCreateRspBuilder*) clearGroupName {
  resultImgroupCreateRsp.hasGroupName = NO;
  resultImgroupCreateRsp.groupName = @"";
  return self;
}
- (PBAppendableArray *)userIdList {
  return resultImgroupCreateRsp.userIdListArray;
}
- (UInt32)userIdListAtIndex:(NSUInteger)index {
  return [resultImgroupCreateRsp userIdListAtIndex:index];
}
- (IMGroupCreateRspBuilder *)addUserIdList:(UInt32)value {
  if (resultImgroupCreateRsp.userIdListArray == nil) {
    resultImgroupCreateRsp.userIdListArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeUInt32];
  }
  [resultImgroupCreateRsp.userIdListArray addUint32:value];
  return self;
}
- (IMGroupCreateRspBuilder *)setUserIdListArray:(NSArray *)array {
  resultImgroupCreateRsp.userIdListArray = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeUInt32];
  return self;
}
- (IMGroupCreateRspBuilder *)setUserIdListValues:(const UInt32 *)values count:(NSUInteger)count {
  resultImgroupCreateRsp.userIdListArray = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeUInt32];
  return self;
}
- (IMGroupCreateRspBuilder *)clearUserIdList {
  resultImgroupCreateRsp.userIdListArray = nil;
  return self;
}
- (BOOL) hasAttachData {
  return resultImgroupCreateRsp.hasAttachData;
}
- (NSData*) attachData {
  return resultImgroupCreateRsp.attachData;
}
- (IMGroupCreateRspBuilder*) setAttachData:(NSData*) value {
  resultImgroupCreateRsp.hasAttachData = YES;
  resultImgroupCreateRsp.attachData = value;
  return self;
}
- (IMGroupCreateRspBuilder*) clearAttachData {
  resultImgroupCreateRsp.hasAttachData = NO;
  resultImgroupCreateRsp.attachData = [NSData data];
  return self;
}
@end

@interface IMGroupChangeMemberReq ()
@property UInt32 userId;
@property GroupModifyType changeType;
@property UInt32 groupId;
@property (strong) PBAppendableArray * memberIdListArray;
@property (strong) NSData* attachData;
@end

@implementation IMGroupChangeMemberReq

- (BOOL) hasUserId {
  return !!hasUserId_;
}
- (void) setHasUserId:(BOOL) _value_ {
  hasUserId_ = !!_value_;
}
@synthesize userId;
- (BOOL) hasChangeType {
  return !!hasChangeType_;
}
- (void) setHasChangeType:(BOOL) _value_ {
  hasChangeType_ = !!_value_;
}
@synthesize changeType;
- (BOOL) hasGroupId {
  return !!hasGroupId_;
}
- (void) setHasGroupId:(BOOL) _value_ {
  hasGroupId_ = !!_value_;
}
@synthesize groupId;
@synthesize memberIdListArray;
@dynamic memberIdList;
- (BOOL) hasAttachData {
  return !!hasAttachData_;
}
- (void) setHasAttachData:(BOOL) _value_ {
  hasAttachData_ = !!_value_;
}
@synthesize attachData;
- (instancetype) init {
  if ((self = [super init])) {
    self.userId = 0;
    self.changeType = GroupModifyTypeGroupModifyTypeAdd;
    self.groupId = 0;
    self.attachData = [NSData data];
  }
  return self;
}
static IMGroupChangeMemberReq* defaultIMGroupChangeMemberReqInstance = nil;
+ (void) initialize {
  if (self == [IMGroupChangeMemberReq class]) {
    defaultIMGroupChangeMemberReqInstance = [[IMGroupChangeMemberReq alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultIMGroupChangeMemberReqInstance;
}
- (instancetype) defaultInstance {
  return defaultIMGroupChangeMemberReqInstance;
}
- (PBArray *)memberIdList {
  return memberIdListArray;
}
- (UInt32)memberIdListAtIndex:(NSUInteger)index {
  return [memberIdListArray uint32AtIndex:index];
}
- (BOOL) isInitialized {
  if (!self.hasUserId) {
    return NO;
  }
  if (!self.hasChangeType) {
    return NO;
  }
  if (!self.hasGroupId) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasUserId) {
    [output writeUInt32:1 value:self.userId];
  }
  if (self.hasChangeType) {
    [output writeEnum:2 value:self.changeType];
  }
  if (self.hasGroupId) {
    [output writeUInt32:3 value:self.groupId];
  }
  const NSUInteger memberIdListArrayCount = self.memberIdListArray.count;
  if (memberIdListArrayCount > 0) {
    const UInt32 *values = (const UInt32 *)self.memberIdListArray.data;
    for (NSUInteger i = 0; i < memberIdListArrayCount; ++i) {
      [output writeUInt32:4 value:values[i]];
    }
  }
  if (self.hasAttachData) {
    [output writeData:20 value:self.attachData];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasUserId) {
    size_ += computeUInt32Size(1, self.userId);
  }
  if (self.hasChangeType) {
    size_ += computeEnumSize(2, self.changeType);
  }
  if (self.hasGroupId) {
    size_ += computeUInt32Size(3, self.groupId);
  }
  {
    __block SInt32 dataSize = 0;
    const NSUInteger count = self.memberIdListArray.count;
    const UInt32 *values = (const UInt32 *)self.memberIdListArray.data;
    for (NSUInteger i = 0; i < count; ++i) {
      dataSize += computeUInt32SizeNoTag(values[i]);
    }
    size_ += dataSize;
    size_ += (SInt32)(1 * count);
  }
  if (self.hasAttachData) {
    size_ += computeDataSize(20, self.attachData);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (IMGroupChangeMemberReq*) parseFromData:(NSData*) data {
  return (IMGroupChangeMemberReq*)[[[IMGroupChangeMemberReq builder] mergeFromData:data] build];
}
+ (IMGroupChangeMemberReq*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMGroupChangeMemberReq*)[[[IMGroupChangeMemberReq builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (IMGroupChangeMemberReq*) parseFromInputStream:(NSInputStream*) input {
  return (IMGroupChangeMemberReq*)[[[IMGroupChangeMemberReq builder] mergeFromInputStream:input] build];
}
+ (IMGroupChangeMemberReq*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMGroupChangeMemberReq*)[[[IMGroupChangeMemberReq builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (IMGroupChangeMemberReq*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (IMGroupChangeMemberReq*)[[[IMGroupChangeMemberReq builder] mergeFromCodedInputStream:input] build];
}
+ (IMGroupChangeMemberReq*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMGroupChangeMemberReq*)[[[IMGroupChangeMemberReq builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (IMGroupChangeMemberReqBuilder*) builder {
  return [[IMGroupChangeMemberReqBuilder alloc] init];
}
+ (IMGroupChangeMemberReqBuilder*) builderWithPrototype:(IMGroupChangeMemberReq*) prototype {
  return [[IMGroupChangeMemberReq builder] mergeFrom:prototype];
}
- (IMGroupChangeMemberReqBuilder*) builder {
  return [IMGroupChangeMemberReq builder];
}
- (IMGroupChangeMemberReqBuilder*) toBuilder {
  return [IMGroupChangeMemberReq builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasUserId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"userId", [NSNumber numberWithInteger:self.userId]];
  }
  if (self.hasChangeType) {
    [output appendFormat:@"%@%@: %@\n", indent, @"changeType", NSStringFromGroupModifyType(self.changeType)];
  }
  if (self.hasGroupId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"groupId", [NSNumber numberWithInteger:self.groupId]];
  }
  [self.memberIdListArray enumerateObjectsUsingBlock:^(id obj, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@: %@\n", indent, @"memberIdList", obj];
  }];
  if (self.hasAttachData) {
    [output appendFormat:@"%@%@: %@\n", indent, @"attachData", self.attachData];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasUserId) {
    [dictionary setObject: [NSNumber numberWithInteger:self.userId] forKey: @"userId"];
  }
  if (self.hasChangeType) {
    [dictionary setObject: @(self.changeType) forKey: @"changeType"];
  }
  if (self.hasGroupId) {
    [dictionary setObject: [NSNumber numberWithInteger:self.groupId] forKey: @"groupId"];
  }
  NSMutableArray * memberIdListArrayArray = [NSMutableArray new];
  NSUInteger memberIdListArrayCount=self.memberIdListArray.count;
  for(int i=0;i<memberIdListArrayCount;i++){
    [memberIdListArrayArray addObject: @([self.memberIdListArray uint32AtIndex:i])];
  }
  [dictionary setObject: memberIdListArrayArray forKey: @"memberIdList"];
  if (self.hasAttachData) {
    [dictionary setObject: self.attachData forKey: @"attachData"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[IMGroupChangeMemberReq class]]) {
    return NO;
  }
  IMGroupChangeMemberReq *otherMessage = other;
  return
      self.hasUserId == otherMessage.hasUserId &&
      (!self.hasUserId || self.userId == otherMessage.userId) &&
      self.hasChangeType == otherMessage.hasChangeType &&
      (!self.hasChangeType || self.changeType == otherMessage.changeType) &&
      self.hasGroupId == otherMessage.hasGroupId &&
      (!self.hasGroupId || self.groupId == otherMessage.groupId) &&
      [self.memberIdListArray isEqualToArray:otherMessage.memberIdListArray] &&
      self.hasAttachData == otherMessage.hasAttachData &&
      (!self.hasAttachData || [self.attachData isEqual:otherMessage.attachData]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasUserId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.userId] hash];
  }
  if (self.hasChangeType) {
    hashCode = hashCode * 31 + self.changeType;
  }
  if (self.hasGroupId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.groupId] hash];
  }
  [self.memberIdListArray enumerateObjectsUsingBlock:^(NSNumber *obj, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [obj longValue];
  }];
  if (self.hasAttachData) {
    hashCode = hashCode * 31 + [self.attachData hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface IMGroupChangeMemberReqBuilder()
@property (strong) IMGroupChangeMemberReq* resultImgroupChangeMemberReq;
@end

@implementation IMGroupChangeMemberReqBuilder
@synthesize resultImgroupChangeMemberReq;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultImgroupChangeMemberReq = [[IMGroupChangeMemberReq alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultImgroupChangeMemberReq;
}
- (IMGroupChangeMemberReqBuilder*) clear {
  self.resultImgroupChangeMemberReq = [[IMGroupChangeMemberReq alloc] init];
  return self;
}
- (IMGroupChangeMemberReqBuilder*) clone {
  return [IMGroupChangeMemberReq builderWithPrototype:resultImgroupChangeMemberReq];
}
- (IMGroupChangeMemberReq*) defaultInstance {
  return [IMGroupChangeMemberReq defaultInstance];
}
- (IMGroupChangeMemberReq*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (IMGroupChangeMemberReq*) buildPartial {
  IMGroupChangeMemberReq* returnMe = resultImgroupChangeMemberReq;
  self.resultImgroupChangeMemberReq = nil;
  return returnMe;
}
- (IMGroupChangeMemberReqBuilder*) mergeFrom:(IMGroupChangeMemberReq*) other {
  if (other == [IMGroupChangeMemberReq defaultInstance]) {
    return self;
  }
  if (other.hasUserId) {
    [self setUserId:other.userId];
  }
  if (other.hasChangeType) {
    [self setChangeType:other.changeType];
  }
  if (other.hasGroupId) {
    [self setGroupId:other.groupId];
  }
  if (other.memberIdListArray.count > 0) {
    if (resultImgroupChangeMemberReq.memberIdListArray == nil) {
      resultImgroupChangeMemberReq.memberIdListArray = [other.memberIdListArray copy];
    } else {
      [resultImgroupChangeMemberReq.memberIdListArray appendArray:other.memberIdListArray];
    }
  }
  if (other.hasAttachData) {
    [self setAttachData:other.attachData];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (IMGroupChangeMemberReqBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (IMGroupChangeMemberReqBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setUserId:[input readUInt32]];
        break;
      }
      case 16: {
        GroupModifyType value = (GroupModifyType)[input readEnum];
        if (GroupModifyTypeIsValidValue(value)) {
          [self setChangeType:value];
        } else {
          [unknownFields mergeVarintField:2 value:value];
        }
        break;
      }
      case 24: {
        [self setGroupId:[input readUInt32]];
        break;
      }
      case 32: {
        [self addMemberIdList:[input readUInt32]];
        break;
      }
      case 162: {
        [self setAttachData:[input readData]];
        break;
      }
    }
  }
}
- (BOOL) hasUserId {
  return resultImgroupChangeMemberReq.hasUserId;
}
- (UInt32) userId {
  return resultImgroupChangeMemberReq.userId;
}
- (IMGroupChangeMemberReqBuilder*) setUserId:(UInt32) value {
  resultImgroupChangeMemberReq.hasUserId = YES;
  resultImgroupChangeMemberReq.userId = value;
  return self;
}
- (IMGroupChangeMemberReqBuilder*) clearUserId {
  resultImgroupChangeMemberReq.hasUserId = NO;
  resultImgroupChangeMemberReq.userId = 0;
  return self;
}
- (BOOL) hasChangeType {
  return resultImgroupChangeMemberReq.hasChangeType;
}
- (GroupModifyType) changeType {
  return resultImgroupChangeMemberReq.changeType;
}
- (IMGroupChangeMemberReqBuilder*) setChangeType:(GroupModifyType) value {
  resultImgroupChangeMemberReq.hasChangeType = YES;
  resultImgroupChangeMemberReq.changeType = value;
  return self;
}
- (IMGroupChangeMemberReqBuilder*) clearChangeType {
  resultImgroupChangeMemberReq.hasChangeType = NO;
  resultImgroupChangeMemberReq.changeType = GroupModifyTypeGroupModifyTypeAdd;
  return self;
}
- (BOOL) hasGroupId {
  return resultImgroupChangeMemberReq.hasGroupId;
}
- (UInt32) groupId {
  return resultImgroupChangeMemberReq.groupId;
}
- (IMGroupChangeMemberReqBuilder*) setGroupId:(UInt32) value {
  resultImgroupChangeMemberReq.hasGroupId = YES;
  resultImgroupChangeMemberReq.groupId = value;
  return self;
}
- (IMGroupChangeMemberReqBuilder*) clearGroupId {
  resultImgroupChangeMemberReq.hasGroupId = NO;
  resultImgroupChangeMemberReq.groupId = 0;
  return self;
}
- (PBAppendableArray *)memberIdList {
  return resultImgroupChangeMemberReq.memberIdListArray;
}
- (UInt32)memberIdListAtIndex:(NSUInteger)index {
  return [resultImgroupChangeMemberReq memberIdListAtIndex:index];
}
- (IMGroupChangeMemberReqBuilder *)addMemberIdList:(UInt32)value {
  if (resultImgroupChangeMemberReq.memberIdListArray == nil) {
    resultImgroupChangeMemberReq.memberIdListArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeUInt32];
  }
  [resultImgroupChangeMemberReq.memberIdListArray addUint32:value];
  return self;
}
- (IMGroupChangeMemberReqBuilder *)setMemberIdListArray:(NSArray *)array {
  resultImgroupChangeMemberReq.memberIdListArray = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeUInt32];
  return self;
}
- (IMGroupChangeMemberReqBuilder *)setMemberIdListValues:(const UInt32 *)values count:(NSUInteger)count {
  resultImgroupChangeMemberReq.memberIdListArray = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeUInt32];
  return self;
}
- (IMGroupChangeMemberReqBuilder *)clearMemberIdList {
  resultImgroupChangeMemberReq.memberIdListArray = nil;
  return self;
}
- (BOOL) hasAttachData {
  return resultImgroupChangeMemberReq.hasAttachData;
}
- (NSData*) attachData {
  return resultImgroupChangeMemberReq.attachData;
}
- (IMGroupChangeMemberReqBuilder*) setAttachData:(NSData*) value {
  resultImgroupChangeMemberReq.hasAttachData = YES;
  resultImgroupChangeMemberReq.attachData = value;
  return self;
}
- (IMGroupChangeMemberReqBuilder*) clearAttachData {
  resultImgroupChangeMemberReq.hasAttachData = NO;
  resultImgroupChangeMemberReq.attachData = [NSData data];
  return self;
}
@end

@interface IMGroupChangeMemberRsp ()
@property UInt32 userId;
@property GroupModifyType changeType;
@property UInt32 resultCode;
@property UInt32 groupId;
@property (strong) PBAppendableArray * curUserIdListArray;
@property (strong) PBAppendableArray * chgUserIdListArray;
@property (strong) NSData* attachData;
@end

@implementation IMGroupChangeMemberRsp

- (BOOL) hasUserId {
  return !!hasUserId_;
}
- (void) setHasUserId:(BOOL) _value_ {
  hasUserId_ = !!_value_;
}
@synthesize userId;
- (BOOL) hasChangeType {
  return !!hasChangeType_;
}
- (void) setHasChangeType:(BOOL) _value_ {
  hasChangeType_ = !!_value_;
}
@synthesize changeType;
- (BOOL) hasResultCode {
  return !!hasResultCode_;
}
- (void) setHasResultCode:(BOOL) _value_ {
  hasResultCode_ = !!_value_;
}
@synthesize resultCode;
- (BOOL) hasGroupId {
  return !!hasGroupId_;
}
- (void) setHasGroupId:(BOOL) _value_ {
  hasGroupId_ = !!_value_;
}
@synthesize groupId;
@synthesize curUserIdListArray;
@dynamic curUserIdList;
@synthesize chgUserIdListArray;
@dynamic chgUserIdList;
- (BOOL) hasAttachData {
  return !!hasAttachData_;
}
- (void) setHasAttachData:(BOOL) _value_ {
  hasAttachData_ = !!_value_;
}
@synthesize attachData;
- (instancetype) init {
  if ((self = [super init])) {
    self.userId = 0;
    self.changeType = GroupModifyTypeGroupModifyTypeAdd;
    self.resultCode = 0;
    self.groupId = 0;
    self.attachData = [NSData data];
  }
  return self;
}
static IMGroupChangeMemberRsp* defaultIMGroupChangeMemberRspInstance = nil;
+ (void) initialize {
  if (self == [IMGroupChangeMemberRsp class]) {
    defaultIMGroupChangeMemberRspInstance = [[IMGroupChangeMemberRsp alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultIMGroupChangeMemberRspInstance;
}
- (instancetype) defaultInstance {
  return defaultIMGroupChangeMemberRspInstance;
}
- (PBArray *)curUserIdList {
  return curUserIdListArray;
}
- (UInt32)curUserIdListAtIndex:(NSUInteger)index {
  return [curUserIdListArray uint32AtIndex:index];
}
- (PBArray *)chgUserIdList {
  return chgUserIdListArray;
}
- (UInt32)chgUserIdListAtIndex:(NSUInteger)index {
  return [chgUserIdListArray uint32AtIndex:index];
}
- (BOOL) isInitialized {
  if (!self.hasUserId) {
    return NO;
  }
  if (!self.hasChangeType) {
    return NO;
  }
  if (!self.hasResultCode) {
    return NO;
  }
  if (!self.hasGroupId) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasUserId) {
    [output writeUInt32:1 value:self.userId];
  }
  if (self.hasChangeType) {
    [output writeEnum:2 value:self.changeType];
  }
  if (self.hasResultCode) {
    [output writeUInt32:3 value:self.resultCode];
  }
  if (self.hasGroupId) {
    [output writeUInt32:4 value:self.groupId];
  }
  const NSUInteger curUserIdListArrayCount = self.curUserIdListArray.count;
  if (curUserIdListArrayCount > 0) {
    const UInt32 *values = (const UInt32 *)self.curUserIdListArray.data;
    for (NSUInteger i = 0; i < curUserIdListArrayCount; ++i) {
      [output writeUInt32:5 value:values[i]];
    }
  }
  const NSUInteger chgUserIdListArrayCount = self.chgUserIdListArray.count;
  if (chgUserIdListArrayCount > 0) {
    const UInt32 *values = (const UInt32 *)self.chgUserIdListArray.data;
    for (NSUInteger i = 0; i < chgUserIdListArrayCount; ++i) {
      [output writeUInt32:6 value:values[i]];
    }
  }
  if (self.hasAttachData) {
    [output writeData:20 value:self.attachData];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasUserId) {
    size_ += computeUInt32Size(1, self.userId);
  }
  if (self.hasChangeType) {
    size_ += computeEnumSize(2, self.changeType);
  }
  if (self.hasResultCode) {
    size_ += computeUInt32Size(3, self.resultCode);
  }
  if (self.hasGroupId) {
    size_ += computeUInt32Size(4, self.groupId);
  }
  {
    __block SInt32 dataSize = 0;
    const NSUInteger count = self.curUserIdListArray.count;
    const UInt32 *values = (const UInt32 *)self.curUserIdListArray.data;
    for (NSUInteger i = 0; i < count; ++i) {
      dataSize += computeUInt32SizeNoTag(values[i]);
    }
    size_ += dataSize;
    size_ += (SInt32)(1 * count);
  }
  {
    __block SInt32 dataSize = 0;
    const NSUInteger count = self.chgUserIdListArray.count;
    const UInt32 *values = (const UInt32 *)self.chgUserIdListArray.data;
    for (NSUInteger i = 0; i < count; ++i) {
      dataSize += computeUInt32SizeNoTag(values[i]);
    }
    size_ += dataSize;
    size_ += (SInt32)(1 * count);
  }
  if (self.hasAttachData) {
    size_ += computeDataSize(20, self.attachData);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (IMGroupChangeMemberRsp*) parseFromData:(NSData*) data {
  return (IMGroupChangeMemberRsp*)[[[IMGroupChangeMemberRsp builder] mergeFromData:data] build];
}
+ (IMGroupChangeMemberRsp*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMGroupChangeMemberRsp*)[[[IMGroupChangeMemberRsp builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (IMGroupChangeMemberRsp*) parseFromInputStream:(NSInputStream*) input {
  return (IMGroupChangeMemberRsp*)[[[IMGroupChangeMemberRsp builder] mergeFromInputStream:input] build];
}
+ (IMGroupChangeMemberRsp*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMGroupChangeMemberRsp*)[[[IMGroupChangeMemberRsp builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (IMGroupChangeMemberRsp*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (IMGroupChangeMemberRsp*)[[[IMGroupChangeMemberRsp builder] mergeFromCodedInputStream:input] build];
}
+ (IMGroupChangeMemberRsp*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMGroupChangeMemberRsp*)[[[IMGroupChangeMemberRsp builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (IMGroupChangeMemberRspBuilder*) builder {
  return [[IMGroupChangeMemberRspBuilder alloc] init];
}
+ (IMGroupChangeMemberRspBuilder*) builderWithPrototype:(IMGroupChangeMemberRsp*) prototype {
  return [[IMGroupChangeMemberRsp builder] mergeFrom:prototype];
}
- (IMGroupChangeMemberRspBuilder*) builder {
  return [IMGroupChangeMemberRsp builder];
}
- (IMGroupChangeMemberRspBuilder*) toBuilder {
  return [IMGroupChangeMemberRsp builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasUserId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"userId", [NSNumber numberWithInteger:self.userId]];
  }
  if (self.hasChangeType) {
    [output appendFormat:@"%@%@: %@\n", indent, @"changeType", NSStringFromGroupModifyType(self.changeType)];
  }
  if (self.hasResultCode) {
    [output appendFormat:@"%@%@: %@\n", indent, @"resultCode", [NSNumber numberWithInteger:self.resultCode]];
  }
  if (self.hasGroupId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"groupId", [NSNumber numberWithInteger:self.groupId]];
  }
  [self.curUserIdListArray enumerateObjectsUsingBlock:^(id obj, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@: %@\n", indent, @"curUserIdList", obj];
  }];
  [self.chgUserIdListArray enumerateObjectsUsingBlock:^(id obj, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@: %@\n", indent, @"chgUserIdList", obj];
  }];
  if (self.hasAttachData) {
    [output appendFormat:@"%@%@: %@\n", indent, @"attachData", self.attachData];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasUserId) {
    [dictionary setObject: [NSNumber numberWithInteger:self.userId] forKey: @"userId"];
  }
  if (self.hasChangeType) {
    [dictionary setObject: @(self.changeType) forKey: @"changeType"];
  }
  if (self.hasResultCode) {
    [dictionary setObject: [NSNumber numberWithInteger:self.resultCode] forKey: @"resultCode"];
  }
  if (self.hasGroupId) {
    [dictionary setObject: [NSNumber numberWithInteger:self.groupId] forKey: @"groupId"];
  }
  NSMutableArray * curUserIdListArrayArray = [NSMutableArray new];
  NSUInteger curUserIdListArrayCount=self.curUserIdListArray.count;
  for(int i=0;i<curUserIdListArrayCount;i++){
    [curUserIdListArrayArray addObject: @([self.curUserIdListArray uint32AtIndex:i])];
  }
  [dictionary setObject: curUserIdListArrayArray forKey: @"curUserIdList"];
  NSMutableArray * chgUserIdListArrayArray = [NSMutableArray new];
  NSUInteger chgUserIdListArrayCount=self.chgUserIdListArray.count;
  for(int i=0;i<chgUserIdListArrayCount;i++){
    [chgUserIdListArrayArray addObject: @([self.chgUserIdListArray uint32AtIndex:i])];
  }
  [dictionary setObject: chgUserIdListArrayArray forKey: @"chgUserIdList"];
  if (self.hasAttachData) {
    [dictionary setObject: self.attachData forKey: @"attachData"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[IMGroupChangeMemberRsp class]]) {
    return NO;
  }
  IMGroupChangeMemberRsp *otherMessage = other;
  return
      self.hasUserId == otherMessage.hasUserId &&
      (!self.hasUserId || self.userId == otherMessage.userId) &&
      self.hasChangeType == otherMessage.hasChangeType &&
      (!self.hasChangeType || self.changeType == otherMessage.changeType) &&
      self.hasResultCode == otherMessage.hasResultCode &&
      (!self.hasResultCode || self.resultCode == otherMessage.resultCode) &&
      self.hasGroupId == otherMessage.hasGroupId &&
      (!self.hasGroupId || self.groupId == otherMessage.groupId) &&
      [self.curUserIdListArray isEqualToArray:otherMessage.curUserIdListArray] &&
      [self.chgUserIdListArray isEqualToArray:otherMessage.chgUserIdListArray] &&
      self.hasAttachData == otherMessage.hasAttachData &&
      (!self.hasAttachData || [self.attachData isEqual:otherMessage.attachData]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasUserId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.userId] hash];
  }
  if (self.hasChangeType) {
    hashCode = hashCode * 31 + self.changeType;
  }
  if (self.hasResultCode) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.resultCode] hash];
  }
  if (self.hasGroupId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.groupId] hash];
  }
  [self.curUserIdListArray enumerateObjectsUsingBlock:^(NSNumber *obj, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [obj longValue];
  }];
  [self.chgUserIdListArray enumerateObjectsUsingBlock:^(NSNumber *obj, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [obj longValue];
  }];
  if (self.hasAttachData) {
    hashCode = hashCode * 31 + [self.attachData hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface IMGroupChangeMemberRspBuilder()
@property (strong) IMGroupChangeMemberRsp* resultImgroupChangeMemberRsp;
@end

@implementation IMGroupChangeMemberRspBuilder
@synthesize resultImgroupChangeMemberRsp;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultImgroupChangeMemberRsp = [[IMGroupChangeMemberRsp alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultImgroupChangeMemberRsp;
}
- (IMGroupChangeMemberRspBuilder*) clear {
  self.resultImgroupChangeMemberRsp = [[IMGroupChangeMemberRsp alloc] init];
  return self;
}
- (IMGroupChangeMemberRspBuilder*) clone {
  return [IMGroupChangeMemberRsp builderWithPrototype:resultImgroupChangeMemberRsp];
}
- (IMGroupChangeMemberRsp*) defaultInstance {
  return [IMGroupChangeMemberRsp defaultInstance];
}
- (IMGroupChangeMemberRsp*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (IMGroupChangeMemberRsp*) buildPartial {
  IMGroupChangeMemberRsp* returnMe = resultImgroupChangeMemberRsp;
  self.resultImgroupChangeMemberRsp = nil;
  return returnMe;
}
- (IMGroupChangeMemberRspBuilder*) mergeFrom:(IMGroupChangeMemberRsp*) other {
  if (other == [IMGroupChangeMemberRsp defaultInstance]) {
    return self;
  }
  if (other.hasUserId) {
    [self setUserId:other.userId];
  }
  if (other.hasChangeType) {
    [self setChangeType:other.changeType];
  }
  if (other.hasResultCode) {
    [self setResultCode:other.resultCode];
  }
  if (other.hasGroupId) {
    [self setGroupId:other.groupId];
  }
  if (other.curUserIdListArray.count > 0) {
    if (resultImgroupChangeMemberRsp.curUserIdListArray == nil) {
      resultImgroupChangeMemberRsp.curUserIdListArray = [other.curUserIdListArray copy];
    } else {
      [resultImgroupChangeMemberRsp.curUserIdListArray appendArray:other.curUserIdListArray];
    }
  }
  if (other.chgUserIdListArray.count > 0) {
    if (resultImgroupChangeMemberRsp.chgUserIdListArray == nil) {
      resultImgroupChangeMemberRsp.chgUserIdListArray = [other.chgUserIdListArray copy];
    } else {
      [resultImgroupChangeMemberRsp.chgUserIdListArray appendArray:other.chgUserIdListArray];
    }
  }
  if (other.hasAttachData) {
    [self setAttachData:other.attachData];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (IMGroupChangeMemberRspBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (IMGroupChangeMemberRspBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setUserId:[input readUInt32]];
        break;
      }
      case 16: {
        GroupModifyType value = (GroupModifyType)[input readEnum];
        if (GroupModifyTypeIsValidValue(value)) {
          [self setChangeType:value];
        } else {
          [unknownFields mergeVarintField:2 value:value];
        }
        break;
      }
      case 24: {
        [self setResultCode:[input readUInt32]];
        break;
      }
      case 32: {
        [self setGroupId:[input readUInt32]];
        break;
      }
      case 40: {
        [self addCurUserIdList:[input readUInt32]];
        break;
      }
      case 48: {
        [self addChgUserIdList:[input readUInt32]];
        break;
      }
      case 162: {
        [self setAttachData:[input readData]];
        break;
      }
    }
  }
}
- (BOOL) hasUserId {
  return resultImgroupChangeMemberRsp.hasUserId;
}
- (UInt32) userId {
  return resultImgroupChangeMemberRsp.userId;
}
- (IMGroupChangeMemberRspBuilder*) setUserId:(UInt32) value {
  resultImgroupChangeMemberRsp.hasUserId = YES;
  resultImgroupChangeMemberRsp.userId = value;
  return self;
}
- (IMGroupChangeMemberRspBuilder*) clearUserId {
  resultImgroupChangeMemberRsp.hasUserId = NO;
  resultImgroupChangeMemberRsp.userId = 0;
  return self;
}
- (BOOL) hasChangeType {
  return resultImgroupChangeMemberRsp.hasChangeType;
}
- (GroupModifyType) changeType {
  return resultImgroupChangeMemberRsp.changeType;
}
- (IMGroupChangeMemberRspBuilder*) setChangeType:(GroupModifyType) value {
  resultImgroupChangeMemberRsp.hasChangeType = YES;
  resultImgroupChangeMemberRsp.changeType = value;
  return self;
}
- (IMGroupChangeMemberRspBuilder*) clearChangeType {
  resultImgroupChangeMemberRsp.hasChangeType = NO;
  resultImgroupChangeMemberRsp.changeType = GroupModifyTypeGroupModifyTypeAdd;
  return self;
}
- (BOOL) hasResultCode {
  return resultImgroupChangeMemberRsp.hasResultCode;
}
- (UInt32) resultCode {
  return resultImgroupChangeMemberRsp.resultCode;
}
- (IMGroupChangeMemberRspBuilder*) setResultCode:(UInt32) value {
  resultImgroupChangeMemberRsp.hasResultCode = YES;
  resultImgroupChangeMemberRsp.resultCode = value;
  return self;
}
- (IMGroupChangeMemberRspBuilder*) clearResultCode {
  resultImgroupChangeMemberRsp.hasResultCode = NO;
  resultImgroupChangeMemberRsp.resultCode = 0;
  return self;
}
- (BOOL) hasGroupId {
  return resultImgroupChangeMemberRsp.hasGroupId;
}
- (UInt32) groupId {
  return resultImgroupChangeMemberRsp.groupId;
}
- (IMGroupChangeMemberRspBuilder*) setGroupId:(UInt32) value {
  resultImgroupChangeMemberRsp.hasGroupId = YES;
  resultImgroupChangeMemberRsp.groupId = value;
  return self;
}
- (IMGroupChangeMemberRspBuilder*) clearGroupId {
  resultImgroupChangeMemberRsp.hasGroupId = NO;
  resultImgroupChangeMemberRsp.groupId = 0;
  return self;
}
- (PBAppendableArray *)curUserIdList {
  return resultImgroupChangeMemberRsp.curUserIdListArray;
}
- (UInt32)curUserIdListAtIndex:(NSUInteger)index {
  return [resultImgroupChangeMemberRsp curUserIdListAtIndex:index];
}
- (IMGroupChangeMemberRspBuilder *)addCurUserIdList:(UInt32)value {
  if (resultImgroupChangeMemberRsp.curUserIdListArray == nil) {
    resultImgroupChangeMemberRsp.curUserIdListArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeUInt32];
  }
  [resultImgroupChangeMemberRsp.curUserIdListArray addUint32:value];
  return self;
}
- (IMGroupChangeMemberRspBuilder *)setCurUserIdListArray:(NSArray *)array {
  resultImgroupChangeMemberRsp.curUserIdListArray = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeUInt32];
  return self;
}
- (IMGroupChangeMemberRspBuilder *)setCurUserIdListValues:(const UInt32 *)values count:(NSUInteger)count {
  resultImgroupChangeMemberRsp.curUserIdListArray = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeUInt32];
  return self;
}
- (IMGroupChangeMemberRspBuilder *)clearCurUserIdList {
  resultImgroupChangeMemberRsp.curUserIdListArray = nil;
  return self;
}
- (PBAppendableArray *)chgUserIdList {
  return resultImgroupChangeMemberRsp.chgUserIdListArray;
}
- (UInt32)chgUserIdListAtIndex:(NSUInteger)index {
  return [resultImgroupChangeMemberRsp chgUserIdListAtIndex:index];
}
- (IMGroupChangeMemberRspBuilder *)addChgUserIdList:(UInt32)value {
  if (resultImgroupChangeMemberRsp.chgUserIdListArray == nil) {
    resultImgroupChangeMemberRsp.chgUserIdListArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeUInt32];
  }
  [resultImgroupChangeMemberRsp.chgUserIdListArray addUint32:value];
  return self;
}
- (IMGroupChangeMemberRspBuilder *)setChgUserIdListArray:(NSArray *)array {
  resultImgroupChangeMemberRsp.chgUserIdListArray = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeUInt32];
  return self;
}
- (IMGroupChangeMemberRspBuilder *)setChgUserIdListValues:(const UInt32 *)values count:(NSUInteger)count {
  resultImgroupChangeMemberRsp.chgUserIdListArray = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeUInt32];
  return self;
}
- (IMGroupChangeMemberRspBuilder *)clearChgUserIdList {
  resultImgroupChangeMemberRsp.chgUserIdListArray = nil;
  return self;
}
- (BOOL) hasAttachData {
  return resultImgroupChangeMemberRsp.hasAttachData;
}
- (NSData*) attachData {
  return resultImgroupChangeMemberRsp.attachData;
}
- (IMGroupChangeMemberRspBuilder*) setAttachData:(NSData*) value {
  resultImgroupChangeMemberRsp.hasAttachData = YES;
  resultImgroupChangeMemberRsp.attachData = value;
  return self;
}
- (IMGroupChangeMemberRspBuilder*) clearAttachData {
  resultImgroupChangeMemberRsp.hasAttachData = NO;
  resultImgroupChangeMemberRsp.attachData = [NSData data];
  return self;
}
@end

@interface IMGroupShieldReq ()
@property UInt32 userId;
@property UInt32 groupId;
@property UInt32 shieldStatus;
@property (strong) NSData* attachData;
@end

@implementation IMGroupShieldReq

- (BOOL) hasUserId {
  return !!hasUserId_;
}
- (void) setHasUserId:(BOOL) _value_ {
  hasUserId_ = !!_value_;
}
@synthesize userId;
- (BOOL) hasGroupId {
  return !!hasGroupId_;
}
- (void) setHasGroupId:(BOOL) _value_ {
  hasGroupId_ = !!_value_;
}
@synthesize groupId;
- (BOOL) hasShieldStatus {
  return !!hasShieldStatus_;
}
- (void) setHasShieldStatus:(BOOL) _value_ {
  hasShieldStatus_ = !!_value_;
}
@synthesize shieldStatus;
- (BOOL) hasAttachData {
  return !!hasAttachData_;
}
- (void) setHasAttachData:(BOOL) _value_ {
  hasAttachData_ = !!_value_;
}
@synthesize attachData;
- (instancetype) init {
  if ((self = [super init])) {
    self.userId = 0;
    self.groupId = 0;
    self.shieldStatus = 0;
    self.attachData = [NSData data];
  }
  return self;
}
static IMGroupShieldReq* defaultIMGroupShieldReqInstance = nil;
+ (void) initialize {
  if (self == [IMGroupShieldReq class]) {
    defaultIMGroupShieldReqInstance = [[IMGroupShieldReq alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultIMGroupShieldReqInstance;
}
- (instancetype) defaultInstance {
  return defaultIMGroupShieldReqInstance;
}
- (BOOL) isInitialized {
  if (!self.hasUserId) {
    return NO;
  }
  if (!self.hasGroupId) {
    return NO;
  }
  if (!self.hasShieldStatus) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasUserId) {
    [output writeUInt32:1 value:self.userId];
  }
  if (self.hasGroupId) {
    [output writeUInt32:2 value:self.groupId];
  }
  if (self.hasShieldStatus) {
    [output writeUInt32:3 value:self.shieldStatus];
  }
  if (self.hasAttachData) {
    [output writeData:20 value:self.attachData];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasUserId) {
    size_ += computeUInt32Size(1, self.userId);
  }
  if (self.hasGroupId) {
    size_ += computeUInt32Size(2, self.groupId);
  }
  if (self.hasShieldStatus) {
    size_ += computeUInt32Size(3, self.shieldStatus);
  }
  if (self.hasAttachData) {
    size_ += computeDataSize(20, self.attachData);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (IMGroupShieldReq*) parseFromData:(NSData*) data {
  return (IMGroupShieldReq*)[[[IMGroupShieldReq builder] mergeFromData:data] build];
}
+ (IMGroupShieldReq*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMGroupShieldReq*)[[[IMGroupShieldReq builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (IMGroupShieldReq*) parseFromInputStream:(NSInputStream*) input {
  return (IMGroupShieldReq*)[[[IMGroupShieldReq builder] mergeFromInputStream:input] build];
}
+ (IMGroupShieldReq*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMGroupShieldReq*)[[[IMGroupShieldReq builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (IMGroupShieldReq*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (IMGroupShieldReq*)[[[IMGroupShieldReq builder] mergeFromCodedInputStream:input] build];
}
+ (IMGroupShieldReq*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMGroupShieldReq*)[[[IMGroupShieldReq builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (IMGroupShieldReqBuilder*) builder {
  return [[IMGroupShieldReqBuilder alloc] init];
}
+ (IMGroupShieldReqBuilder*) builderWithPrototype:(IMGroupShieldReq*) prototype {
  return [[IMGroupShieldReq builder] mergeFrom:prototype];
}
- (IMGroupShieldReqBuilder*) builder {
  return [IMGroupShieldReq builder];
}
- (IMGroupShieldReqBuilder*) toBuilder {
  return [IMGroupShieldReq builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasUserId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"userId", [NSNumber numberWithInteger:self.userId]];
  }
  if (self.hasGroupId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"groupId", [NSNumber numberWithInteger:self.groupId]];
  }
  if (self.hasShieldStatus) {
    [output appendFormat:@"%@%@: %@\n", indent, @"shieldStatus", [NSNumber numberWithInteger:self.shieldStatus]];
  }
  if (self.hasAttachData) {
    [output appendFormat:@"%@%@: %@\n", indent, @"attachData", self.attachData];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasUserId) {
    [dictionary setObject: [NSNumber numberWithInteger:self.userId] forKey: @"userId"];
  }
  if (self.hasGroupId) {
    [dictionary setObject: [NSNumber numberWithInteger:self.groupId] forKey: @"groupId"];
  }
  if (self.hasShieldStatus) {
    [dictionary setObject: [NSNumber numberWithInteger:self.shieldStatus] forKey: @"shieldStatus"];
  }
  if (self.hasAttachData) {
    [dictionary setObject: self.attachData forKey: @"attachData"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[IMGroupShieldReq class]]) {
    return NO;
  }
  IMGroupShieldReq *otherMessage = other;
  return
      self.hasUserId == otherMessage.hasUserId &&
      (!self.hasUserId || self.userId == otherMessage.userId) &&
      self.hasGroupId == otherMessage.hasGroupId &&
      (!self.hasGroupId || self.groupId == otherMessage.groupId) &&
      self.hasShieldStatus == otherMessage.hasShieldStatus &&
      (!self.hasShieldStatus || self.shieldStatus == otherMessage.shieldStatus) &&
      self.hasAttachData == otherMessage.hasAttachData &&
      (!self.hasAttachData || [self.attachData isEqual:otherMessage.attachData]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasUserId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.userId] hash];
  }
  if (self.hasGroupId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.groupId] hash];
  }
  if (self.hasShieldStatus) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.shieldStatus] hash];
  }
  if (self.hasAttachData) {
    hashCode = hashCode * 31 + [self.attachData hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface IMGroupShieldReqBuilder()
@property (strong) IMGroupShieldReq* resultImgroupShieldReq;
@end

@implementation IMGroupShieldReqBuilder
@synthesize resultImgroupShieldReq;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultImgroupShieldReq = [[IMGroupShieldReq alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultImgroupShieldReq;
}
- (IMGroupShieldReqBuilder*) clear {
  self.resultImgroupShieldReq = [[IMGroupShieldReq alloc] init];
  return self;
}
- (IMGroupShieldReqBuilder*) clone {
  return [IMGroupShieldReq builderWithPrototype:resultImgroupShieldReq];
}
- (IMGroupShieldReq*) defaultInstance {
  return [IMGroupShieldReq defaultInstance];
}
- (IMGroupShieldReq*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (IMGroupShieldReq*) buildPartial {
  IMGroupShieldReq* returnMe = resultImgroupShieldReq;
  self.resultImgroupShieldReq = nil;
  return returnMe;
}
- (IMGroupShieldReqBuilder*) mergeFrom:(IMGroupShieldReq*) other {
  if (other == [IMGroupShieldReq defaultInstance]) {
    return self;
  }
  if (other.hasUserId) {
    [self setUserId:other.userId];
  }
  if (other.hasGroupId) {
    [self setGroupId:other.groupId];
  }
  if (other.hasShieldStatus) {
    [self setShieldStatus:other.shieldStatus];
  }
  if (other.hasAttachData) {
    [self setAttachData:other.attachData];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (IMGroupShieldReqBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (IMGroupShieldReqBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setUserId:[input readUInt32]];
        break;
      }
      case 16: {
        [self setGroupId:[input readUInt32]];
        break;
      }
      case 24: {
        [self setShieldStatus:[input readUInt32]];
        break;
      }
      case 162: {
        [self setAttachData:[input readData]];
        break;
      }
    }
  }
}
- (BOOL) hasUserId {
  return resultImgroupShieldReq.hasUserId;
}
- (UInt32) userId {
  return resultImgroupShieldReq.userId;
}
- (IMGroupShieldReqBuilder*) setUserId:(UInt32) value {
  resultImgroupShieldReq.hasUserId = YES;
  resultImgroupShieldReq.userId = value;
  return self;
}
- (IMGroupShieldReqBuilder*) clearUserId {
  resultImgroupShieldReq.hasUserId = NO;
  resultImgroupShieldReq.userId = 0;
  return self;
}
- (BOOL) hasGroupId {
  return resultImgroupShieldReq.hasGroupId;
}
- (UInt32) groupId {
  return resultImgroupShieldReq.groupId;
}
- (IMGroupShieldReqBuilder*) setGroupId:(UInt32) value {
  resultImgroupShieldReq.hasGroupId = YES;
  resultImgroupShieldReq.groupId = value;
  return self;
}
- (IMGroupShieldReqBuilder*) clearGroupId {
  resultImgroupShieldReq.hasGroupId = NO;
  resultImgroupShieldReq.groupId = 0;
  return self;
}
- (BOOL) hasShieldStatus {
  return resultImgroupShieldReq.hasShieldStatus;
}
- (UInt32) shieldStatus {
  return resultImgroupShieldReq.shieldStatus;
}
- (IMGroupShieldReqBuilder*) setShieldStatus:(UInt32) value {
  resultImgroupShieldReq.hasShieldStatus = YES;
  resultImgroupShieldReq.shieldStatus = value;
  return self;
}
- (IMGroupShieldReqBuilder*) clearShieldStatus {
  resultImgroupShieldReq.hasShieldStatus = NO;
  resultImgroupShieldReq.shieldStatus = 0;
  return self;
}
- (BOOL) hasAttachData {
  return resultImgroupShieldReq.hasAttachData;
}
- (NSData*) attachData {
  return resultImgroupShieldReq.attachData;
}
- (IMGroupShieldReqBuilder*) setAttachData:(NSData*) value {
  resultImgroupShieldReq.hasAttachData = YES;
  resultImgroupShieldReq.attachData = value;
  return self;
}
- (IMGroupShieldReqBuilder*) clearAttachData {
  resultImgroupShieldReq.hasAttachData = NO;
  resultImgroupShieldReq.attachData = [NSData data];
  return self;
}
@end

@interface IMGroupShieldRsp ()
@property UInt32 userId;
@property UInt32 groupId;
@property UInt32 resultCode;
@property (strong) NSData* attachData;
@end

@implementation IMGroupShieldRsp

- (BOOL) hasUserId {
  return !!hasUserId_;
}
- (void) setHasUserId:(BOOL) _value_ {
  hasUserId_ = !!_value_;
}
@synthesize userId;
- (BOOL) hasGroupId {
  return !!hasGroupId_;
}
- (void) setHasGroupId:(BOOL) _value_ {
  hasGroupId_ = !!_value_;
}
@synthesize groupId;
- (BOOL) hasResultCode {
  return !!hasResultCode_;
}
- (void) setHasResultCode:(BOOL) _value_ {
  hasResultCode_ = !!_value_;
}
@synthesize resultCode;
- (BOOL) hasAttachData {
  return !!hasAttachData_;
}
- (void) setHasAttachData:(BOOL) _value_ {
  hasAttachData_ = !!_value_;
}
@synthesize attachData;
- (instancetype) init {
  if ((self = [super init])) {
    self.userId = 0;
    self.groupId = 0;
    self.resultCode = 0;
    self.attachData = [NSData data];
  }
  return self;
}
static IMGroupShieldRsp* defaultIMGroupShieldRspInstance = nil;
+ (void) initialize {
  if (self == [IMGroupShieldRsp class]) {
    defaultIMGroupShieldRspInstance = [[IMGroupShieldRsp alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultIMGroupShieldRspInstance;
}
- (instancetype) defaultInstance {
  return defaultIMGroupShieldRspInstance;
}
- (BOOL) isInitialized {
  if (!self.hasUserId) {
    return NO;
  }
  if (!self.hasGroupId) {
    return NO;
  }
  if (!self.hasResultCode) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasUserId) {
    [output writeUInt32:1 value:self.userId];
  }
  if (self.hasGroupId) {
    [output writeUInt32:2 value:self.groupId];
  }
  if (self.hasResultCode) {
    [output writeUInt32:3 value:self.resultCode];
  }
  if (self.hasAttachData) {
    [output writeData:20 value:self.attachData];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasUserId) {
    size_ += computeUInt32Size(1, self.userId);
  }
  if (self.hasGroupId) {
    size_ += computeUInt32Size(2, self.groupId);
  }
  if (self.hasResultCode) {
    size_ += computeUInt32Size(3, self.resultCode);
  }
  if (self.hasAttachData) {
    size_ += computeDataSize(20, self.attachData);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (IMGroupShieldRsp*) parseFromData:(NSData*) data {
  return (IMGroupShieldRsp*)[[[IMGroupShieldRsp builder] mergeFromData:data] build];
}
+ (IMGroupShieldRsp*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMGroupShieldRsp*)[[[IMGroupShieldRsp builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (IMGroupShieldRsp*) parseFromInputStream:(NSInputStream*) input {
  return (IMGroupShieldRsp*)[[[IMGroupShieldRsp builder] mergeFromInputStream:input] build];
}
+ (IMGroupShieldRsp*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMGroupShieldRsp*)[[[IMGroupShieldRsp builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (IMGroupShieldRsp*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (IMGroupShieldRsp*)[[[IMGroupShieldRsp builder] mergeFromCodedInputStream:input] build];
}
+ (IMGroupShieldRsp*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMGroupShieldRsp*)[[[IMGroupShieldRsp builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (IMGroupShieldRspBuilder*) builder {
  return [[IMGroupShieldRspBuilder alloc] init];
}
+ (IMGroupShieldRspBuilder*) builderWithPrototype:(IMGroupShieldRsp*) prototype {
  return [[IMGroupShieldRsp builder] mergeFrom:prototype];
}
- (IMGroupShieldRspBuilder*) builder {
  return [IMGroupShieldRsp builder];
}
- (IMGroupShieldRspBuilder*) toBuilder {
  return [IMGroupShieldRsp builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasUserId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"userId", [NSNumber numberWithInteger:self.userId]];
  }
  if (self.hasGroupId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"groupId", [NSNumber numberWithInteger:self.groupId]];
  }
  if (self.hasResultCode) {
    [output appendFormat:@"%@%@: %@\n", indent, @"resultCode", [NSNumber numberWithInteger:self.resultCode]];
  }
  if (self.hasAttachData) {
    [output appendFormat:@"%@%@: %@\n", indent, @"attachData", self.attachData];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasUserId) {
    [dictionary setObject: [NSNumber numberWithInteger:self.userId] forKey: @"userId"];
  }
  if (self.hasGroupId) {
    [dictionary setObject: [NSNumber numberWithInteger:self.groupId] forKey: @"groupId"];
  }
  if (self.hasResultCode) {
    [dictionary setObject: [NSNumber numberWithInteger:self.resultCode] forKey: @"resultCode"];
  }
  if (self.hasAttachData) {
    [dictionary setObject: self.attachData forKey: @"attachData"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[IMGroupShieldRsp class]]) {
    return NO;
  }
  IMGroupShieldRsp *otherMessage = other;
  return
      self.hasUserId == otherMessage.hasUserId &&
      (!self.hasUserId || self.userId == otherMessage.userId) &&
      self.hasGroupId == otherMessage.hasGroupId &&
      (!self.hasGroupId || self.groupId == otherMessage.groupId) &&
      self.hasResultCode == otherMessage.hasResultCode &&
      (!self.hasResultCode || self.resultCode == otherMessage.resultCode) &&
      self.hasAttachData == otherMessage.hasAttachData &&
      (!self.hasAttachData || [self.attachData isEqual:otherMessage.attachData]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasUserId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.userId] hash];
  }
  if (self.hasGroupId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.groupId] hash];
  }
  if (self.hasResultCode) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.resultCode] hash];
  }
  if (self.hasAttachData) {
    hashCode = hashCode * 31 + [self.attachData hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface IMGroupShieldRspBuilder()
@property (strong) IMGroupShieldRsp* resultImgroupShieldRsp;
@end

@implementation IMGroupShieldRspBuilder
@synthesize resultImgroupShieldRsp;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultImgroupShieldRsp = [[IMGroupShieldRsp alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultImgroupShieldRsp;
}
- (IMGroupShieldRspBuilder*) clear {
  self.resultImgroupShieldRsp = [[IMGroupShieldRsp alloc] init];
  return self;
}
- (IMGroupShieldRspBuilder*) clone {
  return [IMGroupShieldRsp builderWithPrototype:resultImgroupShieldRsp];
}
- (IMGroupShieldRsp*) defaultInstance {
  return [IMGroupShieldRsp defaultInstance];
}
- (IMGroupShieldRsp*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (IMGroupShieldRsp*) buildPartial {
  IMGroupShieldRsp* returnMe = resultImgroupShieldRsp;
  self.resultImgroupShieldRsp = nil;
  return returnMe;
}
- (IMGroupShieldRspBuilder*) mergeFrom:(IMGroupShieldRsp*) other {
  if (other == [IMGroupShieldRsp defaultInstance]) {
    return self;
  }
  if (other.hasUserId) {
    [self setUserId:other.userId];
  }
  if (other.hasGroupId) {
    [self setGroupId:other.groupId];
  }
  if (other.hasResultCode) {
    [self setResultCode:other.resultCode];
  }
  if (other.hasAttachData) {
    [self setAttachData:other.attachData];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (IMGroupShieldRspBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (IMGroupShieldRspBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setUserId:[input readUInt32]];
        break;
      }
      case 16: {
        [self setGroupId:[input readUInt32]];
        break;
      }
      case 24: {
        [self setResultCode:[input readUInt32]];
        break;
      }
      case 162: {
        [self setAttachData:[input readData]];
        break;
      }
    }
  }
}
- (BOOL) hasUserId {
  return resultImgroupShieldRsp.hasUserId;
}
- (UInt32) userId {
  return resultImgroupShieldRsp.userId;
}
- (IMGroupShieldRspBuilder*) setUserId:(UInt32) value {
  resultImgroupShieldRsp.hasUserId = YES;
  resultImgroupShieldRsp.userId = value;
  return self;
}
- (IMGroupShieldRspBuilder*) clearUserId {
  resultImgroupShieldRsp.hasUserId = NO;
  resultImgroupShieldRsp.userId = 0;
  return self;
}
- (BOOL) hasGroupId {
  return resultImgroupShieldRsp.hasGroupId;
}
- (UInt32) groupId {
  return resultImgroupShieldRsp.groupId;
}
- (IMGroupShieldRspBuilder*) setGroupId:(UInt32) value {
  resultImgroupShieldRsp.hasGroupId = YES;
  resultImgroupShieldRsp.groupId = value;
  return self;
}
- (IMGroupShieldRspBuilder*) clearGroupId {
  resultImgroupShieldRsp.hasGroupId = NO;
  resultImgroupShieldRsp.groupId = 0;
  return self;
}
- (BOOL) hasResultCode {
  return resultImgroupShieldRsp.hasResultCode;
}
- (UInt32) resultCode {
  return resultImgroupShieldRsp.resultCode;
}
- (IMGroupShieldRspBuilder*) setResultCode:(UInt32) value {
  resultImgroupShieldRsp.hasResultCode = YES;
  resultImgroupShieldRsp.resultCode = value;
  return self;
}
- (IMGroupShieldRspBuilder*) clearResultCode {
  resultImgroupShieldRsp.hasResultCode = NO;
  resultImgroupShieldRsp.resultCode = 0;
  return self;
}
- (BOOL) hasAttachData {
  return resultImgroupShieldRsp.hasAttachData;
}
- (NSData*) attachData {
  return resultImgroupShieldRsp.attachData;
}
- (IMGroupShieldRspBuilder*) setAttachData:(NSData*) value {
  resultImgroupShieldRsp.hasAttachData = YES;
  resultImgroupShieldRsp.attachData = value;
  return self;
}
- (IMGroupShieldRspBuilder*) clearAttachData {
  resultImgroupShieldRsp.hasAttachData = NO;
  resultImgroupShieldRsp.attachData = [NSData data];
  return self;
}
@end

@interface IMGroupChangeMemberNotify ()
@property UInt32 userId;
@property GroupModifyType changeType;
@property UInt32 groupId;
@property (strong) PBAppendableArray * curUserIdListArray;
@property (strong) PBAppendableArray * chgUserIdListArray;
@end

@implementation IMGroupChangeMemberNotify

- (BOOL) hasUserId {
  return !!hasUserId_;
}
- (void) setHasUserId:(BOOL) _value_ {
  hasUserId_ = !!_value_;
}
@synthesize userId;
- (BOOL) hasChangeType {
  return !!hasChangeType_;
}
- (void) setHasChangeType:(BOOL) _value_ {
  hasChangeType_ = !!_value_;
}
@synthesize changeType;
- (BOOL) hasGroupId {
  return !!hasGroupId_;
}
- (void) setHasGroupId:(BOOL) _value_ {
  hasGroupId_ = !!_value_;
}
@synthesize groupId;
@synthesize curUserIdListArray;
@dynamic curUserIdList;
@synthesize chgUserIdListArray;
@dynamic chgUserIdList;
- (instancetype) init {
  if ((self = [super init])) {
    self.userId = 0;
    self.changeType = GroupModifyTypeGroupModifyTypeAdd;
    self.groupId = 0;
  }
  return self;
}
static IMGroupChangeMemberNotify* defaultIMGroupChangeMemberNotifyInstance = nil;
+ (void) initialize {
  if (self == [IMGroupChangeMemberNotify class]) {
    defaultIMGroupChangeMemberNotifyInstance = [[IMGroupChangeMemberNotify alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultIMGroupChangeMemberNotifyInstance;
}
- (instancetype) defaultInstance {
  return defaultIMGroupChangeMemberNotifyInstance;
}
- (PBArray *)curUserIdList {
  return curUserIdListArray;
}
- (UInt32)curUserIdListAtIndex:(NSUInteger)index {
  return [curUserIdListArray uint32AtIndex:index];
}
- (PBArray *)chgUserIdList {
  return chgUserIdListArray;
}
- (UInt32)chgUserIdListAtIndex:(NSUInteger)index {
  return [chgUserIdListArray uint32AtIndex:index];
}
- (BOOL) isInitialized {
  if (!self.hasUserId) {
    return NO;
  }
  if (!self.hasChangeType) {
    return NO;
  }
  if (!self.hasGroupId) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasUserId) {
    [output writeUInt32:1 value:self.userId];
  }
  if (self.hasChangeType) {
    [output writeEnum:2 value:self.changeType];
  }
  if (self.hasGroupId) {
    [output writeUInt32:3 value:self.groupId];
  }
  const NSUInteger curUserIdListArrayCount = self.curUserIdListArray.count;
  if (curUserIdListArrayCount > 0) {
    const UInt32 *values = (const UInt32 *)self.curUserIdListArray.data;
    for (NSUInteger i = 0; i < curUserIdListArrayCount; ++i) {
      [output writeUInt32:4 value:values[i]];
    }
  }
  const NSUInteger chgUserIdListArrayCount = self.chgUserIdListArray.count;
  if (chgUserIdListArrayCount > 0) {
    const UInt32 *values = (const UInt32 *)self.chgUserIdListArray.data;
    for (NSUInteger i = 0; i < chgUserIdListArrayCount; ++i) {
      [output writeUInt32:5 value:values[i]];
    }
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasUserId) {
    size_ += computeUInt32Size(1, self.userId);
  }
  if (self.hasChangeType) {
    size_ += computeEnumSize(2, self.changeType);
  }
  if (self.hasGroupId) {
    size_ += computeUInt32Size(3, self.groupId);
  }
  {
    __block SInt32 dataSize = 0;
    const NSUInteger count = self.curUserIdListArray.count;
    const UInt32 *values = (const UInt32 *)self.curUserIdListArray.data;
    for (NSUInteger i = 0; i < count; ++i) {
      dataSize += computeUInt32SizeNoTag(values[i]);
    }
    size_ += dataSize;
    size_ += (SInt32)(1 * count);
  }
  {
    __block SInt32 dataSize = 0;
    const NSUInteger count = self.chgUserIdListArray.count;
    const UInt32 *values = (const UInt32 *)self.chgUserIdListArray.data;
    for (NSUInteger i = 0; i < count; ++i) {
      dataSize += computeUInt32SizeNoTag(values[i]);
    }
    size_ += dataSize;
    size_ += (SInt32)(1 * count);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (IMGroupChangeMemberNotify*) parseFromData:(NSData*) data {
  return (IMGroupChangeMemberNotify*)[[[IMGroupChangeMemberNotify builder] mergeFromData:data] build];
}
+ (IMGroupChangeMemberNotify*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMGroupChangeMemberNotify*)[[[IMGroupChangeMemberNotify builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (IMGroupChangeMemberNotify*) parseFromInputStream:(NSInputStream*) input {
  return (IMGroupChangeMemberNotify*)[[[IMGroupChangeMemberNotify builder] mergeFromInputStream:input] build];
}
+ (IMGroupChangeMemberNotify*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMGroupChangeMemberNotify*)[[[IMGroupChangeMemberNotify builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (IMGroupChangeMemberNotify*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (IMGroupChangeMemberNotify*)[[[IMGroupChangeMemberNotify builder] mergeFromCodedInputStream:input] build];
}
+ (IMGroupChangeMemberNotify*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMGroupChangeMemberNotify*)[[[IMGroupChangeMemberNotify builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (IMGroupChangeMemberNotifyBuilder*) builder {
  return [[IMGroupChangeMemberNotifyBuilder alloc] init];
}
+ (IMGroupChangeMemberNotifyBuilder*) builderWithPrototype:(IMGroupChangeMemberNotify*) prototype {
  return [[IMGroupChangeMemberNotify builder] mergeFrom:prototype];
}
- (IMGroupChangeMemberNotifyBuilder*) builder {
  return [IMGroupChangeMemberNotify builder];
}
- (IMGroupChangeMemberNotifyBuilder*) toBuilder {
  return [IMGroupChangeMemberNotify builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasUserId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"userId", [NSNumber numberWithInteger:self.userId]];
  }
  if (self.hasChangeType) {
    [output appendFormat:@"%@%@: %@\n", indent, @"changeType", NSStringFromGroupModifyType(self.changeType)];
  }
  if (self.hasGroupId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"groupId", [NSNumber numberWithInteger:self.groupId]];
  }
  [self.curUserIdListArray enumerateObjectsUsingBlock:^(id obj, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@: %@\n", indent, @"curUserIdList", obj];
  }];
  [self.chgUserIdListArray enumerateObjectsUsingBlock:^(id obj, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@: %@\n", indent, @"chgUserIdList", obj];
  }];
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasUserId) {
    [dictionary setObject: [NSNumber numberWithInteger:self.userId] forKey: @"userId"];
  }
  if (self.hasChangeType) {
    [dictionary setObject: @(self.changeType) forKey: @"changeType"];
  }
  if (self.hasGroupId) {
    [dictionary setObject: [NSNumber numberWithInteger:self.groupId] forKey: @"groupId"];
  }
  NSMutableArray * curUserIdListArrayArray = [NSMutableArray new];
  NSUInteger curUserIdListArrayCount=self.curUserIdListArray.count;
  for(int i=0;i<curUserIdListArrayCount;i++){
    [curUserIdListArrayArray addObject: @([self.curUserIdListArray uint32AtIndex:i])];
  }
  [dictionary setObject: curUserIdListArrayArray forKey: @"curUserIdList"];
  NSMutableArray * chgUserIdListArrayArray = [NSMutableArray new];
  NSUInteger chgUserIdListArrayCount=self.chgUserIdListArray.count;
  for(int i=0;i<chgUserIdListArrayCount;i++){
    [chgUserIdListArrayArray addObject: @([self.chgUserIdListArray uint32AtIndex:i])];
  }
  [dictionary setObject: chgUserIdListArrayArray forKey: @"chgUserIdList"];
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[IMGroupChangeMemberNotify class]]) {
    return NO;
  }
  IMGroupChangeMemberNotify *otherMessage = other;
  return
      self.hasUserId == otherMessage.hasUserId &&
      (!self.hasUserId || self.userId == otherMessage.userId) &&
      self.hasChangeType == otherMessage.hasChangeType &&
      (!self.hasChangeType || self.changeType == otherMessage.changeType) &&
      self.hasGroupId == otherMessage.hasGroupId &&
      (!self.hasGroupId || self.groupId == otherMessage.groupId) &&
      [self.curUserIdListArray isEqualToArray:otherMessage.curUserIdListArray] &&
      [self.chgUserIdListArray isEqualToArray:otherMessage.chgUserIdListArray] &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasUserId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.userId] hash];
  }
  if (self.hasChangeType) {
    hashCode = hashCode * 31 + self.changeType;
  }
  if (self.hasGroupId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.groupId] hash];
  }
  [self.curUserIdListArray enumerateObjectsUsingBlock:^(NSNumber *obj, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [obj longValue];
  }];
  [self.chgUserIdListArray enumerateObjectsUsingBlock:^(NSNumber *obj, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [obj longValue];
  }];
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface IMGroupChangeMemberNotifyBuilder()
@property (strong) IMGroupChangeMemberNotify* resultImgroupChangeMemberNotify;
@end

@implementation IMGroupChangeMemberNotifyBuilder
@synthesize resultImgroupChangeMemberNotify;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultImgroupChangeMemberNotify = [[IMGroupChangeMemberNotify alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultImgroupChangeMemberNotify;
}
- (IMGroupChangeMemberNotifyBuilder*) clear {
  self.resultImgroupChangeMemberNotify = [[IMGroupChangeMemberNotify alloc] init];
  return self;
}
- (IMGroupChangeMemberNotifyBuilder*) clone {
  return [IMGroupChangeMemberNotify builderWithPrototype:resultImgroupChangeMemberNotify];
}
- (IMGroupChangeMemberNotify*) defaultInstance {
  return [IMGroupChangeMemberNotify defaultInstance];
}
- (IMGroupChangeMemberNotify*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (IMGroupChangeMemberNotify*) buildPartial {
  IMGroupChangeMemberNotify* returnMe = resultImgroupChangeMemberNotify;
  self.resultImgroupChangeMemberNotify = nil;
  return returnMe;
}
- (IMGroupChangeMemberNotifyBuilder*) mergeFrom:(IMGroupChangeMemberNotify*) other {
  if (other == [IMGroupChangeMemberNotify defaultInstance]) {
    return self;
  }
  if (other.hasUserId) {
    [self setUserId:other.userId];
  }
  if (other.hasChangeType) {
    [self setChangeType:other.changeType];
  }
  if (other.hasGroupId) {
    [self setGroupId:other.groupId];
  }
  if (other.curUserIdListArray.count > 0) {
    if (resultImgroupChangeMemberNotify.curUserIdListArray == nil) {
      resultImgroupChangeMemberNotify.curUserIdListArray = [other.curUserIdListArray copy];
    } else {
      [resultImgroupChangeMemberNotify.curUserIdListArray appendArray:other.curUserIdListArray];
    }
  }
  if (other.chgUserIdListArray.count > 0) {
    if (resultImgroupChangeMemberNotify.chgUserIdListArray == nil) {
      resultImgroupChangeMemberNotify.chgUserIdListArray = [other.chgUserIdListArray copy];
    } else {
      [resultImgroupChangeMemberNotify.chgUserIdListArray appendArray:other.chgUserIdListArray];
    }
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (IMGroupChangeMemberNotifyBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (IMGroupChangeMemberNotifyBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setUserId:[input readUInt32]];
        break;
      }
      case 16: {
        GroupModifyType value = (GroupModifyType)[input readEnum];
        if (GroupModifyTypeIsValidValue(value)) {
          [self setChangeType:value];
        } else {
          [unknownFields mergeVarintField:2 value:value];
        }
        break;
      }
      case 24: {
        [self setGroupId:[input readUInt32]];
        break;
      }
      case 32: {
        [self addCurUserIdList:[input readUInt32]];
        break;
      }
      case 40: {
        [self addChgUserIdList:[input readUInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasUserId {
  return resultImgroupChangeMemberNotify.hasUserId;
}
- (UInt32) userId {
  return resultImgroupChangeMemberNotify.userId;
}
- (IMGroupChangeMemberNotifyBuilder*) setUserId:(UInt32) value {
  resultImgroupChangeMemberNotify.hasUserId = YES;
  resultImgroupChangeMemberNotify.userId = value;
  return self;
}
- (IMGroupChangeMemberNotifyBuilder*) clearUserId {
  resultImgroupChangeMemberNotify.hasUserId = NO;
  resultImgroupChangeMemberNotify.userId = 0;
  return self;
}
- (BOOL) hasChangeType {
  return resultImgroupChangeMemberNotify.hasChangeType;
}
- (GroupModifyType) changeType {
  return resultImgroupChangeMemberNotify.changeType;
}
- (IMGroupChangeMemberNotifyBuilder*) setChangeType:(GroupModifyType) value {
  resultImgroupChangeMemberNotify.hasChangeType = YES;
  resultImgroupChangeMemberNotify.changeType = value;
  return self;
}
- (IMGroupChangeMemberNotifyBuilder*) clearChangeType {
  resultImgroupChangeMemberNotify.hasChangeType = NO;
  resultImgroupChangeMemberNotify.changeType = GroupModifyTypeGroupModifyTypeAdd;
  return self;
}
- (BOOL) hasGroupId {
  return resultImgroupChangeMemberNotify.hasGroupId;
}
- (UInt32) groupId {
  return resultImgroupChangeMemberNotify.groupId;
}
- (IMGroupChangeMemberNotifyBuilder*) setGroupId:(UInt32) value {
  resultImgroupChangeMemberNotify.hasGroupId = YES;
  resultImgroupChangeMemberNotify.groupId = value;
  return self;
}
- (IMGroupChangeMemberNotifyBuilder*) clearGroupId {
  resultImgroupChangeMemberNotify.hasGroupId = NO;
  resultImgroupChangeMemberNotify.groupId = 0;
  return self;
}
- (PBAppendableArray *)curUserIdList {
  return resultImgroupChangeMemberNotify.curUserIdListArray;
}
- (UInt32)curUserIdListAtIndex:(NSUInteger)index {
  return [resultImgroupChangeMemberNotify curUserIdListAtIndex:index];
}
- (IMGroupChangeMemberNotifyBuilder *)addCurUserIdList:(UInt32)value {
  if (resultImgroupChangeMemberNotify.curUserIdListArray == nil) {
    resultImgroupChangeMemberNotify.curUserIdListArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeUInt32];
  }
  [resultImgroupChangeMemberNotify.curUserIdListArray addUint32:value];
  return self;
}
- (IMGroupChangeMemberNotifyBuilder *)setCurUserIdListArray:(NSArray *)array {
  resultImgroupChangeMemberNotify.curUserIdListArray = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeUInt32];
  return self;
}
- (IMGroupChangeMemberNotifyBuilder *)setCurUserIdListValues:(const UInt32 *)values count:(NSUInteger)count {
  resultImgroupChangeMemberNotify.curUserIdListArray = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeUInt32];
  return self;
}
- (IMGroupChangeMemberNotifyBuilder *)clearCurUserIdList {
  resultImgroupChangeMemberNotify.curUserIdListArray = nil;
  return self;
}
- (PBAppendableArray *)chgUserIdList {
  return resultImgroupChangeMemberNotify.chgUserIdListArray;
}
- (UInt32)chgUserIdListAtIndex:(NSUInteger)index {
  return [resultImgroupChangeMemberNotify chgUserIdListAtIndex:index];
}
- (IMGroupChangeMemberNotifyBuilder *)addChgUserIdList:(UInt32)value {
  if (resultImgroupChangeMemberNotify.chgUserIdListArray == nil) {
    resultImgroupChangeMemberNotify.chgUserIdListArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeUInt32];
  }
  [resultImgroupChangeMemberNotify.chgUserIdListArray addUint32:value];
  return self;
}
- (IMGroupChangeMemberNotifyBuilder *)setChgUserIdListArray:(NSArray *)array {
  resultImgroupChangeMemberNotify.chgUserIdListArray = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeUInt32];
  return self;
}
- (IMGroupChangeMemberNotifyBuilder *)setChgUserIdListValues:(const UInt32 *)values count:(NSUInteger)count {
  resultImgroupChangeMemberNotify.chgUserIdListArray = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeUInt32];
  return self;
}
- (IMGroupChangeMemberNotifyBuilder *)clearChgUserIdList {
  resultImgroupChangeMemberNotify.chgUserIdListArray = nil;
  return self;
}
@end


// @@protoc_insertion_point(global_scope)
