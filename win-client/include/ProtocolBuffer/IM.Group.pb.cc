// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: IM.Group.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "IM.Group.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

namespace IM {
namespace Group {

void protobuf_ShutdownFile_IM_2eGroup_2eproto() {
  delete IMNormalGroupListReq::default_instance_;
  delete IMNormalGroupListRsp::default_instance_;
  delete IMGroupInfoListReq::default_instance_;
  delete IMGroupInfoListRsp::default_instance_;
  delete IMGroupCreateReq::default_instance_;
  delete IMGroupCreateRsp::default_instance_;
  delete IMGroupChangeMemberReq::default_instance_;
  delete IMGroupChangeMemberRsp::default_instance_;
  delete IMGroupShieldReq::default_instance_;
  delete IMGroupShieldRsp::default_instance_;
  delete IMGroupChangeMemberNotify::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_IM_2eGroup_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_IM_2eGroup_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  ::IM::BaseDefine::protobuf_AddDesc_IM_2eBaseDefine_2eproto();
  IMNormalGroupListReq::default_instance_ = new IMNormalGroupListReq();
  IMNormalGroupListRsp::default_instance_ = new IMNormalGroupListRsp();
  IMGroupInfoListReq::default_instance_ = new IMGroupInfoListReq();
  IMGroupInfoListRsp::default_instance_ = new IMGroupInfoListRsp();
  IMGroupCreateReq::default_instance_ = new IMGroupCreateReq();
  IMGroupCreateRsp::default_instance_ = new IMGroupCreateRsp();
  IMGroupChangeMemberReq::default_instance_ = new IMGroupChangeMemberReq();
  IMGroupChangeMemberRsp::default_instance_ = new IMGroupChangeMemberRsp();
  IMGroupShieldReq::default_instance_ = new IMGroupShieldReq();
  IMGroupShieldRsp::default_instance_ = new IMGroupShieldRsp();
  IMGroupChangeMemberNotify::default_instance_ = new IMGroupChangeMemberNotify();
  IMNormalGroupListReq::default_instance_->InitAsDefaultInstance();
  IMNormalGroupListRsp::default_instance_->InitAsDefaultInstance();
  IMGroupInfoListReq::default_instance_->InitAsDefaultInstance();
  IMGroupInfoListRsp::default_instance_->InitAsDefaultInstance();
  IMGroupCreateReq::default_instance_->InitAsDefaultInstance();
  IMGroupCreateRsp::default_instance_->InitAsDefaultInstance();
  IMGroupChangeMemberReq::default_instance_->InitAsDefaultInstance();
  IMGroupChangeMemberRsp::default_instance_->InitAsDefaultInstance();
  IMGroupShieldReq::default_instance_->InitAsDefaultInstance();
  IMGroupShieldRsp::default_instance_->InitAsDefaultInstance();
  IMGroupChangeMemberNotify::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_IM_2eGroup_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_IM_2eGroup_2eproto_once_);
void protobuf_AddDesc_IM_2eGroup_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_IM_2eGroup_2eproto_once_,
                 &protobuf_AddDesc_IM_2eGroup_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_IM_2eGroup_2eproto {
  StaticDescriptorInitializer_IM_2eGroup_2eproto() {
    protobuf_AddDesc_IM_2eGroup_2eproto();
  }
} static_descriptor_initializer_IM_2eGroup_2eproto_;
#endif

// ===================================================================

#ifndef _MSC_VER
const int IMNormalGroupListReq::kUserIdFieldNumber;
const int IMNormalGroupListReq::kAttachDataFieldNumber;
#endif  // !_MSC_VER

IMNormalGroupListReq::IMNormalGroupListReq()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Group.IMNormalGroupListReq)
}

void IMNormalGroupListReq::InitAsDefaultInstance() {
}

IMNormalGroupListReq::IMNormalGroupListReq(const IMNormalGroupListReq& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IM.Group.IMNormalGroupListReq)
}

void IMNormalGroupListReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  user_id_ = 0u;
  attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IMNormalGroupListReq::~IMNormalGroupListReq() {
  // @@protoc_insertion_point(destructor:IM.Group.IMNormalGroupListReq)
  SharedDtor();
}

void IMNormalGroupListReq::SharedDtor() {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void IMNormalGroupListReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const IMNormalGroupListReq& IMNormalGroupListReq::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_IM_2eGroup_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eGroup_2eproto();
#endif
  return *default_instance_;
}

IMNormalGroupListReq* IMNormalGroupListReq::default_instance_ = NULL;

IMNormalGroupListReq* IMNormalGroupListReq::New() const {
  return new IMNormalGroupListReq;
}

void IMNormalGroupListReq::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    user_id_ = 0u;
    if (has_attach_data()) {
      if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        attach_data_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool IMNormalGroupListReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:IM.Group.IMNormalGroupListReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_attach_data;
        break;
      }

      // optional bytes attach_data = 20;
      case 20: {
        if (tag == 162) {
         parse_attach_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_attach_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Group.IMNormalGroupListReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Group.IMNormalGroupListReq)
  return false;
#undef DO_
}

void IMNormalGroupListReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Group.IMNormalGroupListReq)
  // required uint32 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->user_id(), output);
  }

  // optional bytes attach_data = 20;
  if (has_attach_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      20, this->attach_data(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:IM.Group.IMNormalGroupListReq)
}

int IMNormalGroupListReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->user_id());
    }

    // optional bytes attach_data = 20;
    if (has_attach_data()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->attach_data());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMNormalGroupListReq::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const IMNormalGroupListReq*>(&from));
}

void IMNormalGroupListReq::MergeFrom(const IMNormalGroupListReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_attach_data()) {
      set_attach_data(from.attach_data());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void IMNormalGroupListReq::CopyFrom(const IMNormalGroupListReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMNormalGroupListReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void IMNormalGroupListReq::Swap(IMNormalGroupListReq* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(attach_data_, other->attach_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string IMNormalGroupListReq::GetTypeName() const {
  return "IM.Group.IMNormalGroupListReq";
}


// ===================================================================

#ifndef _MSC_VER
const int IMNormalGroupListRsp::kUserIdFieldNumber;
const int IMNormalGroupListRsp::kGroupVersionListFieldNumber;
const int IMNormalGroupListRsp::kAttachDataFieldNumber;
#endif  // !_MSC_VER

IMNormalGroupListRsp::IMNormalGroupListRsp()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Group.IMNormalGroupListRsp)
}

void IMNormalGroupListRsp::InitAsDefaultInstance() {
}

IMNormalGroupListRsp::IMNormalGroupListRsp(const IMNormalGroupListRsp& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IM.Group.IMNormalGroupListRsp)
}

void IMNormalGroupListRsp::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  user_id_ = 0u;
  attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IMNormalGroupListRsp::~IMNormalGroupListRsp() {
  // @@protoc_insertion_point(destructor:IM.Group.IMNormalGroupListRsp)
  SharedDtor();
}

void IMNormalGroupListRsp::SharedDtor() {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void IMNormalGroupListRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const IMNormalGroupListRsp& IMNormalGroupListRsp::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_IM_2eGroup_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eGroup_2eproto();
#endif
  return *default_instance_;
}

IMNormalGroupListRsp* IMNormalGroupListRsp::default_instance_ = NULL;

IMNormalGroupListRsp* IMNormalGroupListRsp::New() const {
  return new IMNormalGroupListRsp;
}

void IMNormalGroupListRsp::Clear() {
  if (_has_bits_[0 / 32] & 5) {
    user_id_ = 0u;
    if (has_attach_data()) {
      if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        attach_data_->clear();
      }
    }
  }
  group_version_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool IMNormalGroupListRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:IM.Group.IMNormalGroupListRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_group_version_list;
        break;
      }

      // repeated .IM.BaseDefine.GroupVersionInfo group_version_list = 2;
      case 2: {
        if (tag == 18) {
         parse_group_version_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_group_version_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_group_version_list;
        if (input->ExpectTag(162)) goto parse_attach_data;
        break;
      }

      // optional bytes attach_data = 20;
      case 20: {
        if (tag == 162) {
         parse_attach_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_attach_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Group.IMNormalGroupListRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Group.IMNormalGroupListRsp)
  return false;
#undef DO_
}

void IMNormalGroupListRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Group.IMNormalGroupListRsp)
  // required uint32 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->user_id(), output);
  }

  // repeated .IM.BaseDefine.GroupVersionInfo group_version_list = 2;
  for (int i = 0; i < this->group_version_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->group_version_list(i), output);
  }

  // optional bytes attach_data = 20;
  if (has_attach_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      20, this->attach_data(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:IM.Group.IMNormalGroupListRsp)
}

int IMNormalGroupListRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->user_id());
    }

    // optional bytes attach_data = 20;
    if (has_attach_data()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->attach_data());
    }

  }
  // repeated .IM.BaseDefine.GroupVersionInfo group_version_list = 2;
  total_size += 1 * this->group_version_list_size();
  for (int i = 0; i < this->group_version_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->group_version_list(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMNormalGroupListRsp::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const IMNormalGroupListRsp*>(&from));
}

void IMNormalGroupListRsp::MergeFrom(const IMNormalGroupListRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  group_version_list_.MergeFrom(from.group_version_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_attach_data()) {
      set_attach_data(from.attach_data());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void IMNormalGroupListRsp::CopyFrom(const IMNormalGroupListRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMNormalGroupListRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->group_version_list())) return false;
  return true;
}

void IMNormalGroupListRsp::Swap(IMNormalGroupListRsp* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    group_version_list_.Swap(&other->group_version_list_);
    std::swap(attach_data_, other->attach_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string IMNormalGroupListRsp::GetTypeName() const {
  return "IM.Group.IMNormalGroupListRsp";
}


// ===================================================================

#ifndef _MSC_VER
const int IMGroupInfoListReq::kUserIdFieldNumber;
const int IMGroupInfoListReq::kGroupVersionListFieldNumber;
const int IMGroupInfoListReq::kAttachDataFieldNumber;
#endif  // !_MSC_VER

IMGroupInfoListReq::IMGroupInfoListReq()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Group.IMGroupInfoListReq)
}

void IMGroupInfoListReq::InitAsDefaultInstance() {
}

IMGroupInfoListReq::IMGroupInfoListReq(const IMGroupInfoListReq& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IM.Group.IMGroupInfoListReq)
}

void IMGroupInfoListReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  user_id_ = 0u;
  attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IMGroupInfoListReq::~IMGroupInfoListReq() {
  // @@protoc_insertion_point(destructor:IM.Group.IMGroupInfoListReq)
  SharedDtor();
}

void IMGroupInfoListReq::SharedDtor() {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void IMGroupInfoListReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const IMGroupInfoListReq& IMGroupInfoListReq::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_IM_2eGroup_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eGroup_2eproto();
#endif
  return *default_instance_;
}

IMGroupInfoListReq* IMGroupInfoListReq::default_instance_ = NULL;

IMGroupInfoListReq* IMGroupInfoListReq::New() const {
  return new IMGroupInfoListReq;
}

void IMGroupInfoListReq::Clear() {
  if (_has_bits_[0 / 32] & 5) {
    user_id_ = 0u;
    if (has_attach_data()) {
      if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        attach_data_->clear();
      }
    }
  }
  group_version_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool IMGroupInfoListReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:IM.Group.IMGroupInfoListReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_group_version_list;
        break;
      }

      // repeated .IM.BaseDefine.GroupVersionInfo group_version_list = 2;
      case 2: {
        if (tag == 18) {
         parse_group_version_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_group_version_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_group_version_list;
        if (input->ExpectTag(162)) goto parse_attach_data;
        break;
      }

      // optional bytes attach_data = 20;
      case 20: {
        if (tag == 162) {
         parse_attach_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_attach_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Group.IMGroupInfoListReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Group.IMGroupInfoListReq)
  return false;
#undef DO_
}

void IMGroupInfoListReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Group.IMGroupInfoListReq)
  // required uint32 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->user_id(), output);
  }

  // repeated .IM.BaseDefine.GroupVersionInfo group_version_list = 2;
  for (int i = 0; i < this->group_version_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->group_version_list(i), output);
  }

  // optional bytes attach_data = 20;
  if (has_attach_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      20, this->attach_data(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:IM.Group.IMGroupInfoListReq)
}

int IMGroupInfoListReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->user_id());
    }

    // optional bytes attach_data = 20;
    if (has_attach_data()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->attach_data());
    }

  }
  // repeated .IM.BaseDefine.GroupVersionInfo group_version_list = 2;
  total_size += 1 * this->group_version_list_size();
  for (int i = 0; i < this->group_version_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->group_version_list(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMGroupInfoListReq::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const IMGroupInfoListReq*>(&from));
}

void IMGroupInfoListReq::MergeFrom(const IMGroupInfoListReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  group_version_list_.MergeFrom(from.group_version_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_attach_data()) {
      set_attach_data(from.attach_data());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void IMGroupInfoListReq::CopyFrom(const IMGroupInfoListReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMGroupInfoListReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->group_version_list())) return false;
  return true;
}

void IMGroupInfoListReq::Swap(IMGroupInfoListReq* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    group_version_list_.Swap(&other->group_version_list_);
    std::swap(attach_data_, other->attach_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string IMGroupInfoListReq::GetTypeName() const {
  return "IM.Group.IMGroupInfoListReq";
}


// ===================================================================

#ifndef _MSC_VER
const int IMGroupInfoListRsp::kUserIdFieldNumber;
const int IMGroupInfoListRsp::kGroupInfoListFieldNumber;
const int IMGroupInfoListRsp::kAttachDataFieldNumber;
#endif  // !_MSC_VER

IMGroupInfoListRsp::IMGroupInfoListRsp()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Group.IMGroupInfoListRsp)
}

void IMGroupInfoListRsp::InitAsDefaultInstance() {
}

IMGroupInfoListRsp::IMGroupInfoListRsp(const IMGroupInfoListRsp& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IM.Group.IMGroupInfoListRsp)
}

void IMGroupInfoListRsp::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  user_id_ = 0u;
  attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IMGroupInfoListRsp::~IMGroupInfoListRsp() {
  // @@protoc_insertion_point(destructor:IM.Group.IMGroupInfoListRsp)
  SharedDtor();
}

void IMGroupInfoListRsp::SharedDtor() {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void IMGroupInfoListRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const IMGroupInfoListRsp& IMGroupInfoListRsp::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_IM_2eGroup_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eGroup_2eproto();
#endif
  return *default_instance_;
}

IMGroupInfoListRsp* IMGroupInfoListRsp::default_instance_ = NULL;

IMGroupInfoListRsp* IMGroupInfoListRsp::New() const {
  return new IMGroupInfoListRsp;
}

void IMGroupInfoListRsp::Clear() {
  if (_has_bits_[0 / 32] & 5) {
    user_id_ = 0u;
    if (has_attach_data()) {
      if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        attach_data_->clear();
      }
    }
  }
  group_info_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool IMGroupInfoListRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:IM.Group.IMGroupInfoListRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_group_info_list;
        break;
      }

      // repeated .IM.BaseDefine.GroupInfo group_info_list = 2;
      case 2: {
        if (tag == 18) {
         parse_group_info_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_group_info_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_group_info_list;
        if (input->ExpectTag(162)) goto parse_attach_data;
        break;
      }

      // optional bytes attach_data = 20;
      case 20: {
        if (tag == 162) {
         parse_attach_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_attach_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Group.IMGroupInfoListRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Group.IMGroupInfoListRsp)
  return false;
#undef DO_
}

void IMGroupInfoListRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Group.IMGroupInfoListRsp)
  // required uint32 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->user_id(), output);
  }

  // repeated .IM.BaseDefine.GroupInfo group_info_list = 2;
  for (int i = 0; i < this->group_info_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->group_info_list(i), output);
  }

  // optional bytes attach_data = 20;
  if (has_attach_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      20, this->attach_data(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:IM.Group.IMGroupInfoListRsp)
}

int IMGroupInfoListRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->user_id());
    }

    // optional bytes attach_data = 20;
    if (has_attach_data()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->attach_data());
    }

  }
  // repeated .IM.BaseDefine.GroupInfo group_info_list = 2;
  total_size += 1 * this->group_info_list_size();
  for (int i = 0; i < this->group_info_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->group_info_list(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMGroupInfoListRsp::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const IMGroupInfoListRsp*>(&from));
}

void IMGroupInfoListRsp::MergeFrom(const IMGroupInfoListRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  group_info_list_.MergeFrom(from.group_info_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_attach_data()) {
      set_attach_data(from.attach_data());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void IMGroupInfoListRsp::CopyFrom(const IMGroupInfoListRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMGroupInfoListRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->group_info_list())) return false;
  return true;
}

void IMGroupInfoListRsp::Swap(IMGroupInfoListRsp* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    group_info_list_.Swap(&other->group_info_list_);
    std::swap(attach_data_, other->attach_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string IMGroupInfoListRsp::GetTypeName() const {
  return "IM.Group.IMGroupInfoListRsp";
}


// ===================================================================

#ifndef _MSC_VER
const int IMGroupCreateReq::kUserIdFieldNumber;
const int IMGroupCreateReq::kGroupTypeFieldNumber;
const int IMGroupCreateReq::kGroupNameFieldNumber;
const int IMGroupCreateReq::kGroupAvatarFieldNumber;
const int IMGroupCreateReq::kMemberIdListFieldNumber;
const int IMGroupCreateReq::kAttachDataFieldNumber;
#endif  // !_MSC_VER

IMGroupCreateReq::IMGroupCreateReq()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Group.IMGroupCreateReq)
}

void IMGroupCreateReq::InitAsDefaultInstance() {
}

IMGroupCreateReq::IMGroupCreateReq(const IMGroupCreateReq& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IM.Group.IMGroupCreateReq)
}

void IMGroupCreateReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  user_id_ = 0u;
  group_type_ = 2;
  group_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  group_avatar_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IMGroupCreateReq::~IMGroupCreateReq() {
  // @@protoc_insertion_point(destructor:IM.Group.IMGroupCreateReq)
  SharedDtor();
}

void IMGroupCreateReq::SharedDtor() {
  if (group_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete group_name_;
  }
  if (group_avatar_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete group_avatar_;
  }
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void IMGroupCreateReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const IMGroupCreateReq& IMGroupCreateReq::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_IM_2eGroup_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eGroup_2eproto();
#endif
  return *default_instance_;
}

IMGroupCreateReq* IMGroupCreateReq::default_instance_ = NULL;

IMGroupCreateReq* IMGroupCreateReq::New() const {
  return new IMGroupCreateReq;
}

void IMGroupCreateReq::Clear() {
  if (_has_bits_[0 / 32] & 47) {
    user_id_ = 0u;
    group_type_ = 2;
    if (has_group_name()) {
      if (group_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        group_name_->clear();
      }
    }
    if (has_group_avatar()) {
      if (group_avatar_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        group_avatar_->clear();
      }
    }
    if (has_attach_data()) {
      if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        attach_data_->clear();
      }
    }
  }
  member_id_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool IMGroupCreateReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:IM.Group.IMGroupCreateReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_group_type;
        break;
      }

      // required .IM.BaseDefine.GroupType group_type = 2 [default = GROUP_TYPE_TMP];
      case 2: {
        if (tag == 16) {
         parse_group_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::IM::BaseDefine::GroupType_IsValid(value)) {
            set_group_type(static_cast< ::IM::BaseDefine::GroupType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(tag);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_group_name;
        break;
      }

      // required string group_name = 3;
      case 3: {
        if (tag == 26) {
         parse_group_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_group_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_group_avatar;
        break;
      }

      // required string group_avatar = 4;
      case 4: {
        if (tag == 34) {
         parse_group_avatar:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_group_avatar()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_member_id_list;
        break;
      }

      // repeated uint32 member_id_list = 5;
      case 5: {
        if (tag == 40) {
         parse_member_id_list:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 40, input, this->mutable_member_id_list())));
        } else if (tag == 42) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_member_id_list())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_member_id_list;
        if (input->ExpectTag(162)) goto parse_attach_data;
        break;
      }

      // optional bytes attach_data = 20;
      case 20: {
        if (tag == 162) {
         parse_attach_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_attach_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Group.IMGroupCreateReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Group.IMGroupCreateReq)
  return false;
#undef DO_
}

void IMGroupCreateReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Group.IMGroupCreateReq)
  // required uint32 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->user_id(), output);
  }

  // required .IM.BaseDefine.GroupType group_type = 2 [default = GROUP_TYPE_TMP];
  if (has_group_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->group_type(), output);
  }

  // required string group_name = 3;
  if (has_group_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->group_name(), output);
  }

  // required string group_avatar = 4;
  if (has_group_avatar()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->group_avatar(), output);
  }

  // repeated uint32 member_id_list = 5;
  for (int i = 0; i < this->member_id_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      5, this->member_id_list(i), output);
  }

  // optional bytes attach_data = 20;
  if (has_attach_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      20, this->attach_data(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:IM.Group.IMGroupCreateReq)
}

int IMGroupCreateReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->user_id());
    }

    // required .IM.BaseDefine.GroupType group_type = 2 [default = GROUP_TYPE_TMP];
    if (has_group_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->group_type());
    }

    // required string group_name = 3;
    if (has_group_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->group_name());
    }

    // required string group_avatar = 4;
    if (has_group_avatar()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->group_avatar());
    }

    // optional bytes attach_data = 20;
    if (has_attach_data()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->attach_data());
    }

  }
  // repeated uint32 member_id_list = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->member_id_list_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->member_id_list(i));
    }
    total_size += 1 * this->member_id_list_size() + data_size;
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMGroupCreateReq::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const IMGroupCreateReq*>(&from));
}

void IMGroupCreateReq::MergeFrom(const IMGroupCreateReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  member_id_list_.MergeFrom(from.member_id_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_group_type()) {
      set_group_type(from.group_type());
    }
    if (from.has_group_name()) {
      set_group_name(from.group_name());
    }
    if (from.has_group_avatar()) {
      set_group_avatar(from.group_avatar());
    }
    if (from.has_attach_data()) {
      set_attach_data(from.attach_data());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void IMGroupCreateReq::CopyFrom(const IMGroupCreateReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMGroupCreateReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void IMGroupCreateReq::Swap(IMGroupCreateReq* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(group_type_, other->group_type_);
    std::swap(group_name_, other->group_name_);
    std::swap(group_avatar_, other->group_avatar_);
    member_id_list_.Swap(&other->member_id_list_);
    std::swap(attach_data_, other->attach_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string IMGroupCreateReq::GetTypeName() const {
  return "IM.Group.IMGroupCreateReq";
}


// ===================================================================

#ifndef _MSC_VER
const int IMGroupCreateRsp::kUserIdFieldNumber;
const int IMGroupCreateRsp::kResultCodeFieldNumber;
const int IMGroupCreateRsp::kGroupIdFieldNumber;
const int IMGroupCreateRsp::kGroupNameFieldNumber;
const int IMGroupCreateRsp::kUserIdListFieldNumber;
const int IMGroupCreateRsp::kAttachDataFieldNumber;
#endif  // !_MSC_VER

IMGroupCreateRsp::IMGroupCreateRsp()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Group.IMGroupCreateRsp)
}

void IMGroupCreateRsp::InitAsDefaultInstance() {
}

IMGroupCreateRsp::IMGroupCreateRsp(const IMGroupCreateRsp& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IM.Group.IMGroupCreateRsp)
}

void IMGroupCreateRsp::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  user_id_ = 0u;
  result_code_ = 0u;
  group_id_ = 0u;
  group_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IMGroupCreateRsp::~IMGroupCreateRsp() {
  // @@protoc_insertion_point(destructor:IM.Group.IMGroupCreateRsp)
  SharedDtor();
}

void IMGroupCreateRsp::SharedDtor() {
  if (group_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete group_name_;
  }
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void IMGroupCreateRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const IMGroupCreateRsp& IMGroupCreateRsp::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_IM_2eGroup_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eGroup_2eproto();
#endif
  return *default_instance_;
}

IMGroupCreateRsp* IMGroupCreateRsp::default_instance_ = NULL;

IMGroupCreateRsp* IMGroupCreateRsp::New() const {
  return new IMGroupCreateRsp;
}

void IMGroupCreateRsp::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<IMGroupCreateRsp*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 47) {
    ZR_(user_id_, result_code_);
    group_id_ = 0u;
    if (has_group_name()) {
      if (group_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        group_name_->clear();
      }
    }
    if (has_attach_data()) {
      if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        attach_data_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  user_id_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool IMGroupCreateRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:IM.Group.IMGroupCreateRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_result_code;
        break;
      }

      // required uint32 result_code = 2;
      case 2: {
        if (tag == 16) {
         parse_result_code:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_code_)));
          set_has_result_code();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_group_id;
        break;
      }

      // optional uint32 group_id = 3;
      case 3: {
        if (tag == 24) {
         parse_group_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &group_id_)));
          set_has_group_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_group_name;
        break;
      }

      // required string group_name = 4;
      case 4: {
        if (tag == 34) {
         parse_group_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_group_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_user_id_list;
        break;
      }

      // repeated uint32 user_id_list = 5;
      case 5: {
        if (tag == 40) {
         parse_user_id_list:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 40, input, this->mutable_user_id_list())));
        } else if (tag == 42) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_user_id_list())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_user_id_list;
        if (input->ExpectTag(162)) goto parse_attach_data;
        break;
      }

      // optional bytes attach_data = 20;
      case 20: {
        if (tag == 162) {
         parse_attach_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_attach_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Group.IMGroupCreateRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Group.IMGroupCreateRsp)
  return false;
#undef DO_
}

void IMGroupCreateRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Group.IMGroupCreateRsp)
  // required uint32 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->user_id(), output);
  }

  // required uint32 result_code = 2;
  if (has_result_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->result_code(), output);
  }

  // optional uint32 group_id = 3;
  if (has_group_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->group_id(), output);
  }

  // required string group_name = 4;
  if (has_group_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->group_name(), output);
  }

  // repeated uint32 user_id_list = 5;
  for (int i = 0; i < this->user_id_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      5, this->user_id_list(i), output);
  }

  // optional bytes attach_data = 20;
  if (has_attach_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      20, this->attach_data(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:IM.Group.IMGroupCreateRsp)
}

int IMGroupCreateRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->user_id());
    }

    // required uint32 result_code = 2;
    if (has_result_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->result_code());
    }

    // optional uint32 group_id = 3;
    if (has_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->group_id());
    }

    // required string group_name = 4;
    if (has_group_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->group_name());
    }

    // optional bytes attach_data = 20;
    if (has_attach_data()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->attach_data());
    }

  }
  // repeated uint32 user_id_list = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->user_id_list_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->user_id_list(i));
    }
    total_size += 1 * this->user_id_list_size() + data_size;
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMGroupCreateRsp::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const IMGroupCreateRsp*>(&from));
}

void IMGroupCreateRsp::MergeFrom(const IMGroupCreateRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  user_id_list_.MergeFrom(from.user_id_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_result_code()) {
      set_result_code(from.result_code());
    }
    if (from.has_group_id()) {
      set_group_id(from.group_id());
    }
    if (from.has_group_name()) {
      set_group_name(from.group_name());
    }
    if (from.has_attach_data()) {
      set_attach_data(from.attach_data());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void IMGroupCreateRsp::CopyFrom(const IMGroupCreateRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMGroupCreateRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000b) != 0x0000000b) return false;

  return true;
}

void IMGroupCreateRsp::Swap(IMGroupCreateRsp* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(result_code_, other->result_code_);
    std::swap(group_id_, other->group_id_);
    std::swap(group_name_, other->group_name_);
    user_id_list_.Swap(&other->user_id_list_);
    std::swap(attach_data_, other->attach_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string IMGroupCreateRsp::GetTypeName() const {
  return "IM.Group.IMGroupCreateRsp";
}


// ===================================================================

#ifndef _MSC_VER
const int IMGroupChangeMemberReq::kUserIdFieldNumber;
const int IMGroupChangeMemberReq::kChangeTypeFieldNumber;
const int IMGroupChangeMemberReq::kGroupIdFieldNumber;
const int IMGroupChangeMemberReq::kMemberIdListFieldNumber;
const int IMGroupChangeMemberReq::kAttachDataFieldNumber;
#endif  // !_MSC_VER

IMGroupChangeMemberReq::IMGroupChangeMemberReq()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Group.IMGroupChangeMemberReq)
}

void IMGroupChangeMemberReq::InitAsDefaultInstance() {
}

IMGroupChangeMemberReq::IMGroupChangeMemberReq(const IMGroupChangeMemberReq& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IM.Group.IMGroupChangeMemberReq)
}

void IMGroupChangeMemberReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  user_id_ = 0u;
  change_type_ = 1;
  group_id_ = 0u;
  attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IMGroupChangeMemberReq::~IMGroupChangeMemberReq() {
  // @@protoc_insertion_point(destructor:IM.Group.IMGroupChangeMemberReq)
  SharedDtor();
}

void IMGroupChangeMemberReq::SharedDtor() {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void IMGroupChangeMemberReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const IMGroupChangeMemberReq& IMGroupChangeMemberReq::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_IM_2eGroup_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eGroup_2eproto();
#endif
  return *default_instance_;
}

IMGroupChangeMemberReq* IMGroupChangeMemberReq::default_instance_ = NULL;

IMGroupChangeMemberReq* IMGroupChangeMemberReq::New() const {
  return new IMGroupChangeMemberReq;
}

void IMGroupChangeMemberReq::Clear() {
  if (_has_bits_[0 / 32] & 23) {
    user_id_ = 0u;
    change_type_ = 1;
    group_id_ = 0u;
    if (has_attach_data()) {
      if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        attach_data_->clear();
      }
    }
  }
  member_id_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool IMGroupChangeMemberReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:IM.Group.IMGroupChangeMemberReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_change_type;
        break;
      }

      // required .IM.BaseDefine.GroupModifyType change_type = 2;
      case 2: {
        if (tag == 16) {
         parse_change_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::IM::BaseDefine::GroupModifyType_IsValid(value)) {
            set_change_type(static_cast< ::IM::BaseDefine::GroupModifyType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(tag);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_group_id;
        break;
      }

      // required uint32 group_id = 3;
      case 3: {
        if (tag == 24) {
         parse_group_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &group_id_)));
          set_has_group_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_member_id_list;
        break;
      }

      // repeated uint32 member_id_list = 4;
      case 4: {
        if (tag == 32) {
         parse_member_id_list:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 32, input, this->mutable_member_id_list())));
        } else if (tag == 34) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_member_id_list())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_member_id_list;
        if (input->ExpectTag(162)) goto parse_attach_data;
        break;
      }

      // optional bytes attach_data = 20;
      case 20: {
        if (tag == 162) {
         parse_attach_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_attach_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Group.IMGroupChangeMemberReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Group.IMGroupChangeMemberReq)
  return false;
#undef DO_
}

void IMGroupChangeMemberReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Group.IMGroupChangeMemberReq)
  // required uint32 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->user_id(), output);
  }

  // required .IM.BaseDefine.GroupModifyType change_type = 2;
  if (has_change_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->change_type(), output);
  }

  // required uint32 group_id = 3;
  if (has_group_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->group_id(), output);
  }

  // repeated uint32 member_id_list = 4;
  for (int i = 0; i < this->member_id_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      4, this->member_id_list(i), output);
  }

  // optional bytes attach_data = 20;
  if (has_attach_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      20, this->attach_data(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:IM.Group.IMGroupChangeMemberReq)
}

int IMGroupChangeMemberReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->user_id());
    }

    // required .IM.BaseDefine.GroupModifyType change_type = 2;
    if (has_change_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->change_type());
    }

    // required uint32 group_id = 3;
    if (has_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->group_id());
    }

    // optional bytes attach_data = 20;
    if (has_attach_data()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->attach_data());
    }

  }
  // repeated uint32 member_id_list = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->member_id_list_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->member_id_list(i));
    }
    total_size += 1 * this->member_id_list_size() + data_size;
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMGroupChangeMemberReq::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const IMGroupChangeMemberReq*>(&from));
}

void IMGroupChangeMemberReq::MergeFrom(const IMGroupChangeMemberReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  member_id_list_.MergeFrom(from.member_id_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_change_type()) {
      set_change_type(from.change_type());
    }
    if (from.has_group_id()) {
      set_group_id(from.group_id());
    }
    if (from.has_attach_data()) {
      set_attach_data(from.attach_data());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void IMGroupChangeMemberReq::CopyFrom(const IMGroupChangeMemberReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMGroupChangeMemberReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void IMGroupChangeMemberReq::Swap(IMGroupChangeMemberReq* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(change_type_, other->change_type_);
    std::swap(group_id_, other->group_id_);
    member_id_list_.Swap(&other->member_id_list_);
    std::swap(attach_data_, other->attach_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string IMGroupChangeMemberReq::GetTypeName() const {
  return "IM.Group.IMGroupChangeMemberReq";
}


// ===================================================================

#ifndef _MSC_VER
const int IMGroupChangeMemberRsp::kUserIdFieldNumber;
const int IMGroupChangeMemberRsp::kChangeTypeFieldNumber;
const int IMGroupChangeMemberRsp::kResultCodeFieldNumber;
const int IMGroupChangeMemberRsp::kGroupIdFieldNumber;
const int IMGroupChangeMemberRsp::kCurUserIdListFieldNumber;
const int IMGroupChangeMemberRsp::kChgUserIdListFieldNumber;
const int IMGroupChangeMemberRsp::kAttachDataFieldNumber;
#endif  // !_MSC_VER

IMGroupChangeMemberRsp::IMGroupChangeMemberRsp()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Group.IMGroupChangeMemberRsp)
}

void IMGroupChangeMemberRsp::InitAsDefaultInstance() {
}

IMGroupChangeMemberRsp::IMGroupChangeMemberRsp(const IMGroupChangeMemberRsp& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IM.Group.IMGroupChangeMemberRsp)
}

void IMGroupChangeMemberRsp::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  user_id_ = 0u;
  change_type_ = 1;
  result_code_ = 0u;
  group_id_ = 0u;
  attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IMGroupChangeMemberRsp::~IMGroupChangeMemberRsp() {
  // @@protoc_insertion_point(destructor:IM.Group.IMGroupChangeMemberRsp)
  SharedDtor();
}

void IMGroupChangeMemberRsp::SharedDtor() {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void IMGroupChangeMemberRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const IMGroupChangeMemberRsp& IMGroupChangeMemberRsp::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_IM_2eGroup_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eGroup_2eproto();
#endif
  return *default_instance_;
}

IMGroupChangeMemberRsp* IMGroupChangeMemberRsp::default_instance_ = NULL;

IMGroupChangeMemberRsp* IMGroupChangeMemberRsp::New() const {
  return new IMGroupChangeMemberRsp;
}

void IMGroupChangeMemberRsp::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<IMGroupChangeMemberRsp*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 79) {
    ZR_(result_code_, group_id_);
    user_id_ = 0u;
    change_type_ = 1;
    if (has_attach_data()) {
      if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        attach_data_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  cur_user_id_list_.Clear();
  chg_user_id_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool IMGroupChangeMemberRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:IM.Group.IMGroupChangeMemberRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_change_type;
        break;
      }

      // required .IM.BaseDefine.GroupModifyType change_type = 2;
      case 2: {
        if (tag == 16) {
         parse_change_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::IM::BaseDefine::GroupModifyType_IsValid(value)) {
            set_change_type(static_cast< ::IM::BaseDefine::GroupModifyType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(tag);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_result_code;
        break;
      }

      // required uint32 result_code = 3;
      case 3: {
        if (tag == 24) {
         parse_result_code:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_code_)));
          set_has_result_code();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_group_id;
        break;
      }

      // required uint32 group_id = 4;
      case 4: {
        if (tag == 32) {
         parse_group_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &group_id_)));
          set_has_group_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_cur_user_id_list;
        break;
      }

      // repeated uint32 cur_user_id_list = 5;
      case 5: {
        if (tag == 40) {
         parse_cur_user_id_list:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 40, input, this->mutable_cur_user_id_list())));
        } else if (tag == 42) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_cur_user_id_list())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_cur_user_id_list;
        if (input->ExpectTag(48)) goto parse_chg_user_id_list;
        break;
      }

      // repeated uint32 chg_user_id_list = 6;
      case 6: {
        if (tag == 48) {
         parse_chg_user_id_list:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 48, input, this->mutable_chg_user_id_list())));
        } else if (tag == 50) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_chg_user_id_list())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_chg_user_id_list;
        if (input->ExpectTag(162)) goto parse_attach_data;
        break;
      }

      // optional bytes attach_data = 20;
      case 20: {
        if (tag == 162) {
         parse_attach_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_attach_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Group.IMGroupChangeMemberRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Group.IMGroupChangeMemberRsp)
  return false;
#undef DO_
}

void IMGroupChangeMemberRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Group.IMGroupChangeMemberRsp)
  // required uint32 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->user_id(), output);
  }

  // required .IM.BaseDefine.GroupModifyType change_type = 2;
  if (has_change_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->change_type(), output);
  }

  // required uint32 result_code = 3;
  if (has_result_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->result_code(), output);
  }

  // required uint32 group_id = 4;
  if (has_group_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->group_id(), output);
  }

  // repeated uint32 cur_user_id_list = 5;
  for (int i = 0; i < this->cur_user_id_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      5, this->cur_user_id_list(i), output);
  }

  // repeated uint32 chg_user_id_list = 6;
  for (int i = 0; i < this->chg_user_id_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      6, this->chg_user_id_list(i), output);
  }

  // optional bytes attach_data = 20;
  if (has_attach_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      20, this->attach_data(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:IM.Group.IMGroupChangeMemberRsp)
}

int IMGroupChangeMemberRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->user_id());
    }

    // required .IM.BaseDefine.GroupModifyType change_type = 2;
    if (has_change_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->change_type());
    }

    // required uint32 result_code = 3;
    if (has_result_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->result_code());
    }

    // required uint32 group_id = 4;
    if (has_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->group_id());
    }

    // optional bytes attach_data = 20;
    if (has_attach_data()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->attach_data());
    }

  }
  // repeated uint32 cur_user_id_list = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->cur_user_id_list_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->cur_user_id_list(i));
    }
    total_size += 1 * this->cur_user_id_list_size() + data_size;
  }

  // repeated uint32 chg_user_id_list = 6;
  {
    int data_size = 0;
    for (int i = 0; i < this->chg_user_id_list_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->chg_user_id_list(i));
    }
    total_size += 1 * this->chg_user_id_list_size() + data_size;
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMGroupChangeMemberRsp::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const IMGroupChangeMemberRsp*>(&from));
}

void IMGroupChangeMemberRsp::MergeFrom(const IMGroupChangeMemberRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  cur_user_id_list_.MergeFrom(from.cur_user_id_list_);
  chg_user_id_list_.MergeFrom(from.chg_user_id_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_change_type()) {
      set_change_type(from.change_type());
    }
    if (from.has_result_code()) {
      set_result_code(from.result_code());
    }
    if (from.has_group_id()) {
      set_group_id(from.group_id());
    }
    if (from.has_attach_data()) {
      set_attach_data(from.attach_data());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void IMGroupChangeMemberRsp::CopyFrom(const IMGroupChangeMemberRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMGroupChangeMemberRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void IMGroupChangeMemberRsp::Swap(IMGroupChangeMemberRsp* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(change_type_, other->change_type_);
    std::swap(result_code_, other->result_code_);
    std::swap(group_id_, other->group_id_);
    cur_user_id_list_.Swap(&other->cur_user_id_list_);
    chg_user_id_list_.Swap(&other->chg_user_id_list_);
    std::swap(attach_data_, other->attach_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string IMGroupChangeMemberRsp::GetTypeName() const {
  return "IM.Group.IMGroupChangeMemberRsp";
}


// ===================================================================

#ifndef _MSC_VER
const int IMGroupShieldReq::kUserIdFieldNumber;
const int IMGroupShieldReq::kGroupIdFieldNumber;
const int IMGroupShieldReq::kShieldStatusFieldNumber;
const int IMGroupShieldReq::kAttachDataFieldNumber;
#endif  // !_MSC_VER

IMGroupShieldReq::IMGroupShieldReq()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Group.IMGroupShieldReq)
}

void IMGroupShieldReq::InitAsDefaultInstance() {
}

IMGroupShieldReq::IMGroupShieldReq(const IMGroupShieldReq& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IM.Group.IMGroupShieldReq)
}

void IMGroupShieldReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  user_id_ = 0u;
  group_id_ = 0u;
  shield_status_ = 0u;
  attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IMGroupShieldReq::~IMGroupShieldReq() {
  // @@protoc_insertion_point(destructor:IM.Group.IMGroupShieldReq)
  SharedDtor();
}

void IMGroupShieldReq::SharedDtor() {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void IMGroupShieldReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const IMGroupShieldReq& IMGroupShieldReq::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_IM_2eGroup_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eGroup_2eproto();
#endif
  return *default_instance_;
}

IMGroupShieldReq* IMGroupShieldReq::default_instance_ = NULL;

IMGroupShieldReq* IMGroupShieldReq::New() const {
  return new IMGroupShieldReq;
}

void IMGroupShieldReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<IMGroupShieldReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(user_id_, group_id_);
    shield_status_ = 0u;
    if (has_attach_data()) {
      if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        attach_data_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool IMGroupShieldReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:IM.Group.IMGroupShieldReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_group_id;
        break;
      }

      // required uint32 group_id = 2;
      case 2: {
        if (tag == 16) {
         parse_group_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &group_id_)));
          set_has_group_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_shield_status;
        break;
      }

      // required uint32 shield_status = 3;
      case 3: {
        if (tag == 24) {
         parse_shield_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &shield_status_)));
          set_has_shield_status();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_attach_data;
        break;
      }

      // optional bytes attach_data = 20;
      case 20: {
        if (tag == 162) {
         parse_attach_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_attach_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Group.IMGroupShieldReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Group.IMGroupShieldReq)
  return false;
#undef DO_
}

void IMGroupShieldReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Group.IMGroupShieldReq)
  // required uint32 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->user_id(), output);
  }

  // required uint32 group_id = 2;
  if (has_group_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->group_id(), output);
  }

  // required uint32 shield_status = 3;
  if (has_shield_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->shield_status(), output);
  }

  // optional bytes attach_data = 20;
  if (has_attach_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      20, this->attach_data(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:IM.Group.IMGroupShieldReq)
}

int IMGroupShieldReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->user_id());
    }

    // required uint32 group_id = 2;
    if (has_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->group_id());
    }

    // required uint32 shield_status = 3;
    if (has_shield_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->shield_status());
    }

    // optional bytes attach_data = 20;
    if (has_attach_data()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->attach_data());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMGroupShieldReq::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const IMGroupShieldReq*>(&from));
}

void IMGroupShieldReq::MergeFrom(const IMGroupShieldReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_group_id()) {
      set_group_id(from.group_id());
    }
    if (from.has_shield_status()) {
      set_shield_status(from.shield_status());
    }
    if (from.has_attach_data()) {
      set_attach_data(from.attach_data());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void IMGroupShieldReq::CopyFrom(const IMGroupShieldReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMGroupShieldReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void IMGroupShieldReq::Swap(IMGroupShieldReq* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(group_id_, other->group_id_);
    std::swap(shield_status_, other->shield_status_);
    std::swap(attach_data_, other->attach_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string IMGroupShieldReq::GetTypeName() const {
  return "IM.Group.IMGroupShieldReq";
}


// ===================================================================

#ifndef _MSC_VER
const int IMGroupShieldRsp::kUserIdFieldNumber;
const int IMGroupShieldRsp::kGroupIdFieldNumber;
const int IMGroupShieldRsp::kResultCodeFieldNumber;
const int IMGroupShieldRsp::kAttachDataFieldNumber;
#endif  // !_MSC_VER

IMGroupShieldRsp::IMGroupShieldRsp()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Group.IMGroupShieldRsp)
}

void IMGroupShieldRsp::InitAsDefaultInstance() {
}

IMGroupShieldRsp::IMGroupShieldRsp(const IMGroupShieldRsp& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IM.Group.IMGroupShieldRsp)
}

void IMGroupShieldRsp::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  user_id_ = 0u;
  group_id_ = 0u;
  result_code_ = 0u;
  attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IMGroupShieldRsp::~IMGroupShieldRsp() {
  // @@protoc_insertion_point(destructor:IM.Group.IMGroupShieldRsp)
  SharedDtor();
}

void IMGroupShieldRsp::SharedDtor() {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void IMGroupShieldRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const IMGroupShieldRsp& IMGroupShieldRsp::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_IM_2eGroup_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eGroup_2eproto();
#endif
  return *default_instance_;
}

IMGroupShieldRsp* IMGroupShieldRsp::default_instance_ = NULL;

IMGroupShieldRsp* IMGroupShieldRsp::New() const {
  return new IMGroupShieldRsp;
}

void IMGroupShieldRsp::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<IMGroupShieldRsp*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(user_id_, group_id_);
    result_code_ = 0u;
    if (has_attach_data()) {
      if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        attach_data_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool IMGroupShieldRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:IM.Group.IMGroupShieldRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_group_id;
        break;
      }

      // required uint32 group_id = 2;
      case 2: {
        if (tag == 16) {
         parse_group_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &group_id_)));
          set_has_group_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_result_code;
        break;
      }

      // required uint32 result_code = 3;
      case 3: {
        if (tag == 24) {
         parse_result_code:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_code_)));
          set_has_result_code();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_attach_data;
        break;
      }

      // optional bytes attach_data = 20;
      case 20: {
        if (tag == 162) {
         parse_attach_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_attach_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Group.IMGroupShieldRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Group.IMGroupShieldRsp)
  return false;
#undef DO_
}

void IMGroupShieldRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Group.IMGroupShieldRsp)
  // required uint32 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->user_id(), output);
  }

  // required uint32 group_id = 2;
  if (has_group_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->group_id(), output);
  }

  // required uint32 result_code = 3;
  if (has_result_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->result_code(), output);
  }

  // optional bytes attach_data = 20;
  if (has_attach_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      20, this->attach_data(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:IM.Group.IMGroupShieldRsp)
}

int IMGroupShieldRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->user_id());
    }

    // required uint32 group_id = 2;
    if (has_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->group_id());
    }

    // required uint32 result_code = 3;
    if (has_result_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->result_code());
    }

    // optional bytes attach_data = 20;
    if (has_attach_data()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->attach_data());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMGroupShieldRsp::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const IMGroupShieldRsp*>(&from));
}

void IMGroupShieldRsp::MergeFrom(const IMGroupShieldRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_group_id()) {
      set_group_id(from.group_id());
    }
    if (from.has_result_code()) {
      set_result_code(from.result_code());
    }
    if (from.has_attach_data()) {
      set_attach_data(from.attach_data());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void IMGroupShieldRsp::CopyFrom(const IMGroupShieldRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMGroupShieldRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void IMGroupShieldRsp::Swap(IMGroupShieldRsp* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(group_id_, other->group_id_);
    std::swap(result_code_, other->result_code_);
    std::swap(attach_data_, other->attach_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string IMGroupShieldRsp::GetTypeName() const {
  return "IM.Group.IMGroupShieldRsp";
}


// ===================================================================

#ifndef _MSC_VER
const int IMGroupChangeMemberNotify::kUserIdFieldNumber;
const int IMGroupChangeMemberNotify::kChangeTypeFieldNumber;
const int IMGroupChangeMemberNotify::kGroupIdFieldNumber;
const int IMGroupChangeMemberNotify::kCurUserIdListFieldNumber;
const int IMGroupChangeMemberNotify::kChgUserIdListFieldNumber;
#endif  // !_MSC_VER

IMGroupChangeMemberNotify::IMGroupChangeMemberNotify()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Group.IMGroupChangeMemberNotify)
}

void IMGroupChangeMemberNotify::InitAsDefaultInstance() {
}

IMGroupChangeMemberNotify::IMGroupChangeMemberNotify(const IMGroupChangeMemberNotify& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IM.Group.IMGroupChangeMemberNotify)
}

void IMGroupChangeMemberNotify::SharedCtor() {
  _cached_size_ = 0;
  user_id_ = 0u;
  change_type_ = 1;
  group_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IMGroupChangeMemberNotify::~IMGroupChangeMemberNotify() {
  // @@protoc_insertion_point(destructor:IM.Group.IMGroupChangeMemberNotify)
  SharedDtor();
}

void IMGroupChangeMemberNotify::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void IMGroupChangeMemberNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const IMGroupChangeMemberNotify& IMGroupChangeMemberNotify::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_IM_2eGroup_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eGroup_2eproto();
#endif
  return *default_instance_;
}

IMGroupChangeMemberNotify* IMGroupChangeMemberNotify::default_instance_ = NULL;

IMGroupChangeMemberNotify* IMGroupChangeMemberNotify::New() const {
  return new IMGroupChangeMemberNotify;
}

void IMGroupChangeMemberNotify::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    user_id_ = 0u;
    change_type_ = 1;
    group_id_ = 0u;
  }
  cur_user_id_list_.Clear();
  chg_user_id_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool IMGroupChangeMemberNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:IM.Group.IMGroupChangeMemberNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_change_type;
        break;
      }

      // required .IM.BaseDefine.GroupModifyType change_type = 2;
      case 2: {
        if (tag == 16) {
         parse_change_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::IM::BaseDefine::GroupModifyType_IsValid(value)) {
            set_change_type(static_cast< ::IM::BaseDefine::GroupModifyType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(tag);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_group_id;
        break;
      }

      // required uint32 group_id = 3;
      case 3: {
        if (tag == 24) {
         parse_group_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &group_id_)));
          set_has_group_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_cur_user_id_list;
        break;
      }

      // repeated uint32 cur_user_id_list = 4;
      case 4: {
        if (tag == 32) {
         parse_cur_user_id_list:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 32, input, this->mutable_cur_user_id_list())));
        } else if (tag == 34) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_cur_user_id_list())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_cur_user_id_list;
        if (input->ExpectTag(40)) goto parse_chg_user_id_list;
        break;
      }

      // repeated uint32 chg_user_id_list = 5;
      case 5: {
        if (tag == 40) {
         parse_chg_user_id_list:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 40, input, this->mutable_chg_user_id_list())));
        } else if (tag == 42) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_chg_user_id_list())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_chg_user_id_list;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Group.IMGroupChangeMemberNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Group.IMGroupChangeMemberNotify)
  return false;
#undef DO_
}

void IMGroupChangeMemberNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Group.IMGroupChangeMemberNotify)
  // required uint32 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->user_id(), output);
  }

  // required .IM.BaseDefine.GroupModifyType change_type = 2;
  if (has_change_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->change_type(), output);
  }

  // required uint32 group_id = 3;
  if (has_group_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->group_id(), output);
  }

  // repeated uint32 cur_user_id_list = 4;
  for (int i = 0; i < this->cur_user_id_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      4, this->cur_user_id_list(i), output);
  }

  // repeated uint32 chg_user_id_list = 5;
  for (int i = 0; i < this->chg_user_id_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      5, this->chg_user_id_list(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:IM.Group.IMGroupChangeMemberNotify)
}

int IMGroupChangeMemberNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->user_id());
    }

    // required .IM.BaseDefine.GroupModifyType change_type = 2;
    if (has_change_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->change_type());
    }

    // required uint32 group_id = 3;
    if (has_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->group_id());
    }

  }
  // repeated uint32 cur_user_id_list = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->cur_user_id_list_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->cur_user_id_list(i));
    }
    total_size += 1 * this->cur_user_id_list_size() + data_size;
  }

  // repeated uint32 chg_user_id_list = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->chg_user_id_list_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->chg_user_id_list(i));
    }
    total_size += 1 * this->chg_user_id_list_size() + data_size;
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMGroupChangeMemberNotify::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const IMGroupChangeMemberNotify*>(&from));
}

void IMGroupChangeMemberNotify::MergeFrom(const IMGroupChangeMemberNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  cur_user_id_list_.MergeFrom(from.cur_user_id_list_);
  chg_user_id_list_.MergeFrom(from.chg_user_id_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_change_type()) {
      set_change_type(from.change_type());
    }
    if (from.has_group_id()) {
      set_group_id(from.group_id());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void IMGroupChangeMemberNotify::CopyFrom(const IMGroupChangeMemberNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMGroupChangeMemberNotify::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void IMGroupChangeMemberNotify::Swap(IMGroupChangeMemberNotify* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(change_type_, other->change_type_);
    std::swap(group_id_, other->group_id_);
    cur_user_id_list_.Swap(&other->cur_user_id_list_);
    chg_user_id_list_.Swap(&other->chg_user_id_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string IMGroupChangeMemberNotify::GetTypeName() const {
  return "IM.Group.IMGroupChangeMemberNotify";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Group
}  // namespace IM

// @@protoc_insertion_point(global_scope)
